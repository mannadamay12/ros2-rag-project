Title: Working with multiple ROS 2 middleware implementations
URL: https://docs.ros.org/en/jazzy/How-To-Guides/Working-with-multiple-RMW-implementations.html
Section: Installation
--------------------------------------------------------------------------------

Working with multiple ROS 2 middleware implementationsTable of ContentsPrerequisitesSpecifying RMW implementationsAdding RMW implementations to your workspaceTroubleshootingChecking the Current RMWEnsuring use of a particular RMW implementationRTI Connext on OSX: Failure due to insufficient shared memory kernel settingsThis page explains the default RMW implementation and how to specify an alternative.PrerequisitesYou should have already read theDDS and ROS middleware implementations page.Specifying RMW implementationsTo have multiple RMW implementations available for use you must have installed the ROS 2 binaries and any additional dependencies for specific RMW implementations, or built ROS 2 from source with multiple RMW implementations in the workspace (the RMW implementations are included in the build by default if their compile-time dependencies are met). SeeInstall DDS implementations.Both C++ and Python nodes support an environment variableRMW_IMPLEMENTATIONthat allows the user to select the RMW implementation to use when running ROS 2 applications.The user may set this variable to a specific implementation identifier, such asrmw_cyclonedds_cpp,rmw_fastrtps_cpp,rmw_connextdds, orrmw_gurumdds_cpp.For example, to run the talker demo using the C++ talker and Python listener with the Connext RMW implementation:LinuxmacOSWindowsRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalker# Run in another terminalRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_pylistenerRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalker# Run in another terminalRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_pylistenersetRMW_IMPLEMENTATION=rmw_connextdds
ros2 run demo_nodes_cpp talkerREM run in another terminalsetRMW_IMPLEMENTATION=rmw_connextdds
ros2 run demo_nodes_py listenerAdding RMW implementations to your workspaceSuppose that you have built your ROS 2 workspace with only Fast DDS installed and therefore only the Fast DDS RMW implementation built.
The last time your workspace was built, any other RMW implementation packages,rmw_connextddsfor example, were probably unable to find installations of the relevant DDS implementations.
If you then install an additional DDS implementation, Connext for example, you will need to re-trigger the check for a Connext installation that occurs when the Connext RMW implementation is being built.
You can do this by specifying the--cmake-clean-cacheflag on your next workspace build, and you should see that the RMW implementation package then gets built for the newly installed DDS implementation.It is possible to run into a problem when “rebuilding” the workspace with an additional RMW implementation using the--cmake-clean-cacheoption where the build complains about the default RMW implementation changing.
To resolve this, you can either set the default implementation to what is was before with theRMW_IMPLEMENTATIONCMake argument or you can delete the build folder for packages that complain and continue the build with--packages-start<packagename>.TroubleshootingChecking the Current RMWTo check the RMW that is currently in use you simply check theRMW_IMPLEMENTATIONenvironment variable. On Linux systemsprintenvprints the full list of environment variables.
Other operating systems will have other procedures for viewing environment variables.
IfRMW_IMPLEMENTATIONis not in the environment it is safe to assume you are using the default for your ROS distro, otherwise the current RMW is the value listed.
The default RMW for each ROS Distro can be found inREP-2000.Ensuring use of a particular RMW implementationIf theRMW_IMPLEMENTATIONenvironment variable is set to an RMW implementation for which support is not installed, you will see an error message similar to the following if you have only one implementation installed:ExpectedRMWimplementationidentifierof'rmw_connextdds'butinsteadfound'rmw_fastrtps_cpp',exitingwith102.If you have support for multiple RMW implementations installed and you request use of one that is not installed, you will see something similar to:ErrorgettingRMWimplementationidentifier/RMWimplementationnotinstalled(expectedidentifierof'rmw_connextdds'),exitingwith1.If this occurs, double check that your ROS 2 installation includes support for the RMW implementation that you have specified in theRMW_IMPLEMENTATIONenvironment variable.If you want to switch between RMW implementations, verify that the ROS 2 daemon process is not running with the previous RMW implementation to avoid any issues between nodes and command line tools such asros2node.
For example, if you run:RMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalkerandros2nodelistit will generate a daemon with a Fast DDS implementation:2131822.00.653589655044pts/8Sl16:140:00/usr/bin/python3/opt/ros/jazzy/bin/_ros2_daemon--rmw-implementationrmw_fastrtps_cpp--ros-domain-id0Even if you run the command line tool again with the correct RMW implementation, the daemon’s RMW implementation will not change and the ROS 2 command line tools will fail.To solve this, simply stop the daemon process:ros2daemonstopand rerun the ROS 2 command line tool with the correct RMW implementation.RTI Connext on OSX: Failure due to insufficient shared memory kernel settingsIf you receive an error message similar to below when running RTI Connext on OSX:[D0062|ENABLE]DDS_DomainParticipantPresentation_reserve_participant_index_entryports:!enable reserve participant index[D0062|ENABLE]DDS_DomainParticipant_reserve_participant_index_entryports:Unusable shared memory transport. For a more in-   depth explanation of the possible problem and solution, please visit https://community.rti.com/kb/osx510.This error is caused by an insufficient number or size of shared memory segments allowed by the operating system. As a result, theDomainParticipantis unable to allocate enough resources and calculate its participant index which causes the error.You can increase the shared memory resources of your machine either temporarily or permanently.To increase the settings temporarily, you can run the following commands as user root:/usr/sbin/sysctl -w kern.sysv.shmmax=419430400/usr/sbin/sysctl -w kern.sysv.shmmin=1/usr/sbin/sysctl -w kern.sysv.shmmni=128/usr/sbin/sysctl -w kern.sysv.shmseg=1024/usr/sbin/sysctl -w kern.sysv.shmall=262144To increase the settings permanently, you will need to edit or create the file/etc/sysctl.conf. Creating or editing this file will require root permissions. Either add to your existingetc/sysctl.conffile or create/etc/sysctl.confwith the following lines:kern.sysv.shmmax=419430400kern.sysv.shmmin=1kern.sysv.shmmni=128kern.sysv.shmseg=1024kern.sysv.shmall=262144You will need to reboot the machine after modifying this file to have the changes take effect.This solution is edited from the RTI Connext community forum.
See theoriginal postfor more detailed explanation.

Code Examples:

Language: unknown
RMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalker# Run in another terminalRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_pylistener

Language: unknown
RMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalker# Run in another terminalRMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_pylistener

Language: unknown
setRMW_IMPLEMENTATION=rmw_connextdds
ros2 run demo_nodes_cpp talkerREM run in another terminalsetRMW_IMPLEMENTATION=rmw_connextdds
ros2 run demo_nodes_py listener

Language: unknown
ExpectedRMWimplementationidentifierof'rmw_connextdds'butinsteadfound'rmw_fastrtps_cpp',exitingwith102.

Language: unknown
ErrorgettingRMWimplementationidentifier/RMWimplementationnotinstalled(expectedidentifierof'rmw_connextdds'),exitingwith1.

Language: unknown
RMW_IMPLEMENTATION=rmw_connextddsros2rundemo_nodes_cpptalker

Language: unknown
ros2nodelist

Language: unknown
2131822.00.653589655044pts/8Sl16:140:00/usr/bin/python3/opt/ros/jazzy/bin/_ros2_daemon--rmw-implementationrmw_fastrtps_cpp--ros-domain-id0

Language: unknown
ros2daemonstop

Language: unknown
[D0062|ENABLE]DDS_DomainParticipantPresentation_reserve_participant_index_entryports:!enable reserve participant index[D0062|ENABLE]DDS_DomainParticipant_reserve_participant_index_entryports:Unusable shared memory transport. For a more in-   depth explanation of the possible problem and solution, please visit https://community.rti.com/kb/osx510.

Language: unknown
/usr/sbin/sysctl -w kern.sysv.shmmax=419430400/usr/sbin/sysctl -w kern.sysv.shmmin=1/usr/sbin/sysctl -w kern.sysv.shmmni=128/usr/sbin/sysctl -w kern.sysv.shmseg=1024/usr/sbin/sysctl -w kern.sysv.shmall=262144

Language: unknown
kern.sysv.shmmax=419430400kern.sysv.shmmin=1kern.sysv.shmmni=128kern.sysv.shmseg=1024kern.sysv.shmall=262144
