Title: Humble Hawksbill (humble)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Humble-Hawksbill.html
Section: Installation
--------------------------------------------------------------------------------

Humble Hawksbill (humble)Table of ContentsSupported PlatformsInstallationChanges in Patch Release 1 (2022-11-23)ros2topicNew features in this ROS 2 releaseament_cmake_gen_version_hlaunchlaunch_rosSROS2 Security enclaves support Certificate Revocation ListsContent Filtered Topicsros2clirviz2Changes since the Galactic releaseC++ headers are installed in a subdirectorycommon_interfacesrmwrmw_connextddsrclrclcpprclcpp_lifecyclerclpyros1_bridgeros2clirobot_state_publisherrosidl_cmakerviz2geometry2rosbag2Known IssuesRelease TimelineHumble Hawksbillis the eighth release of ROS 2.
What follows is highlights of the important changes and features in Humble Hawksbill since the last release.
For a list of all of the changes since Galactic, see thelong form changelog.Supported PlatformsHumble Hawksbill is primarily supported on the following platforms:Tier 1 platforms:Ubuntu 22.04 (Jammy):amd64andarm64Windows 10 (Visual Studio 2019):amd64Tier 2 platforms:RHEL 8:amd64Tier 3 platforms:Ubuntu 20.04 (Focal):amd64macOS:amd64Debian Bullseye:amd64For more information about RMW implementations, compiler / interpreter versions, and system dependency versions seeREP 2000.InstallationInstall Humble HawksbillChanges in Patch Release 1 (2022-11-23)ros2topicnowas keyword forbuiltin_interfaces.msg.Timeandautoforstd_msgs.msg.Headerros2topicpubnow allows to set abuiltin_interfaces.msg.Timemessage to the current time via thenowkeyword.
Similarly, astd_msg.msg.Headermessage will be automatically generated when passed the keywordauto.
This behavior matches that of ROS 1’srostopic(http://wiki.ros.org/ROS/YAMLCommandLine#Headers.2Ftimestamps)Related PR:ros2/ros2cli#751New features in this ROS 2 releaseament_cmake_gen_version_hGenerating a C/C++ header with version infoA new CMake function to generate a header with the package version info was added to theament_cmake_gen_version_hinament/ament_cmake#377.
Here’s the simplest use case:project(my_project)add_library(my_lib...)ament_generate_version_header(my_lib)It will generate a header with version info from thepackage.xmland make it available to targets that link against themy_liblibrary.How to include the header:#include<my_project/version.h>Where the header is installed to:set(VERSION_HEADER${CMAKE_INSTALL_PREFIX}/include/my_project/my_project/version.h)launchScoping environment variables in group actionsSimilar to launch configurations, now by default, the state of environment variables are scoped to group actions.For example, in the following launch files the executed processe will echo the value1(before Humble it would echo2):XMLPython<launch><set_envname="FOO"value="1"/><group><set_envname="FOO"value="2"/></group><executablecmd="echo $FOO"output="screen"shell="true"/></launch>importlaunchimportlaunch.actionsdefgenerate_launch_description():returnlaunch.LaunchDescription([launch.actions.SetEnvironmentVariable(name='FOO',value='1'),launch.actions.GroupAction([launch.actions.SetEnvironmentVariable(name='FOO',value='2'),]),launch.actions.ExecuteProcess(cmd=['echo','$FOO'],output='screen',shell=True),])If you would like disable scoping for launch configurations and and environment variables you can set thescopedargument (or attribute) to false.Related PR:ros2/launch#601launch_pytestWe’ve added a new package,launch_pytest, that acts as an alternative tolaunch_testing.launch_pytestis a simple pytest plugin that provides pytest fixtures to manage the lifetime of a launch service.Check out thepackage README for details and examples.Related PR:ros2/launch#528Allow matching target actions with a callableEvent handlers that take a target action object to match can now also take a callable instead to do the matching.Related PR:ros2/launch#540Access to math module when evaluating Python expressionsInsidePythonExpressionsubstitutions (eval) we can now use symbols from Python’s math module.
For example,<launch><logmessage="$(eval 'ceil(pi)')"/></launch>Related PR:ros2/launch#557Boolean substitutionsNew substitutionsNotSubstitution,AndSubstitution, andOrSubstitutionprovide a convenient way to perform logical operations, for example<launch><letname="p"value="true"/><letname="q"value="false"/><groupif="$(or $(var p) $(var q))"><logmessage="The first condition is true"/></group><groupunless="$(and $(var p) $(var q))"><logmessage="The second condition is false"/></group><groupif="$(not $(var q))"><logmessage="The third condition is true"/></group></launch>Related PR:ros2/launch#598New actionsAppendEnvironmentVariableappends a value to an existing environment variable.Related PR:ros2/launch#543ResetLaunchConfigurationsresets any configuration applied to the launch configuration.Related PR:ros2/launch#515launch_rosPassing ROS arguments to node actionsIt is now possible to provideROS-specific node argumentsdirectly, without needing to useargswith a leading--ros-argsflag:XMLYAML<launch><nodepkg="demo_nodes_cpp"exec="talker"ros_args="--log-level debug"/></launch>launch:-node:pkg:demo_nodes_cppexec:talkerros_args:'--log-leveldebug'The corresponding parameter for theNodeaction in Python launch files isros_arguments:fromlaunchimportLaunchDescriptionimportlaunch_ros.actionsdefgenerate_launch_description():returnLaunchDescription([launch_ros.actions.Node(package='demo_nodes_cpp',executable='talker',ros_arguments=['--log-level','debug'],),])Related PRs:ros2/launch_ros#249andros2/launch_ros#253.Frontend support for composable nodesWe can now start node containers and load components into them from frontend launch files, for example:XMLYAML<launch><node_containerpkg="rclcpp_components"exec="component_container"name="my_container"namespace=""><composable_nodepkg="composition"plugin="composition::Talker"name="talker"/></node_container><load_composable_nodetarget="my_container"><composable_nodepkg="composition"plugin="composition::Listener"name="listener"/></load_composable_node></launch>launch:-node_container:pkg:rclcpp_componentsexec:component_containername:my_containernamespace:''composable_node:-pkg:compositionplugin:composition::Talkername:talker-load_composable_node:target:my_containercomposable_node:-pkg:compositionplugin:composition::Listenername:listenerRelated PR:ros2/launch_ros#235Parameter substitutionThe newParameterSubstitutionlets you substitute the value of a parameter set previously in launch with theSetParameteraction.
For example,<launch><set_parametername="foo"value="bar"/><logmessage="Parameter foo has value $(param foo)"/></launch>Related PR:ros2/launch_ros#297New actionsRosTimeracts like the launchTimerAction, but uses a ROS clock (so it can use simulation time, for example).Related PRs:ros2/launch_ros#244andros2/launch_ros#264SetParametersFromFilepasses a ROS parameters file to all nodes in a launch file (including node components).Related PRs:ros2/launch_ros#260andros2/launch_ros#281SROS2 Security enclaves support Certificate Revocation ListsCertificate Revocation Lists (CRLs) are a concept where particular certificates can be revoked before their expiration.
As of Humble, it is now possible to put a CRL in an SROS2 security enclave and have it be honored.
Seethe SROS2 tutorialsfor an example of how to use it.Content Filtered TopicsContent Filtered Topics supports a more sophisticated subscription that indicates the subscriber does not want to necessarily see all values of each instance published under the Topic.
Content Filtered Topics can be used to request content-based subscriptions when underlying RMW implementation supports this feature.RMW Content Filtered Topics supportrmw_fastrtpssupportedrmw_connextddssupportedrmw_cycloneddsnot supportedTo learn more, see thecontent_filteringexamples.Related design PR:ros2/design#282.ros2cliros2launchhas a--launch-prefixargumentThis allows passing a prefix to all executables in a launch file, which is useful in many debugging situations.
See the associatedpull request, as well as thetutorialfor more information.Relatedly, the--launch-prefix-filtercommand-line option was added to selectively add the prefix from--launch-prefixto executables.
See thepull requestfor more information.ros2topicechohas a--flow-styleargumentThis allows the user to forceflowstylefor the YAML representation of data on a topic.
Without this option, the output fromros2topicecho/tf_staticcould look something like:transforms:-header:stamp:sec:1651172841nanosec:433705575frame_id:single_rrbot_link3child_frame_id:single_rrbot_camera_linktransform:translation:x:0.05y:0.0z:0.9rotation:x:0.0y:0.0z:0.0w:1.0With this option, the output would look something like:transforms:[{header:{stamp:{sec:1651172841,nanosec:433705575},frame_id:single_rrbot_link3},child_frame_id:single_rrbot_camera_link,transform:{translation:{x:0.05,y:0.0,z:0.9},rotation:{x:0.0,y:0.0,z:0.0,w:1.0}}}]See thePyYAML documentationfor more information.ros2topicechocan filter data based on message contentsThis allows the user to only print out data on a topic that matches a certain Python expression.
For instance, using the following argument will only print out string messages that start with ‘foo’:ros2topicecho--filter'm.data.startswith("foo")` /chatterSee thepull requestfor more information.rviz2Apply textures to arbitrary triangle listsWe’ve addedthe ability to apply textures defined via URI to arbitrary triangle lists using UV Coordinates.
Now we can create a gradient pull from a texture map instead of the default grayscale.
This will enable complex coloring of markers.
To use this, you should use thevisualization_msgs/Marker.msgand fill thetexture_resource,texture,uv_coordinatesandmesh_filefields.
You can find more informationhere.Visualization of mass properties (including inertia)We also added the ability to visualize inertias. To do this, you select enable ‘Inertia’ in the ‘Mass Properties’ under the robot model:You can see an image of an inertia below.Visualize YUV images in RVizIt is now possible to directly visualize YUV images inside of RViz, rather than having to convert to RGB first.
Seeros2/rviz#701for details.Allow rendering of objects > 100 metersBy default, RViz only renders objects that are within 100 meters of a camera.
A new configuration property called “Far Plane Distance” in the rviz camera plugin allows that rendering distance to be configured.Seeros2/rviz#849for more information.Changes since the Galactic releaseC++ headers are installed in a subdirectoryIn ROS 2 releases prior to Humble, C++ headers for all packages were installed into a single include directory.
For instance, in Galactic, the directory structure looks like this (reduced for brevity):/opt/ros/galactic/include/
├── rcl
│   ├── node.h
├── rclcpp
│   ├── node.hppThis structure can cause serious problems when trying to use overlays.
That is, it is very possible to get the wrong set of header files due to include directory order.
Seehttps://colcon.readthedocs.io/en/released/user/overriding-packages.htmlfor a detailed explanation of the problems.To help combat this, in Humble (and in all ROS 2 releases going forward), the directory structure has changed:/opt/ros/humble/include
├── rcl
│   └── rcl
│       ├── node.h
├── rclcpp
│   └── rclcpp
│       ├── node.hppNote that downstream packages that use these headers donothave to change; using#include<rclcpp/node.hpp>works as it always did before.
However, when using IDEs that are looking for include directories, it may be necessary to add the individual include directories to the search path.Seehttps://github.com/ros2/ros2/issues/1150for more information, including the reasoning behind this change.common_interfacesSupport Textures and Embedded Meshes for Marker MessagesThese two additions will improve the ability to both visualize data in new ways with standard messages and, simultaneously, enable the ability to track this data in rosbag.Texturesbring the addition of three new fields to markers:# Texture resource is a special URI that can either reference a texture file in# a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]# or an embedded texture via a string matching the format:#   "embedded://texture_name"stringtexture_resource# An image to be loaded into the rendering engine as the texture for this marker.# This will be used iff texture_resource is set to embedded.sensor_msgs/CompressedImagetexture# Location of each vertex within the texture; in the range: [0.0-1.0]UVCoordinate[]uv_coordinatesRViz will fully support texture rendering through the embedded format.To those familiar withmesh_resource,resource_retrievershould be familiar.
This will allow the programmer to choose where they want to load data from, either a local file or a networked file.
In the interest of being able to record all data in a rosbag, the ability to embed the texture image is included.Mesheswere modified in a similar way to add the ability to embed a raw Mesh file for the purpose of recording and are modified in a similar way. The Meshfile message has two fields:# The filename is used for both debug purposes and to provide a file extension# for whatever parser is used.stringfilename# This stores the raw text of the mesh file.uint8[]dataThe embeddedMeshfilemessage is not yet supported in implementation.Related PRs:ros2/common_interfaces#153ros2/rviz#719AddedPRISMtype to SolidPrimitiveTheSolidPrimitivemessage had a newPRISMtype added, along with the appropriate metadata.
Seeros2/common_interfaces#167for more information.rmwstructtype name suffix changed from_tto_sTo avoid type name duplication errors betweenstructtype names and theirtypedef-ed aliases when generating code documentation, the suffix for allstructtype names has been changed from_tto_s.
Aliases with_tsuffixes remain in place.
Thus, this change is a breaking change only for code that uses fullstructtype specifiers i.e.structtype_name_t.Seeros2/rmw#313for more details.rmw_connextddsUse Connext 6 by defaultBy default, Humble Hawksbill uses Connext 6.0.1 as the DDS implementation forrmw_connextdds.
It is still possible to use Connext 5.3.1 withrmw_connextdds, but it must be rebuilt from source.rclstructtype name suffix changed from_tto_sTo avoid type name duplication errors betweenstructtype names and theirtypedef-ed aliases when generating code documentation, the suffix for allstructtype names has been changed from_tto_s.
Aliases with_tsuffixes remain in place.
Thus, this change is a breaking change only for code that uses fullstructtype specifiers i.e.structtype_name_t.Seeros2/rcl#932for more details.ROS_DISABLE_LOANED_MESSAGES environment variable addedThis environment variable can be used to disable loaned messages support, independently if the rmw supports them or not.
For more details, see the guideConfigure Zero Copy Loaned Messages.rclcppSupport Type Adaption for Publishers and SubscriptionsAfter defining a type adapter, custom data structures can be used directly by publishers and subscribers, which helps to avoid additional work for the programmer and potential sources of errors.
This is especially useful when working with complex data types, such as when converting OpenCV’scv::Matto ROS’ssensor_msgs/msg/Imagetype.Here is an example of a type adapter that convertsstd_msgs::msg::Stringtostd::string:template<>structrclcpp::TypeAdapter<std::string,std_msgs::msg::String>{usingis_specialized=std::true_type;usingcustom_type=std::string;usingros_message_type=std_msgs::msg::String;staticvoidconvert_to_ros_message(constcustom_type&source,ros_message_type&destination){destination.data=source;}staticvoidconvert_to_custom(constros_message_type&source,custom_type&destination){destination=source.data;}};And an example of how the type adapter can be used:usingMyAdaptedType=TypeAdapter<std::string,std_msgs::msg::String>;// Publish a std::stringautopub=node->create_publisher<MyAdaptedType>(...);std::stringcustom_msg="My std::string"pub->publish(custom_msg);// Pass a std::string to a subscription's callbackautosub=node->create_subscription<MyAdaptedType>("topic",10,[](conststd::string&msg){...});To learn more, see thepublisherandsubscriptionexamples, as well as a more complexdemo.
For more details, seeREP 2007.Client::asnyc_send_request(request)returns astd::futureinstead of astd::shared_futureThis change was implemented inrclcpp#1734.
This breaks API, asstd::future::get()methods extracts the value from the future.
That means, if that method is called for a second time it will throw an exception.
That doesn’t happen with astd::shared_future, as itsget()method returns aconst&.
Example:autofuture=client->async_send_request(req);...do_something_with_response(future.get());...do_something_else_with_response(future.get());// this will throw an exception now!!should be updated to:autofuture=client->async_send_request(req);...autoresponse=future.get();do_something_with_response(response);...do_something_else_with_response(response);If a shared future is needed, thestd::future::share()method can be used.wait_for_all_ackedmethod added toPublisherThis new method will block until all messages in the publisher queue are acked by the matching subscriptions or the specified timeout expires.
It is only useful for reliable publishers, as in the case of best effort QoS there’s no acking.
Examples:autopub=node->create_publisher<std_msgs::msg::String>(...);...pub->publish(my_msg);...pub->wait_for_all_acked();// or pub->wait_for_all_acked(timeout)For a more complete example, seehere.get_callback_groupsmethod removed fromNodeBaseandNodeclassesfor_each_callback_group()method has replacedget_callback_groups()by providing a thread-safe way to accesscallback_groups_vector.for_each_callback_group()accepts a function as an argument, iterates over the stored callback groups, and calls the passed function to ones that are valid.For more details, please refer to thispull request.add_to_wait_setmethod fromWaitableclass changes its return type frombooltovoidBefore, classes derived fromWaitableoverridingadd_to_wait_setwere returning false when failing to add elements to the wait set, so the caller had to check this return value and throw or handle the error.
This error handling should now be done directly onadd_to_wait_setmethod, throwing if necessary.
It is not required to return anything if no errors happened.
Thus, this is a breaking change for downstream uses ofWaitable.Seeros2/rclcpp#1612for more details.get_notify_guard_conditionmethod return type fromNodeBaseInterfaceclass changedNowrclcppuses theGuardConditionclass wrapper aroundrcl_guard_condition_t, soget_notify_guard_conditionreturns a reference to the node’srclcpp::GuardCondition.
Thus, this is a breaking change for downstream uses ofNodeBaseInterfaceandNodeBase.Seeros2/rclcpp#1612for more details.sleep_untilandsleep_formethods added toClockTwo new methods were added to allow sleeping on a particular clock inros2/rclcpp#1814andros2/rclcpp#1828.Clock::sleep_untilwill suspend the current thread until the clock reaches a particular time.Clock::sleep_forwill suspend the current thread until the clock advances a certain amount of time from when the method was called.
Both methods will wake early if theContextis shutdown.rclcpp_lifecycleActive and deactivate transitions of publishers will be triggered automaticallyBefore, users needed to overrideLifecylceNode::on_activate()andLifecylceNode::on_deactivate()and call the similarly named methods onLifecyclePublisherto make the transition actually happen.
Now,LifecylceNodeprovides a default interface of these methods that already do this.
See the implementation of thelifecycle_talkernodehere.rclpyManaged nodesLifecycle nodes support was added to rclpy.
A complete demo can be foundhere.wait_for_all_ackedmethod added toPublisherSimilar to the feature added to rclcpp.sleep_untilandsleep_formethods added toClockTwo new methods were added to allow sleeping on a particular clock inros2/rclpy#858andros2/rclpy#864.sleep_untilwill suspend the current thread until the clock reaches a particular time.sleep_forwill suspend the current thread until the clock advances a certain amount of time from when the method was called.
Both methods will wake early if theContextis shutdown.ros1_bridgeSince there is no official ROS 1 distribution on Ubuntu Jammy and forward,ros1_bridgeis now compatible with the Ubuntu-packaged versions of ROS 1.
More details about usingros1_bridgewith Jammy packages are available inthe how-to guides.ros2cliros2commands disable output buffering by defaultPrior to this release, running a command likeros2echo/chatter|grep"Hello"would not print any data until the output buffer was full.
Users could work around this by settingPYTHONUNBUFFERED=1, but that was not very user friendly.Instead, allros2commands now do line-buffering by default, so commands like the above work as soon as a newline is printed.
To disable this behavior and use default python buffering rules, use the option--use-python-default-buffering.
See theoriginal issueand thepull requestfor more information.ros2topicpubwill wait for one matching subscription when using--times/--once/-1When using--times/--once/-1flags,ros2topicpubwill wait for one matching subscription to be found before starting to publish.
This avoids the issue of the ros2cli node starting to publish before discovering a matching subscription, which results in some of the first messages being lost.
This is particularly unexpected when using a reliable qos profile.The number of matching subscriptions to wait before starting publishing can be configured with the-w/--wait-matching-subscriptionsflags, e.g.:ros2 topic pub -1 -w 3 /chatter std_msgs/msg/String "{data: 'foo'}"to wait for three matching subscriptions before starting to publish.-wcan also be used independently of--times/--once/-1but it only defaults to one when combined with them, otherwise the-wdefault is zero.Seehttps://github.com/ros2/ros2cli/pull/642for more details.ros2paramdumpdefault output changed--printoption for dump command wasdeprecated.It prints to stdout by default:ros2paramdump/my_node_name--output-diroption for dump command wasdeprecated.To dump parameters to a file, run:ros2paramdump/my_node_name>my_node_name.yamlros2paramsetnow accepts more YAML syntaxPreviously, attempting to set a string like “off” to a parameter that was of string type did not work.
That’s becauseros2paramsetinterprets the command-line arguments as YAML, and YAML considers “off” to be a boolean type.
As ofhttps://github.com/ros2/ros2cli/pull/684,ros2paramsetnow accepts the YAML escape sequence of “!!str off” to ensure that the value is considered a string.ros2pkgcreatecan automatically generate a LICENSE fileIf the--licenseflag is passed toros2pkgcreate, and the license is one of the known licenses,ros2pkgcreatewill now automatically generate a LICENSE file in the root of the package.
For a list of known licenses, runros2pkgcreate--license?<package_name>.
See the associatedpull requestfor more information.robot_state_publisherAddedframe_prefixparameterA new parameterframe_prefixwas added inros/robot_state_publisher#159.
This parameter is a string which is prepended to all frame names published byrobot_state_publisher.
Similar totf_prefixin the originaltflibrary in ROS 1, this parameter can be used to publish the same robot description multiple times with different frame names.Removal of deprecateduse_tf_staticparameterThe deprecateduse_tf_staticparameter has been removed fromrobot_state_publisher.
This means that static transforms are unconditionally published to the/tf_statictopic, and that the static transforms are published in atransient_localQuality of Service.
This was the default behavior, and the behavior which thetf2_ros::TransformListenerclass expected before, so most code will not have to be changed.
Any code that was relying onrobot_state_publisherto periodically publish static transforms to/tfwill have to be updated to subscribe to/tf_staticas atransient_localsubscription instead.rosidl_cmakeDeprecation ofrosidl_target_interfaces()The CMake functionrosidl_target_interfaces()has been deprecated, and now issues a CMake warning when called.
Users wanting to use messages/services/actions in the same ROS package that generated them should instead callrosidl_get_typesupport_target()and thentarget_link_libraries()to make their targets depend on the returned typesupport target.
Seehttps://github.com/ros2/rosidl/pull/606for more details, andhttps://github.com/ros2/demos/pull/529for an example of using the new function.rviz2improved the efficiency of 3-bytes pixel formatschanged the way inertias are computed to use ignition math rather than Ogre’s math libraries.geometry2Deprecation of TF2Error::NO_ERROR, etcThetf2library uses an enumeration calledTF2Errorto return errors.
Unfortunately, one of the enumerators in there is calledNO_ERROR, which conflicts with a macro on Windows.
To remedy this, a new set of enumerators inTF2Errorwere created, each with aTF2prefix.
The previous enumerators are still available, but are now deprecated and will print a deprecation warning if used.
All code that uses theTF2Errorenumerator should be updated to use the newTF2prefixed errors.
Seehttps://github.com/ros2/geometry2/pull/349for more details.More intuitive command-line arguments for static_transform_publisherThestatic_transform_publisherprogram used to take arguments like:ros2runtf2_rosstatic_transform_publisher0000001foobar.
The first three numbers are the translation x, y, and z, the next 4 are the quaternion x, y, z, and w, and the last two arguments are the parent and child frame IDs.
While this worked, it had a couple of problems:The user had to specifyallof the arguments, even if only setting one numberReading the command-line to figure out what it was publishing was trickyTo fix both of these issues, the command-line handling has been changed to use flags instead, and all flags except for--frame-idand--child-frame-idare optional.
Thus, the above command-line can be simplified to:ros2runtf2_rosstatic_transform_publisher--frame-idfoo--child-frame-idbarTo change just the translation x, the command-line would be:ros2runtf2_rosstatic_transform_publisher--x1.5--frame-idfoo--child-frame-idbar.The old-style arguments are still allowed in this release, but are deprecated and will print a warning.
They will be removed in future releases.
Seehttps://github.com/ros2/geometry2/pull/392for more details.Transform listener spin thread no longer executes node callbackstf2_ros::TransformListenerno longer spins on the provided node object.
Instead, it creates a callback group to execute callbacks on the entities it creates internally.
This means if you have set the parameterspin_thread=truewhen creating a transform listener, you
can no longer depend on your own callbacks to be executed.
You must call aspinfunction on your node (e.g.rclcpp::spin), or add your node to your own executor.Related pull request:geometry2#442rosbag2New playback and recording controlsSeveral pull requests have been added to enhance the user’s control over playback of bags.
Pull request931adds the ability to specify a time stamp to begin playing from.
Due to pull request789it is now possible to delay the start of playback by a specified interval.Relatedly,rosbag2has gained new ways for users to control playback as it is happening.
Pull request847adds keyboard controls for pausing, resuming, and playing the next message during playback from a terminal.
It is also possible to start playback paused thanks to pull requests905and904, which makes it easy for the user to initiate playback and then step through messages, such as when debugging a pipeline.
Pull request836adds an interface for seeking within bags, allowing the user to move around within a bag during playback.Finally, a new snapshot mode has been added to recording in pull request851.
This mode, useful for incident recording, allows recording to begin filling up buffers, but not begin writing data to disc until a service is called.Burst-mode playbackWhile the playback of data from a bag in real-time is the most well-known use case for bag files, there are situations where you want the data in the bag as fast as possible.
With pull request977,rosbag2has gained the ability to “burst” data from the bag.
In burst mode, the data is played back as fast as possible.
This is useful in applications such as machine learning.Zero-Copy playbackBy default, if loaned message can be used, playback messages are published as loaned message.
This can help to reduce the number of data copies, so there is a greater benefit for sending big data.
Pull request981adds--disable-loan-messageoption for playback.Wait for an acknowledgmentThis new option will wait until all published messages are acknowledged by all subscribers or until the timeout elapses in millisecond before play is terminated.
Especially for the case of sending message with big size in a short time.
This option is valid only if the publisher’s QOS profile is RELIABLE.
Pull request951adds--wait-for-all-ackedoption for playback.Bag editingrosbag2is taking steps towards enabling the editing of bags, such as removing all messages for one topic or merging multiple bags into a single bag.
Pull request921adds bag rewriting and theros2bagconvertverb.Other changesPull request925makesrosbag2ignore “leaf topics” (topics without a publisher) when recording.
These topics will no longer be automatically added to the bag.Known IssuesWheninstalling ROS 2 on an Ubuntu 22.04 Jammy hostit is important to update your system before installing ROS 2 packages.
It isparticularlyimportant to make sure thatsystemdandudevare updated to the latest available version otherwise installingros-humble-desktop, which depends onlibudev1, could cause the removal of system critical packages.
Details can be found inros2/ros2#1272andLaunchpad #1974196When ROS 2 apt repositories are available, ROS 1 packages in Ubuntu are not installable.  See theros1_bridge on Ubuntu Jammydocument for more information.Some major Linux distributions have started patching Python to install packages to/usr/local, which is breaking some parts ofament_packageand builds withcolcon.
In particular, using Ubuntu Jammy withsetuptoolsinstalled from pip will manifest this misbehavior, and is therefore not recommended.
There is currently aproposed solutionwhich requires further testing before widespread release.ROS 2 bags that are split by size or duration are not played correctly.
Only the last bag recorded is played.
It is recommended to avoid splitting bags by size or duration.
Details can be found inros2/rosbag2#966.Release TimelineMon. March 21, 2022 - Alpha + RMW freezePreliminary testing and stabilization of ROS Base[1]packages, and API and feature freeze for RMW provider packages.Mon. April 4, 2022 - FreezeAPI and feature freeze for ROS Base[1]packages in Rolling Ridley.
Only bug fix releases should be made after this point.
New packages can be released independently.Mon. April 18, 2022 - BranchBranch from Rolling Ridley.rosdistrois reopened for Rolling PRs for ROS Base[1]packages.
Humble development shifts fromros-rolling-*packages toros-humble-*packages.Mon. April 25, 2022 - BetaUpdated releases of ROS Desktop[2]packages available.
Call for general testing.Mon. May 16, 2022 - Release CandidateRelease Candidate packages are built.
Updated releases of ROS Desktop[2]packages available.Thu. May 19, 2022 - Distro FreezeFreeze rosdistro.
No PRs for Humble on therosdistrorepo will be merged (reopens after the release announcement).Mon. May 23, 2022 - General AvailabilityRelease announcement.rosdistrois reopened for Humble PRs.[1](1,2,3)Theros_basevariant is described inREP 2001 (ros-base).[2](1,2)Thedesktopvariant is described inREP 2001 (desktop-variants).

Code Examples:

Language: unknown
project(my_project)add_library(my_lib...)ament_generate_version_header(my_lib)

Language: unknown
#include<my_project/version.h>

Language: unknown
set(VERSION_HEADER${CMAKE_INSTALL_PREFIX}/include/my_project/my_project/version.h)

Language: unknown
<launch><set_envname="FOO"value="1"/><group><set_envname="FOO"value="2"/></group><executablecmd="echo $FOO"output="screen"shell="true"/></launch>

Language: unknown
importlaunchimportlaunch.actionsdefgenerate_launch_description():returnlaunch.LaunchDescription([launch.actions.SetEnvironmentVariable(name='FOO',value='1'),launch.actions.GroupAction([launch.actions.SetEnvironmentVariable(name='FOO',value='2'),]),launch.actions.ExecuteProcess(cmd=['echo','$FOO'],output='screen',shell=True),])

Language: unknown
<launch><logmessage="$(eval 'ceil(pi)')"/></launch>

Language: unknown
<launch><letname="p"value="true"/><letname="q"value="false"/><groupif="$(or $(var p) $(var q))"><logmessage="The first condition is true"/></group><groupunless="$(and $(var p) $(var q))"><logmessage="The second condition is false"/></group><groupif="$(not $(var q))"><logmessage="The third condition is true"/></group></launch>

Language: unknown
<launch><nodepkg="demo_nodes_cpp"exec="talker"ros_args="--log-level debug"/></launch>

Language: unknown
launch:-node:pkg:demo_nodes_cppexec:talkerros_args:'--log-leveldebug'

Language: unknown
fromlaunchimportLaunchDescriptionimportlaunch_ros.actionsdefgenerate_launch_description():returnLaunchDescription([launch_ros.actions.Node(package='demo_nodes_cpp',executable='talker',ros_arguments=['--log-level','debug'],),])

Language: unknown
<launch><node_containerpkg="rclcpp_components"exec="component_container"name="my_container"namespace=""><composable_nodepkg="composition"plugin="composition::Talker"name="talker"/></node_container><load_composable_nodetarget="my_container"><composable_nodepkg="composition"plugin="composition::Listener"name="listener"/></load_composable_node></launch>

Language: unknown
launch:-node_container:pkg:rclcpp_componentsexec:component_containername:my_containernamespace:''composable_node:-pkg:compositionplugin:composition::Talkername:talker-load_composable_node:target:my_containercomposable_node:-pkg:compositionplugin:composition::Listenername:listener

Language: unknown
<launch><set_parametername="foo"value="bar"/><logmessage="Parameter foo has value $(param foo)"/></launch>

Language: unknown
transforms:-header:stamp:sec:1651172841nanosec:433705575frame_id:single_rrbot_link3child_frame_id:single_rrbot_camera_linktransform:translation:x:0.05y:0.0z:0.9rotation:x:0.0y:0.0z:0.0w:1.0

Language: unknown
transforms:[{header:{stamp:{sec:1651172841,nanosec:433705575},frame_id:single_rrbot_link3},child_frame_id:single_rrbot_camera_link,transform:{translation:{x:0.05,y:0.0,z:0.9},rotation:{x:0.0,y:0.0,z:0.0,w:1.0}}}]

Language: unknown
ros2topicecho--filter'm.data.startswith("foo")` /chatter

Language: unknown
/opt/ros/galactic/include/
├── rcl
│   ├── node.h
├── rclcpp
│   ├── node.hpp

Language: unknown
/opt/ros/humble/include
├── rcl
│   └── rcl
│       ├── node.h
├── rclcpp
│   └── rclcpp
│       ├── node.hpp

Language: unknown
# Texture resource is a special URI that can either reference a texture file in# a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]# or an embedded texture via a string matching the format:#   "embedded://texture_name"stringtexture_resource# An image to be loaded into the rendering engine as the texture for this marker.# This will be used iff texture_resource is set to embedded.sensor_msgs/CompressedImagetexture# Location of each vertex within the texture; in the range: [0.0-1.0]UVCoordinate[]uv_coordinates

Language: unknown
# The filename is used for both debug purposes and to provide a file extension# for whatever parser is used.stringfilename# This stores the raw text of the mesh file.uint8[]data

Language: unknown
template<>structrclcpp::TypeAdapter<std::string,std_msgs::msg::String>{usingis_specialized=std::true_type;usingcustom_type=std::string;usingros_message_type=std_msgs::msg::String;staticvoidconvert_to_ros_message(constcustom_type&source,ros_message_type&destination){destination.data=source;}staticvoidconvert_to_custom(constros_message_type&source,custom_type&destination){destination=source.data;}};

Language: unknown
usingMyAdaptedType=TypeAdapter<std::string,std_msgs::msg::String>;// Publish a std::stringautopub=node->create_publisher<MyAdaptedType>(...);std::stringcustom_msg="My std::string"pub->publish(custom_msg);// Pass a std::string to a subscription's callbackautosub=node->create_subscription<MyAdaptedType>("topic",10,[](conststd::string&msg){...});

Language: unknown
autofuture=client->async_send_request(req);...do_something_with_response(future.get());...do_something_else_with_response(future.get());// this will throw an exception now!!

Language: unknown
autofuture=client->async_send_request(req);...autoresponse=future.get();do_something_with_response(response);...do_something_else_with_response(response);

Language: unknown
autopub=node->create_publisher<std_msgs::msg::String>(...);...pub->publish(my_msg);...pub->wait_for_all_acked();// or pub->wait_for_all_acked(timeout)

Language: unknown
ros2echo/chatter|grep"Hello"

Language: unknown
ros2 topic pub -1 -w 3 /chatter std_msgs/msg/String "{data: 'foo'}"

Language: unknown
ros2paramdump/my_node_name

Language: unknown
ros2paramdump/my_node_name>my_node_name.yaml
