Title: Using URDF withrobot_state_publisher
URL: https://docs.ros.org/en/jazzy/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher.html
Section: Installation
--------------------------------------------------------------------------------

Using URDF withrobot_state_publisherGoal:Simulate a walking robot modeled in URDF and view it in Rviz.Tutorial level:IntermediateTime:15 minutesContentsBackgroundPrerequisitesTasks1 Create a package2 Create the URDF File3 Publish the state4 Create a launch file5 Edit the setup.py file6 Install the package7 View the resultsSummaryBackgroundThis tutorial will show you how to model a walking robot, publish the state as atf2message and view the simulation in Rviz.
First, we create the URDF model describing the robot assembly.
Next we write a node which simulates the motion and publishes the JointState and transforms.
We then userobot_state_publisherto publish the entire robot state to/tf2.Prerequisitesrviz2As always, don’t forget to source ROS 2 inevery new terminal you open.Tasks1 Create a packageCreate the directory:LinuxmacOSWindowsmkdir -p second_ros2_ws/srcmkdir -p second_ros2_ws/srcmd second_ros2_ws/srcThen create the package:cd second_ros2_ws/srcros2 pkg create --build-type ament_python --license Apache-2.0 urdf_tutorial_r2d2 --dependencies rclpycd urdf_tutorial_r2d2You should now see aurdf_tutorial_r2d2folder.
Next you will make several changes to it.2 Create the URDF FileCreate the directory where we will store some assets:LinuxmacOSWindowsmkdir -p urdfmkdir -p urdfmd urdfDownload theURDFfileand save it assecond_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.urdf.xml.
Download theRvizconfigurationfileand save it assecond_ros2_ws/src/urdf_tutorial_r2d2/urdf/r2d2.rviz.3 Publish the stateNow we need a method for specifying what state the robot is in.
To do this, we must specify all three joints and the overall odometry.Fire up your favorite editor and paste the following code intosecond_ros2_ws/src/urdf_tutorial_r2d2/urdf_tutorial_r2d2/state_publisher.pyfrommathimportsin,cos,piimportrclpyfromrclpy.nodeimportNodefromrclpy.qosimportQoSProfilefromgeometry_msgs.msgimportQuaternionfromsensor_msgs.msgimportJointStatefromtf2_rosimportTransformBroadcaster,TransformStampedclassStatePublisher(Node):def__init__(self):rclpy.init()super().__init__('state_publisher')qos_profile=QoSProfile(depth=10)self.joint_pub=self.create_publisher(JointState,'joint_states',qos_profile)self.broadcaster=TransformBroadcaster(self,qos=qos_profile)self.nodeName=self.get_name()self.get_logger().info("{0}started".format(self.nodeName))degree=pi/180.0loop_rate=self.create_rate(30)# robot statetilt=0.tinc=degreeswivel=0.angle=0.height=0.hinc=0.005# message declarationsodom_trans=TransformStamped()odom_trans.header.frame_id='odom'odom_trans.child_frame_id='axis'joint_state=JointState()try:whilerclpy.ok():rclpy.spin_once(self)# update joint_statenow=self.get_clock().now()joint_state.header.stamp=now.to_msg()joint_state.name=['swivel','tilt','periscope']joint_state.position=[swivel,tilt,height]# update transform# (moving in a circle with radius=2)odom_trans.header.stamp=now.to_msg()odom_trans.transform.translation.x=cos(angle)*2odom_trans.transform.translation.y=sin(angle)*2odom_trans.transform.translation.z=0.7odom_trans.transform.rotation=\euler_to_quaternion(0,0,angle+pi/2)# roll,pitch,yaw# send the joint state and transformself.joint_pub.publish(joint_state)self.broadcaster.sendTransform(odom_trans)# Create new robot statetilt+=tinciftilt<-0.5ortilt>0.0:tinc*=-1height+=hincifheight>0.2orheight<0.0:hinc*=-1swivel+=degreeangle+=degree/4# This will adjust as needed per iterationloop_rate.sleep()exceptKeyboardInterrupt:passdefeuler_to_quaternion(roll,pitch,yaw):qx=sin(roll/2)*cos(pitch/2)*cos(yaw/2)-cos(roll/2)*sin(pitch/2)*sin(yaw/2)qy=cos(roll/2)*sin(pitch/2)*cos(yaw/2)+sin(roll/2)*cos(pitch/2)*sin(yaw/2)qz=cos(roll/2)*cos(pitch/2)*sin(yaw/2)-sin(roll/2)*sin(pitch/2)*cos(yaw/2)qw=cos(roll/2)*cos(pitch/2)*cos(yaw/2)+sin(roll/2)*sin(pitch/2)*sin(yaw/2)returnQuaternion(x=qx,y=qy,z=qz,w=qw)defmain():node=StatePublisher()if__name__=='__main__':main()4 Create a launch fileCreate a newsecond_ros2_ws/src/urdf_tutorial_r2d2/launchfolder.
Open your editor and paste the following code, saving it assecond_ros2_ws/src/urdf_tutorial_r2d2/launch/demo_launch.pyimportosfromament_index_python.packagesimportget_package_share_directoryfromlaunchimportLaunchDescriptionfromlaunch.actionsimportDeclareLaunchArgumentfromlaunch.substitutionsimportLaunchConfigurationfromlaunch_ros.actionsimportNodedefgenerate_launch_description():use_sim_time=LaunchConfiguration('use_sim_time',default='false')urdf_file_name='r2d2.urdf.xml'urdf=os.path.join(get_package_share_directory('urdf_tutorial_r2d2'),urdf_file_name)withopen(urdf,'r')asinfp:robot_desc=infp.read()returnLaunchDescription([DeclareLaunchArgument('use_sim_time',default_value='false',description='Use simulation (Gazebo) clock if true'),Node(package='robot_state_publisher',executable='robot_state_publisher',name='robot_state_publisher',output='screen',parameters=[{'use_sim_time':use_sim_time,'robot_description':robot_desc}],arguments=[urdf]),Node(package='urdf_tutorial_r2d2',executable='state_publisher',name='state_publisher',output='screen'),])5 Edit the setup.py fileYou must tell thecolconbuild tool how to install your Python package.
Edit thesecond_ros2_ws/src/urdf_tutorial_r2d2/setup.pyfile as follows:include these import statementsimportosfromglobimportglobfromsetuptoolsimportsetupfromsetuptoolsimportfind_packagesappend these 2 lines insidedata_filesdata_files=[...(os.path.join('share',package_name,'launch'),glob(os.path.join('launch','*launch.[pxy][yma]*'))),(os.path.join('share',package_name),glob('urdf/*')),],modify theentry_pointstable so you can later run ‘state_publisher’ from a console'console_scripts':['state_publisher = urdf_tutorial_r2d2.state_publisher:main'],Save thesetup.pyfile with your changes.6 Install the packagecd second_ros2_wscolcon build --symlink-install --packages-select urdf_tutorial_r2d2Source the setup files:LinuxmacOSWindowssource install/setup.bashsource install/setup.bashcall install/setup.bat7 View the resultsLaunch the packageros2 launch urdf_tutorial_r2d2 demo_launch.pyOpen a new terminal, the run Rviz usingrviz2 -d second_ros2_ws/install/urdf_tutorial_r2d2/share/urdf_tutorial_r2d2/r2d2.rvizSee theUser Guidefor details on how to use Rviz.SummaryYou created aJointStatepublisher node and coupled it withrobot_state_publisherto simulate a walking robot.
The code used in these examples is originally fromhere.Credit is given to the authors of thisROS 1 tutorialfrom which some content was reused.

Code Examples:

Language: unknown
mkdir -p second_ros2_ws/src

Language: unknown
mkdir -p second_ros2_ws/src

Language: unknown
md second_ros2_ws/src

Language: unknown
cd second_ros2_ws/srcros2 pkg create --build-type ament_python --license Apache-2.0 urdf_tutorial_r2d2 --dependencies rclpycd urdf_tutorial_r2d2

Language: unknown
mkdir -p urdf

Language: unknown
mkdir -p urdf

Language: unknown
md urdf

Language: unknown
frommathimportsin,cos,piimportrclpyfromrclpy.nodeimportNodefromrclpy.qosimportQoSProfilefromgeometry_msgs.msgimportQuaternionfromsensor_msgs.msgimportJointStatefromtf2_rosimportTransformBroadcaster,TransformStampedclassStatePublisher(Node):def__init__(self):rclpy.init()super().__init__('state_publisher')qos_profile=QoSProfile(depth=10)self.joint_pub=self.create_publisher(JointState,'joint_states',qos_profile)self.broadcaster=TransformBroadcaster(self,qos=qos_profile)self.nodeName=self.get_name()self.get_logger().info("{0}started".format(self.nodeName))degree=pi/180.0loop_rate=self.create_rate(30)# robot statetilt=0.tinc=degreeswivel=0.angle=0.height=0.hinc=0.005# message declarationsodom_trans=TransformStamped()odom_trans.header.frame_id='odom'odom_trans.child_frame_id='axis'joint_state=JointState()try:whilerclpy.ok():rclpy.spin_once(self)# update joint_statenow=self.get_clock().now()joint_state.header.stamp=now.to_msg()joint_state.name=['swivel','tilt','periscope']joint_state.position=[swivel,tilt,height]# update transform# (moving in a circle with radius=2)odom_trans.header.stamp=now.to_msg()odom_trans.transform.translation.x=cos(angle)*2odom_trans.transform.translation.y=sin(angle)*2odom_trans.transform.translation.z=0.7odom_trans.transform.rotation=\euler_to_quaternion(0,0,angle+pi/2)# roll,pitch,yaw# send the joint state and transformself.joint_pub.publish(joint_state)self.broadcaster.sendTransform(odom_trans)# Create new robot statetilt+=tinciftilt<-0.5ortilt>0.0:tinc*=-1height+=hincifheight>0.2orheight<0.0:hinc*=-1swivel+=degreeangle+=degree/4# This will adjust as needed per iterationloop_rate.sleep()exceptKeyboardInterrupt:passdefeuler_to_quaternion(roll,pitch,yaw):qx=sin(roll/2)*cos(pitch/2)*cos(yaw/2)-cos(roll/2)*sin(pitch/2)*sin(yaw/2)qy=cos(roll/2)*sin(pitch/2)*cos(yaw/2)+sin(roll/2)*cos(pitch/2)*sin(yaw/2)qz=cos(roll/2)*cos(pitch/2)*sin(yaw/2)-sin(roll/2)*sin(pitch/2)*cos(yaw/2)qw=cos(roll/2)*cos(pitch/2)*cos(yaw/2)+sin(roll/2)*sin(pitch/2)*sin(yaw/2)returnQuaternion(x=qx,y=qy,z=qz,w=qw)defmain():node=StatePublisher()if__name__=='__main__':main()

Language: unknown
importosfromament_index_python.packagesimportget_package_share_directoryfromlaunchimportLaunchDescriptionfromlaunch.actionsimportDeclareLaunchArgumentfromlaunch.substitutionsimportLaunchConfigurationfromlaunch_ros.actionsimportNodedefgenerate_launch_description():use_sim_time=LaunchConfiguration('use_sim_time',default='false')urdf_file_name='r2d2.urdf.xml'urdf=os.path.join(get_package_share_directory('urdf_tutorial_r2d2'),urdf_file_name)withopen(urdf,'r')asinfp:robot_desc=infp.read()returnLaunchDescription([DeclareLaunchArgument('use_sim_time',default_value='false',description='Use simulation (Gazebo) clock if true'),Node(package='robot_state_publisher',executable='robot_state_publisher',name='robot_state_publisher',output='screen',parameters=[{'use_sim_time':use_sim_time,'robot_description':robot_desc}],arguments=[urdf]),Node(package='urdf_tutorial_r2d2',executable='state_publisher',name='state_publisher',output='screen'),])

Language: unknown
importosfromglobimportglobfromsetuptoolsimportsetupfromsetuptoolsimportfind_packages

Language: unknown
data_files=[...(os.path.join('share',package_name,'launch'),glob(os.path.join('launch','*launch.[pxy][yma]*'))),(os.path.join('share',package_name),glob('urdf/*')),],

Language: unknown
'console_scripts':['state_publisher = urdf_tutorial_r2d2.state_publisher:main'],

Language: unknown
cd second_ros2_wscolcon build --symlink-install --packages-select urdf_tutorial_r2d2

Language: unknown
source install/setup.bash

Language: unknown
source install/setup.bash

Language: unknown
call install/setup.bat

Language: unknown
ros2 launch urdf_tutorial_r2d2 demo_launch.py

Language: unknown
rviz2 -d second_ros2_ws/install/urdf_tutorial_r2d2/share/urdf_tutorial_r2d2/r2d2.rviz
