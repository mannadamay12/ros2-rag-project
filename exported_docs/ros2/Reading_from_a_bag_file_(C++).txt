Title: Reading from a bag file (C++)
URL: https://docs.ros.org/en/jazzy/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.html
Section: Installation
--------------------------------------------------------------------------------

Reading from a bag file (C++)Goal:Read data from a bag without using the CLI.Tutorial level:AdvancedTime:10 minutesContentsBackgroundPrerequisitesTasks1 Create a Package2 Write the C++ Reader3 Build and runSummaryBackgroundrosbag2doesn’t just provide theros2bagcommand line tool.
It also provides a C++ API for reading from and writing to a bag from your own source code.
This allows you to read the contents from a bag without having to play the bag, which can sometimes be useful.PrerequisitesYou should have therosbag2packages installed as part of your regular ROS 2 setup.If you need to install ROS 2, see theInstallation instructions.You should have already completed thebasic ROS 2 bag tutorial, and we will be using thesubsetbag you created there.Tasks1 Create a PackageOpen a new terminal andsource your ROS 2 installationso thatros2commands will work.In a new or existingworkspace, navigate to thesrcdirectory and create
a new package:ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_reading_cpp --dependencies rclcpp rosbag2_transport turtlesimYour terminal will return a message verifying the creation of your packagebag_reading_cppand all its necessary files and folders.
The--dependenciesargument will automatically add the necessary dependency lines topackage.xmlandCMakeLists.txt.
In this case, the package will use therosbag2_transportpackage as well as therclcpppackage.
A dependency on theturtlesimpackage is also required for working with the custom turtlesim messages.1.1 Updatepackage.xmlBecause you used the--dependenciesoption during package creation, you don’t have to manually add dependencies topackage.xmlorCMakeLists.txt.
As always, though, make sure to add the description, maintainer email and name, and license information topackage.xml.<description>C++bagreadingtutorial</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>2 Write the C++ ReaderInside your package’ssrcdirectory, create a new file calledsimple_bag_reader.cppand paste the following code into it.#include<chrono>#include<functional>#include<iostream>#include<memory>#include<string>#include"rclcpp/rclcpp.hpp"#include"rclcpp/serialization.hpp"#include"rosbag2_transport/reader_writer_factory.hpp"#include"turtlesim/msg/pose.hpp"usingnamespacestd::chrono_literals;classPlaybackNode:publicrclcpp::Node{public:PlaybackNode(conststd::string&bag_filename):Node("playback_node"){publisher_=this->create_publisher<turtlesim::msg::Pose>("/turtle1/pose",10);timer_=this->create_wall_timer(100ms,[this](){returnthis->timer_callback();});rosbag2_storage::StorageOptionsstorage_options;storage_options.uri=bag_filename;reader_=rosbag2_transport::ReaderWriterFactory::make_reader(storage_options);reader_->open(storage_options);}private:voidtimer_callback(){while(reader_->has_next()){rosbag2_storage::SerializedBagMessageSharedPtrmsg=reader_->read_next();if(msg->topic_name!="/turtle1/pose"){continue;}rclcpp::SerializedMessageserialized_msg(*msg->serialized_data);turtlesim::msg::Pose::SharedPtrros_msg=std::make_shared<turtlesim::msg::Pose>();serialization_.deserialize_message(&serialized_msg,ros_msg.get());publisher_->publish(*ros_msg);std::cout<<'('<<ros_msg->x<<", "<<ros_msg->y<<")\n";break;}}rclcpp::TimerBase::SharedPtrtimer_;rclcpp::Publisher<turtlesim::msg::Pose>::SharedPtrpublisher_;rclcpp::Serialization<turtlesim::msg::Pose>serialization_;std::unique_ptr<rosbag2_cpp::Reader>reader_;};intmain(intargc,char**argv){if(argc!=2){std::cerr<<"Usage: "<<argv[0]<<" <bag>"<<std::endl;return1;}rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<PlaybackNode>(argv[1]));rclcpp::shutdown();return0;}2.1 Examine the codeThe#includestatements at the top are the package dependencies.
Note the inclusion of headers from therosbag2_transportpackage for the functions and structures necessary to work with bag files.The next line creates the node which will read from the bag file and play back the data.classPlaybackNode:publicrclcpp::NodeNow, we can create a timer callback which will run at 10 hz.
Our goal is to replay one message to the/turtle1/posetopic each time the callback is run.
Note the constructor takes a path to the bag file as a parameter.public:PlaybackNode(conststd::string&bag_filename):Node("playback_node"){publisher_=this->create_publisher<turtlesim::msg::Pose>("/turtle1/pose",10);timer_=this->create_wall_timer(100ms,[this](){returnthis->timer_callback();});We also open the bag in the constructor.
Therosbag2_transport::ReaderWriterFactoryis a class that can construct a compressed or uncompressed reader or writer based on the storage options.rosbag2_storage::StorageOptionsstorage_options;storage_options.uri=bag_filename;reader_=rosbag2_transport::ReaderWriterFactory::make_reader(storage_options);reader_->open(storage_options);Now, inside our timer callback, we loop through messages in the bag until we read a message recorded from our desired topic.
Note that the serialized message has timestamp metadata in addition to the topic name.voidtimer_callback(){while(reader_->has_next()){rosbag2_storage::SerializedBagMessageSharedPtrmsg=reader_->read_next();if(msg->topic_name!="/turtle1/pose"){continue;}We then construct anrclcpp::SerializedMessageobject from the serialized data we just read.
Additionally, we need to create a ROS 2 deserialized message which will hold the result of our deserialization.
Then, we can pass both these objects to therclcpp::Serialization::deserialize_messagemethod.rclcpp::SerializedMessageserialized_msg(*msg->serialized_data);turtlesim::msg::Pose::SharedPtrros_msg=std::make_shared<turtlesim::msg::Pose>();serialization_.deserialize_message(&serialized_msg,ros_msg.get());Finally, we publish the deserialized message and print out the xy coordinate to the terminal.
We also break out of the loop so that we publish the next message during the next timer calback.publisher_->publish(*ros_msg);std::cout<<'('<<ros_msg->x<<", "<<ros_msg->y<<")\n";break;}We must also declare the private variables used throughout the node.rclcpp::TimerBase::SharedPtrtimer_;rclcpp::Publisher<turtlesim::msg::Pose>::SharedPtrpublisher_;rclcpp::Serialization<turtlesim::msg::Pose>serialization_;std::unique_ptr<rosbag2_cpp::Reader>reader_;};Lastly, we create the main function which will check that the user passes an argument for the bag file path and spins our node.intmain(intargc,char**argv){if(argc!=2){std::cerr<<"Usage: "<<argv[0]<<" <bag>"<<std::endl;return1;}rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<PlaybackNode>(argv[1]));rclcpp::shutdown();return0;}2.2 Add executableNow open theCMakeLists.txtfile.Below the dependencies block, which containsfind_package(rosbag2_transportREQUIRED), add the following lines of code.add_executable(simple_bag_reader src/simple_bag_reader.cpp)ament_target_dependencies(simple_bag_reader rclcpp rosbag2_transport turtlesim)install(TARGETSsimple_bag_readerDESTINATION lib/${PROJECT_NAME})3 Build and runNavigate back to the root of your workspace and build your new package.LinuxmacOSWindowscolcon build --packages-select bag_reading_cppcolcon build --packages-select bag_reading_cppcolcon build --merge-install --packages-select bag_reading_cppNext, source the setup files.LinuxmacOSWindowssource install/setup.bashsource install/setup.bashcall install/setup.batNow, run the script.
Make sure to replace/path/to/subsetwith the path to yoursubsetbag.ros2 run bag_reading_cpp simple_bag_reader /path/to/subsetYou should see the (x, y) coordinates of the turtle printed to the console.SummaryYou created a C++ executable that reads data from a bag.
You then compiled and ran the executable which printed some information from the bag to the console.

Code Examples:

Language: unknown
ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_reading_cpp --dependencies rclcpp rosbag2_transport turtlesim

Language: unknown
<description>C++bagreadingtutorial</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>

Language: unknown
#include<chrono>#include<functional>#include<iostream>#include<memory>#include<string>#include"rclcpp/rclcpp.hpp"#include"rclcpp/serialization.hpp"#include"rosbag2_transport/reader_writer_factory.hpp"#include"turtlesim/msg/pose.hpp"usingnamespacestd::chrono_literals;classPlaybackNode:publicrclcpp::Node{public:PlaybackNode(conststd::string&bag_filename):Node("playback_node"){publisher_=this->create_publisher<turtlesim::msg::Pose>("/turtle1/pose",10);timer_=this->create_wall_timer(100ms,[this](){returnthis->timer_callback();});rosbag2_storage::StorageOptionsstorage_options;storage_options.uri=bag_filename;reader_=rosbag2_transport::ReaderWriterFactory::make_reader(storage_options);reader_->open(storage_options);}private:voidtimer_callback(){while(reader_->has_next()){rosbag2_storage::SerializedBagMessageSharedPtrmsg=reader_->read_next();if(msg->topic_name!="/turtle1/pose"){continue;}rclcpp::SerializedMessageserialized_msg(*msg->serialized_data);turtlesim::msg::Pose::SharedPtrros_msg=std::make_shared<turtlesim::msg::Pose>();serialization_.deserialize_message(&serialized_msg,ros_msg.get());publisher_->publish(*ros_msg);std::cout<<'('<<ros_msg->x<<", "<<ros_msg->y<<")\n";break;}}rclcpp::TimerBase::SharedPtrtimer_;rclcpp::Publisher<turtlesim::msg::Pose>::SharedPtrpublisher_;rclcpp::Serialization<turtlesim::msg::Pose>serialization_;std::unique_ptr<rosbag2_cpp::Reader>reader_;};intmain(intargc,char**argv){if(argc!=2){std::cerr<<"Usage: "<<argv[0]<<" <bag>"<<std::endl;return1;}rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<PlaybackNode>(argv[1]));rclcpp::shutdown();return0;}

Language: unknown
classPlaybackNode:publicrclcpp::Node

Language: unknown
public:PlaybackNode(conststd::string&bag_filename):Node("playback_node"){publisher_=this->create_publisher<turtlesim::msg::Pose>("/turtle1/pose",10);timer_=this->create_wall_timer(100ms,[this](){returnthis->timer_callback();});

Language: unknown
rosbag2_storage::StorageOptionsstorage_options;storage_options.uri=bag_filename;reader_=rosbag2_transport::ReaderWriterFactory::make_reader(storage_options);reader_->open(storage_options);

Language: unknown
voidtimer_callback(){while(reader_->has_next()){rosbag2_storage::SerializedBagMessageSharedPtrmsg=reader_->read_next();if(msg->topic_name!="/turtle1/pose"){continue;}

Language: unknown
rclcpp::SerializedMessageserialized_msg(*msg->serialized_data);turtlesim::msg::Pose::SharedPtrros_msg=std::make_shared<turtlesim::msg::Pose>();serialization_.deserialize_message(&serialized_msg,ros_msg.get());

Language: unknown
publisher_->publish(*ros_msg);std::cout<<'('<<ros_msg->x<<", "<<ros_msg->y<<")\n";break;}

Language: unknown
rclcpp::TimerBase::SharedPtrtimer_;rclcpp::Publisher<turtlesim::msg::Pose>::SharedPtrpublisher_;rclcpp::Serialization<turtlesim::msg::Pose>serialization_;std::unique_ptr<rosbag2_cpp::Reader>reader_;};

Language: unknown
intmain(intargc,char**argv){if(argc!=2){std::cerr<<"Usage: "<<argv[0]<<" <bag>"<<std::endl;return1;}rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<PlaybackNode>(argv[1]));rclcpp::shutdown();return0;}

Language: unknown
add_executable(simple_bag_reader src/simple_bag_reader.cpp)ament_target_dependencies(simple_bag_reader rclcpp rosbag2_transport turtlesim)install(TARGETSsimple_bag_readerDESTINATION lib/${PROJECT_NAME})

Language: unknown
colcon build --packages-select bag_reading_cpp

Language: unknown
colcon build --packages-select bag_reading_cpp

Language: unknown
colcon build --merge-install --packages-select bag_reading_cpp

Language: unknown
source install/setup.bash

Language: unknown
source install/setup.bash

Language: unknown
call install/setup.bat

Language: unknown
ros2 run bag_reading_cpp simple_bag_reader /path/to/subset
