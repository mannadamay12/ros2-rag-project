Title: Using Python, XML, and YAML for ROS 2 Launch Files
URL: https://docs.ros.org/en/jazzy/How-To-Guides/Launch-file-different-formats.html
Section: Installation
--------------------------------------------------------------------------------

Using Python, XML, and YAML for ROS 2 Launch FilesTable of ContentsLaunch file examplesUsing the Launch files from the command linePython, XML, or YAML: Which should I use?ROS 2 launch files can be written in Python, XML, and YAML.
This guide shows how to use these different formats to accomplish the same task, as well as has some discussion on when to use each format.Launch file examplesBelow is a launch file implemented in Python, XML, and YAML.
Each launch file performs the following actions:Setup command line arguments with defaultsInclude another launch fileInclude another launch file in another namespaceStart a node and setting its namespaceStart a node, setting its namespace, and setting parameters in that node (using the args)Create a node to remap messages from one topic to anotherPythonXMLYAML# example_launch.pyimportosfromament_index_pythonimportget_package_share_directoryfromlaunchimportLaunchDescriptionfromlaunch.actionsimportDeclareLaunchArgumentfromlaunch.actionsimportGroupActionfromlaunch.actionsimportIncludeLaunchDescriptionfromlaunch.launch_description_sourcesimportPythonLaunchDescriptionSourcefromlaunch.substitutionsimportLaunchConfigurationfromlaunch.substitutionsimportTextSubstitutionfromlaunch_ros.actionsimportNodefromlaunch_ros.actionsimportPushROSNamespacefromlaunch_xml.launch_description_sourcesimportXMLLaunchDescriptionSourcefromlaunch_yaml.launch_description_sourcesimportYAMLLaunchDescriptionSourcedefgenerate_launch_description():# args that can be set from the command line or a default will be usedbackground_r_launch_arg=DeclareLaunchArgument("background_r",default_value=TextSubstitution(text="0"))background_g_launch_arg=DeclareLaunchArgument("background_g",default_value=TextSubstitution(text="255"))background_b_launch_arg=DeclareLaunchArgument("background_b",default_value=TextSubstitution(text="0"))chatter_py_ns_launch_arg=DeclareLaunchArgument("chatter_py_ns",default_value=TextSubstitution(text="chatter/py/ns"))chatter_xml_ns_launch_arg=DeclareLaunchArgument("chatter_xml_ns",default_value=TextSubstitution(text="chatter/xml/ns"))chatter_yaml_ns_launch_arg=DeclareLaunchArgument("chatter_yaml_ns",default_value=TextSubstitution(text="chatter/yaml/ns"))# include another launch filelaunch_include=IncludeLaunchDescription(PythonLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.py')))# include a Python launch file in the chatter_py_ns namespacelaunch_py_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_py_ns'),IncludeLaunchDescription(PythonLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.py'))),])# include a xml launch file in the chatter_xml_ns namespacelaunch_xml_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_xml_ns'),IncludeLaunchDescription(XMLLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.xml'))),])# include a yaml launch file in the chatter_yaml_ns namespacelaunch_yaml_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_yaml_ns'),IncludeLaunchDescription(YAMLLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.yaml'))),])# start a turtlesim_node in the turtlesim1 namespaceturtlesim_node=Node(package='turtlesim',namespace='turtlesim1',executable='turtlesim_node',name='sim')# start another turtlesim_node in the turtlesim2 namespace# and use args to set parametersturtlesim_node_with_parameters=Node(package='turtlesim',namespace='turtlesim2',executable='turtlesim_node',name='sim',parameters=[{"background_r":LaunchConfiguration('background_r'),"background_g":LaunchConfiguration('background_g'),"background_b":LaunchConfiguration('background_b'),}])# perform remap so both turtles listen to the same command topicforward_turtlesim_commands_to_second_turtlesim_node=Node(package='turtlesim',executable='mimic',name='mimic',remappings=[('/input/pose','/turtlesim1/turtle1/pose'),('/output/cmd_vel','/turtlesim2/turtle1/cmd_vel'),])returnLaunchDescription([background_r_launch_arg,background_g_launch_arg,background_b_launch_arg,chatter_py_ns_launch_arg,chatter_xml_ns_launch_arg,chatter_yaml_ns_launch_arg,launch_include,launch_py_include_with_namespace,launch_xml_include_with_namespace,launch_yaml_include_with_namespace,turtlesim_node,turtlesim_node_with_parameters,forward_turtlesim_commands_to_second_turtlesim_node,])<!-- example_launch.xml --><launch><!-- args that can be set from the command line or a default will be used --><argname="background_r"default="0"/><argname="background_g"default="255"/><argname="background_b"default="0"/><argname="chatter_py_ns"default="chatter/py/ns"/><argname="chatter_xml_ns"default="chatter/xml/ns"/><argname="chatter_yaml_ns"default="chatter/yaml/ns"/><!-- include another launch file --><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py"/><!-- include a Python launch file in the chatter_py_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_py_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py"/></group><!-- include a xml launch file in the chatter_xml_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_xml_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.xml"/></group><!-- include a yaml launch file in the chatter_yaml_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_yaml_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.yaml"/></group><!-- start a turtlesim_node in the turtlesim1 namespace --><nodepkg="turtlesim"exec="turtlesim_node"name="sim"namespace="turtlesim1"/><!-- start another turtlesim_node in the turtlesim2 namespaceand use args to set parameters --><nodepkg="turtlesim"exec="turtlesim_node"name="sim"namespace="turtlesim2"><paramname="background_r"value="$(var background_r)"/><paramname="background_g"value="$(var background_g)"/><paramname="background_b"value="$(var background_b)"/></node><!-- perform remap so both turtles listen to the same command topic --><nodepkg="turtlesim"exec="mimic"name="mimic"><remapfrom="/input/pose"to="/turtlesim1/turtle1/pose"/><remapfrom="/output/cmd_vel"to="/turtlesim2/turtle1/cmd_vel"/></node></launch># example_launch.yamllaunch:# args that can be set from the command line or a default will be used-arg:name:"background_r"default:"0"-arg:name:"background_g"default:"255"-arg:name:"background_b"default:"0"-arg:name:"chatter_py_ns"default:"chatter/py/ns"-arg:name:"chatter_xml_ns"default:"chatter/xml/ns"-arg:name:"chatter_yaml_ns"default:"chatter/yaml/ns"# include another launch file-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.py"# include a Python launch file in the chatter_py_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_py_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.py"# include a xml launch file in the chatter_xml_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_xml_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.xml"# include a yaml launch file in the chatter_yaml_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_yaml_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.yaml"# start a turtlesim_node in the turtlesim1 namespace-node:pkg:"turtlesim"exec:"turtlesim_node"name:"sim"namespace:"turtlesim1"# start another turtlesim_node in the turtlesim2 namespace and use args to set parameters-node:pkg:"turtlesim"exec:"turtlesim_node"name:"sim"namespace:"turtlesim2"param:-name:"background_r"value:"$(varbackground_r)"-name:"background_g"value:"$(varbackground_g)"-name:"background_b"value:"$(varbackground_b)"# perform remap so both turtles listen to the same command topic-node:pkg:"turtlesim"exec:"mimic"name:"mimic"remap:-from:"/input/pose"to:"/turtlesim1/turtle1/pose"-from:"/output/cmd_vel"to:"/turtlesim2/turtle1/cmd_vel"Using the Launch files from the command lineLaunchingAny of the launch files above can be run withros2launch.
To try them locally, you can either create a new package and useros2 launch <package_name> <launch_file_name>or run the file directly by specifying the path to the launch fileros2 launch <path_to_launch_file>Setting argumentsTo set the arguments that are passed to the launch file, you should usekey:=valuesyntax.
For example, you can set the value ofbackground_rin the following way:ros2 launch <package_name> <launch_file_name> background_r:=255orros2 launch <path_to_launch_file> background_r:=255Controlling the turtlesTo test that the remapping is working, you can control the turtles by running the following command in another terminal:ros2 run turtlesim turtle_teleop_key --ros-args --remap __ns:=/turtlesim1Python, XML, or YAML: Which should I use?NoteLaunch files in ROS 1 were written in XML, so XML may be the most familiar to people coming from ROS 1.
To see what’s changed, you can visitMigrating Launch Files.For most applications the choice of which ROS 2 launch format comes down to developer preference.
However, if your launch file requires flexibility that you cannot achieve with XML or YAML, you can use Python to write your launch file.
Using Python for ROS 2 launch is more flexible because of following two reasons:Python is a scripting language, and thus you can leverage the language and its libraries in your launch files.ros2/launch(general launch features) andros2/launch_ros(ROS 2 specific launch features) are written in Python and thus you have lower level access to launch features that may not be exposed by XML and YAML.That being said, a launch file written in Python may be more complex and verbose than one in XML or YAML.

Code Examples:

Language: unknown
# example_launch.pyimportosfromament_index_pythonimportget_package_share_directoryfromlaunchimportLaunchDescriptionfromlaunch.actionsimportDeclareLaunchArgumentfromlaunch.actionsimportGroupActionfromlaunch.actionsimportIncludeLaunchDescriptionfromlaunch.launch_description_sourcesimportPythonLaunchDescriptionSourcefromlaunch.substitutionsimportLaunchConfigurationfromlaunch.substitutionsimportTextSubstitutionfromlaunch_ros.actionsimportNodefromlaunch_ros.actionsimportPushROSNamespacefromlaunch_xml.launch_description_sourcesimportXMLLaunchDescriptionSourcefromlaunch_yaml.launch_description_sourcesimportYAMLLaunchDescriptionSourcedefgenerate_launch_description():# args that can be set from the command line or a default will be usedbackground_r_launch_arg=DeclareLaunchArgument("background_r",default_value=TextSubstitution(text="0"))background_g_launch_arg=DeclareLaunchArgument("background_g",default_value=TextSubstitution(text="255"))background_b_launch_arg=DeclareLaunchArgument("background_b",default_value=TextSubstitution(text="0"))chatter_py_ns_launch_arg=DeclareLaunchArgument("chatter_py_ns",default_value=TextSubstitution(text="chatter/py/ns"))chatter_xml_ns_launch_arg=DeclareLaunchArgument("chatter_xml_ns",default_value=TextSubstitution(text="chatter/xml/ns"))chatter_yaml_ns_launch_arg=DeclareLaunchArgument("chatter_yaml_ns",default_value=TextSubstitution(text="chatter/yaml/ns"))# include another launch filelaunch_include=IncludeLaunchDescription(PythonLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.py')))# include a Python launch file in the chatter_py_ns namespacelaunch_py_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_py_ns'),IncludeLaunchDescription(PythonLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.py'))),])# include a xml launch file in the chatter_xml_ns namespacelaunch_xml_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_xml_ns'),IncludeLaunchDescription(XMLLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.xml'))),])# include a yaml launch file in the chatter_yaml_ns namespacelaunch_yaml_include_with_namespace=GroupAction(actions=[# push_ros_namespace first to set namespace of included nodes for following actionsPushROSNamespace('chatter_yaml_ns'),IncludeLaunchDescription(YAMLLaunchDescriptionSource(os.path.join(get_package_share_directory('demo_nodes_cpp'),'launch/topics/talker_listener_launch.yaml'))),])# start a turtlesim_node in the turtlesim1 namespaceturtlesim_node=Node(package='turtlesim',namespace='turtlesim1',executable='turtlesim_node',name='sim')# start another turtlesim_node in the turtlesim2 namespace# and use args to set parametersturtlesim_node_with_parameters=Node(package='turtlesim',namespace='turtlesim2',executable='turtlesim_node',name='sim',parameters=[{"background_r":LaunchConfiguration('background_r'),"background_g":LaunchConfiguration('background_g'),"background_b":LaunchConfiguration('background_b'),}])# perform remap so both turtles listen to the same command topicforward_turtlesim_commands_to_second_turtlesim_node=Node(package='turtlesim',executable='mimic',name='mimic',remappings=[('/input/pose','/turtlesim1/turtle1/pose'),('/output/cmd_vel','/turtlesim2/turtle1/cmd_vel'),])returnLaunchDescription([background_r_launch_arg,background_g_launch_arg,background_b_launch_arg,chatter_py_ns_launch_arg,chatter_xml_ns_launch_arg,chatter_yaml_ns_launch_arg,launch_include,launch_py_include_with_namespace,launch_xml_include_with_namespace,launch_yaml_include_with_namespace,turtlesim_node,turtlesim_node_with_parameters,forward_turtlesim_commands_to_second_turtlesim_node,])

Language: unknown
<!-- example_launch.xml --><launch><!-- args that can be set from the command line or a default will be used --><argname="background_r"default="0"/><argname="background_g"default="255"/><argname="background_b"default="0"/><argname="chatter_py_ns"default="chatter/py/ns"/><argname="chatter_xml_ns"default="chatter/xml/ns"/><argname="chatter_yaml_ns"default="chatter/yaml/ns"/><!-- include another launch file --><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py"/><!-- include a Python launch file in the chatter_py_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_py_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.py"/></group><!-- include a xml launch file in the chatter_xml_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_xml_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.xml"/></group><!-- include a yaml launch file in the chatter_yaml_ns namespace--><group><!-- push_ros_namespace to set namespace of included nodes --><push_ros_namespacenamespace="$(var chatter_yaml_ns)"/><includefile="$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener_launch.yaml"/></group><!-- start a turtlesim_node in the turtlesim1 namespace --><nodepkg="turtlesim"exec="turtlesim_node"name="sim"namespace="turtlesim1"/><!-- start another turtlesim_node in the turtlesim2 namespaceand use args to set parameters --><nodepkg="turtlesim"exec="turtlesim_node"name="sim"namespace="turtlesim2"><paramname="background_r"value="$(var background_r)"/><paramname="background_g"value="$(var background_g)"/><paramname="background_b"value="$(var background_b)"/></node><!-- perform remap so both turtles listen to the same command topic --><nodepkg="turtlesim"exec="mimic"name="mimic"><remapfrom="/input/pose"to="/turtlesim1/turtle1/pose"/><remapfrom="/output/cmd_vel"to="/turtlesim2/turtle1/cmd_vel"/></node></launch>

Language: unknown
# example_launch.yamllaunch:# args that can be set from the command line or a default will be used-arg:name:"background_r"default:"0"-arg:name:"background_g"default:"255"-arg:name:"background_b"default:"0"-arg:name:"chatter_py_ns"default:"chatter/py/ns"-arg:name:"chatter_xml_ns"default:"chatter/xml/ns"-arg:name:"chatter_yaml_ns"default:"chatter/yaml/ns"# include another launch file-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.py"# include a Python launch file in the chatter_py_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_py_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.py"# include a xml launch file in the chatter_xml_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_xml_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.xml"# include a yaml launch file in the chatter_yaml_ns namespace-group:-push_ros_namespace:namespace:"$(varchatter_yaml_ns)"-include:file:"$(find-pkg-sharedemo_nodes_cpp)/launch/topics/talker_listener_launch.yaml"# start a turtlesim_node in the turtlesim1 namespace-node:pkg:"turtlesim"exec:"turtlesim_node"name:"sim"namespace:"turtlesim1"# start another turtlesim_node in the turtlesim2 namespace and use args to set parameters-node:pkg:"turtlesim"exec:"turtlesim_node"name:"sim"namespace:"turtlesim2"param:-name:"background_r"value:"$(varbackground_r)"-name:"background_g"value:"$(varbackground_g)"-name:"background_b"value:"$(varbackground_b)"# perform remap so both turtles listen to the same command topic-node:pkg:"turtlesim"exec:"mimic"name:"mimic"remap:-from:"/input/pose"to:"/turtlesim1/turtle1/pose"-from:"/output/cmd_vel"to:"/turtlesim2/turtle1/cmd_vel"

Language: unknown
ros2 launch <package_name> <launch_file_name>

Language: unknown
ros2 launch <path_to_launch_file>

Language: unknown
ros2 launch <package_name> <launch_file_name> background_r:=255

Language: unknown
ros2 launch <path_to_launch_file> background_r:=255

Language: unknown
ros2 run turtlesim turtle_teleop_key --ros-args --remap __ns:=/turtlesim1
