Title: Eloquent Elusor (eloquent)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Eloquent-Elusor.html
Section: Installation
--------------------------------------------------------------------------------

Eloquent Elusor (eloquent)Table of ContentsSupported PlatformsInstallationNew features in this ROS 2 releaseChanges since the Dashing releasegeometry_msgsrclcpprmwros2clirvizTF2 BufferrclKnown IssuesTimeline before the releaseEloquent Elusoris the fifth release of ROS 2.Supported PlatformsEloquent Elusor is primarily supported on the following platforms:Tier 1 platforms:Ubuntu 18.04 (Bionic):amd64andarm64Mac macOS 10.14 (Mojave)Windows 10 (Visual Studio 2019)Tier 2 platforms:Ubuntu 18.04 (Bionic):arm32Tier 3 platforms:Debian Stretch (9):amd64,arm64andarm32OpenEmbedded Thud (2.6) / webOS OSE:arm32andx86For more information about RMW implementations, compiler / interpreter versions, and system dependency versions seeREP 2000.InstallationInstall Eloquent ElusorNew features in this ROS 2 releaseA few features and improvements we would like to highlight:Support for markup-based launch files (XML/YAML)Improved launch-based testingPassing key-value parameters on CLISupport stream logging macrosPer-node logging- All stdout/stderr output from nodes are logged in ~/.rosros2doctorImproved performance of sourcing setup filesrviz:interactive markers,torque ring,tf message filtersrqt:parameter plugin,tf tree plugin,robot steering plugin(also backported to Dashing)turtlesim(also backported to Dashing)RMW implementations:API to loan message for zero copy, used byrmw_iceoryxFast RTPS 1.9.3New Tier-2 implementation:rmw_cyclonedds(also backported to Dashing)Environment variableROS_LOCALHOST_ONLYto limit communication to localhostMacOS Mojave SupportTracing instrumentationfor rcl and rclcppDuring the development theEloquent meta ticketon GitHub contains an up-to-date state of the ongoing high level tasks as well as references specific tickets with more details.Changes since the Dashing releasegeometry_msgsThegeometry_msgs/msg/Quaternion.msginterface now default initializes to a valid quaternion, with the following values:\[\begin{split}x = 0 \\
y = 0 \\
z = 0 \\
w = 1\end{split}\]Here is the pull request for more detail:https://github.com/ros2/common_interfaces/pull/74Static transform broadcasters and listeners now use QoS durabilitytransient_localon the/tf_statictopic.
Similar to the latched setting in ROS 1, static transforms only need to be published once.
New listeners will receive transforms from all static broadcasters that are alive and have published before.
All publishers must be updated to use this durability setting or their messages won’t be received by transform listeners.
See this pull request for more detail:https://github.com/ros2/geometry2/pull/160rclcppAPI Break withget_actual_qos()Introduced in Dashing, theget_actual_qos()method on thePublisherBaseandSubscriptionBasepreviously returned an rmw type,rmw_qos_profile_t, but that made it awkward to reuse with the creation of other entities.
Therefore it was updated to return arclcpp::QoSinstead.Existing code will need to use therclcpp::QoS::get_rmw_qos_profile()method if the rmw profile is still required.
For example:voidmy_func(constrmw_qos_profile_t&rmw_qos);/* Previously: */// my_func(some_pub->get_actual_qos());/* Now: */my_func(some_pub->get_actual_qos()->get_rmw_qos_profile());The rationale for breaking this directly rather than doing a tick-tock is that it is a new function and is expected to be used infrequently by users.
Also, since only the return type is changing, adding a new function with a different would be to only way to do a deprecation cycle andget_actual_qos()is the most appropriate name, so we would be forced to pick a less obvious name for the method.API Break with Publisher and Subscription ClassesIn an effort to streamline the construction of Publishers and Subscriptions, the API of the constructors were changed.It would be impossible to support a deprecation cycle, because the old signature takes an rcl type and the new one takes theNodeBaseInterfacetype so that it can get additional information it now needs, and there’s no way to get the additional information needed from just the rcl type.
The new signature could possibly be backported if that would help contributors, but since the publishers and subscriptions are almost always created using the factory functions or some other higher level API, we do not expect this to be a problem for most users.Please see the original pr for more detail and comment there if this causes issues:https://github.com/ros2/rclcpp/pull/867Compiler warning about unused result ofadd_on_set_parameters_callbackSince Eloquent Patch Release 2 (2020-12-04)Users should retain the  handle returned byrclcpp::Node::add_on_set_parameters_callback, otherwise their callback may be unregistered.
A warning has been added to help identify bugs where the returned handle is not used.https://github.com/ros2/rclcpp/pull/1243rmwAPI Break Due to Addition of Publisher and Subscription OptionsThermw_create_publisher()method had a new argument added of typeconstrmw_publisher_options_t*.
This new structure holds options (beyond the typesupport, topic name, and QoS) for new publishers.Thermw_create_subscription()method had one argument removed,boolignore_local_publications, and replaced by the new options of typeconstrmw_subscription_options_t*.
Theignore_local_publicationsoption was moved into the newrmw_subscription_options_ttype.In both cases the new argument, which are pointers, may never be null, and so the rmw implementations should check to make sure the options are not null.
Additionally, the options should be copied into the corresponding rmw structure.See this pull request, and the associated pull requests for more details:https://github.com/ros2/rmw/pull/187ros2cliros2msg and ros2srv deprecatedThe CLI toolsros2msgandros2srvare deprecated.
They have been replaced by the toolros2interface, which also supports action and IDL interfaces.
You can runros2interface--helpfor usage.ros2nodeService clients have been added to ros2node info.
As part of that change the Python functionros2node.api.get_service_infohas been renamed toros2node.api.get_service_server_info.rvizRenamed ‘2D Nav Goal’ toolThe tool was renamed to ‘2D Goal Pose’ and the default topic was changed from/move_base_simple/goalto/goal_pose.Here is the related pull request:https://github.com/ros2/rviz/pull/455TF2 BufferTF2 buffers now have to be given a timer interface.If a timer interface is not given, an exception will be thrown.For example:tf=std::make_shared<tf2_ros::Buffer>(get_clock());// The next two lines are new in Eloquentautotimer_interface=std::make_shared<tf2_ros::CreateTimerROS>(this->get_node_base_interface(),this->get_node_timers_interface());tf->setCreateTimerInterface(timer_interface);// Pass the Buffer to the TransformListener as beforetransform_listener=std::make_shared<tf2_ros::TransformListener>(*tf);rclROS command line argument changesTo cope with an increasingly complex interface, with a now extended set of configuration options, ROS CLI syntax has been changed.
As an example, a command line using Dashing syntax like:ros2 run some_package some_node foo:=bar __params:=/path/to/params.yaml __log_level:=WARN --user-flagis written using Eloquent (and onwards) syntax as:ros2 run some_package some_node --ros-args --remap foo:=bar --params-file /path/to/params.yaml --log-level WARN -- --user-flagThis explicit syntax affords new features, like single parameter assignment--paramname:=value.
For further reference and rationale, check theROS command line arguments design document.WarningFormer syntax has been deprecated and is due for removal in the next release.Known Issues[ros2/rosidl#402]find_package(PCL)interferes with ROS interface generation.
Workaround: invokefind_package(PCL)afterrosidl_generate_interfaces().[ros2/rclcpp#893]rclcpp::Contextis not destroyed because of a reference cycle withrclcpp::GraphListener. This causes a memory leak. A fix has not been backported because of the risk of breaking ABI.Timeline before the releaseA few milestones leading up to the release:Mon. Sep 30th (alpha)First releases of core packages available.
Testing can happen from now on (some features might not have landed yet).Fri. Oct 18thAPI and feature freeze for core packages
Only bug fix releases should be made after this point.
New packages can be released independently.Thu. Oct 24th (beta)Updated releases of core packages available.
Additional testing of the latest features.Wed. Nov 13th (release candidate)Updated releases of core packages available.Tue. Nov 19thFreeze rosdistro.
No PRs for Eloquent on therosdistrorepo will be merged (reopens after the release announcement).

Code Examples:

Language: unknown
voidmy_func(constrmw_qos_profile_t&rmw_qos);/* Previously: */// my_func(some_pub->get_actual_qos());/* Now: */my_func(some_pub->get_actual_qos()->get_rmw_qos_profile());

Language: unknown
tf=std::make_shared<tf2_ros::Buffer>(get_clock());// The next two lines are new in Eloquentautotimer_interface=std::make_shared<tf2_ros::CreateTimerROS>(this->get_node_base_interface(),this->get_node_timers_interface());tf->setCreateTimerInterface(timer_interface);// Pass the Buffer to the TransformListener as beforetransform_listener=std::make_shared<tf2_ros::TransformListener>(*tf);

Language: unknown
ros2 run some_package some_node foo:=bar __params:=/path/to/params.yaml __log_level:=WARN --user-flag

Language: unknown
ros2 run some_package some_node --ros-args --remap foo:=bar --params-file /path/to/params.yaml --log-level WARN -- --user-flag
