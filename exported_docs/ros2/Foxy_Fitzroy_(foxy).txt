Title: Foxy Fitzroy (foxy)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Foxy-Fitzroy.html
Section: Installation
--------------------------------------------------------------------------------

Foxy Fitzroy (foxy)Table of ContentsSupported PlatformsInstallationNew features in this ROS 2 releaseChanges in Patch Release 8 (2022-09-28)Launch GroupAction scopes environmentChanges in Patch Release 7 (2022-02-08)Launch set_env frontend behavior changeFix launch frontend parserFix memory leaks and undefined behavior in rmw_fastrtps_dynamic_cppChanges in Patch Release 2 (2020-08-07)Bug in static_transform_publisherChanges since the Eloquent releaseClassic CMake vs. modern CMakeament_export_interfaces replaced by ament_export_targetsrosidl_generator_c|cpp namespace / API changesDefault working directory for ament_add_testDefault Console Logging FormatDefault Console Logging Output Streamlaunch_rosrclcpprclcpp_actionrclpyrmw_connext_cpprvizstd_msgsSecurity featuresKnown IssuesTimeline before the releaseFoxy Fitzroyis the sixth release of ROS 2.Supported PlatformsFoxy Fitzroy is primarily supported on the following platforms:Tier 1 platforms:Ubuntu 20.04 (Focal):amd64andarm64Mac macOS 10.14 (Mojave)Windows 10 (Visual Studio 2019)Tier 3 platforms:Ubuntu 20.04 (Focal):arm32Debian Buster (10):amd64,arm64andarm32OpenEmbedded Thud (2.6) / webOS OSE:arm32andx86For more information about RMW implementations, compiler / interpreter versions, and system dependency versions seeREP 2000.InstallationInstall Foxy FitzroyNew features in this ROS 2 releaseDuring the development theFoxy meta-ticketon GitHub contains an up-to-date state of the ongoing high-level tasks as well as references specific tickets with more details.Changes in Patch Release 8 (2022-09-28)Launch GroupAction scopes environmentTheSetEnvironmentVariableaction is now scoped to anyGroupActionit is returned from.For example, consider the following launch files,PythonXMLimportlaunchfromlaunch.actionsimportSetEnvironmentVariablefromlaunch.actionsimportGroupActionfromlaunch_ros.actionsimportNodedefgenerate_launch_description():returnlaunch.LaunchDescription([SetEnvironmentVariable(name='my_env_var',value='1'),Node(package='foo',executable='foo',output='screen'),GroupAction([SetEnvironmentVariable(name='my_env_var',value='2'),]),])<launch><set_envname="my_env_var"value="1"/><nodepkg="foo"exec="foo"output="screen"/><group><set_envname="my_env_var"value="2"/></group></launch>Before patch release 8, the nodefoowill start withmy_env_var=2, but now it will start withmy_env_var=1.To opt-out of the new behavior, you can set the argumentscoped=Falseon theGroupAction.Related tickets:ros2#1244launch#630Changes in Patch Release 7 (2022-02-08)Launch set_env frontend behavior changelaunch#468inadvertently changed behavior to the scope of theset_envaction in frontend launch files.
Changes to environment variables using theset_envaction are no longer scoped to parentgroupactions, and instead apply globally.
Since it was backported, the change affects this release.We consider this change a regression and intend to fix the behavior in the next patch release and in future ROS distributions.
We also plan to fix the behavior in Python launch files, which have never scoped setting environment variables properly.Related issues:ros2#1244launch#597Fix launch frontend parserA refactor of the launch frontend parser fixed someissues parsing special characters.
As a result, there has been a small behavior change when it comes to parsing strings.
For example, previously to pass a number as a string you would have to add extra quotation marks (two sets of quotation marks were needed if using a substitution):<!-- results in the string value "'3'" --><paramname="foo"value="''3''"/>After the refactor, the above will result in the the string"''3''"(note the extra set of quotation marks).
Now, users should use thetypeattribute to signal that the value should be interpreted as a string:<paramname="foo"value="3"type="str"/>Related pull requests:launch#530launch_ros#265Fix memory leaks and undefined behavior in rmw_fastrtps_dynamic_cppAPI was changed in the following header files:rmw_fastrtps_dynamic_cpp/TypeSupport.hpprmw_fastrtps_dynamic_cpp/TypeSupport_impl.hppThough technically they are publically accessible, it is unlikely people are using them directly.
Therefore, we decided to break API in order to fix memory leaks and undefined behavior.The fix was originally submitted inrmw_fastrtps#429and later backported to Foxy inrmw_fastrtps#577.Changes in Patch Release 2 (2020-08-07)Bug in static_transform_publisherDuring the development of Foxy, a bug was introduced into the tf2_ros static_transform_publisher program.
The implementation of the order of the Euler angles passed to static_transform_publisher disagrees with the documentation.
Foxy patch release 2fixesthe order so that the implementation agrees with the documentation (yaw, pitch, roll).
For users who have started using the initial Foxy release or patch release 1, this means that any launch files that use static_transform_publisher will have to have the command-line order swapped according to the new order.
For users who are coming from ROS 2 Dashing, ROS 2 Eloquent, or ROS 1, no changes need to be made to port to Foxy patch release 2.Changes since the Eloquent releaseClassic CMake vs. modern CMakeIn “classic” CMake a package provides CMake variables like<pkgname>_INCLUDE_DIRSand<pkgname>_LIBRARIESwhen beingfind_package()-ed.
Withament_cmakethat is achieved by callingament_export_include_directoriesandament_export_libraries.
In combination withament_export_dependencies,ament_cmakeensures that all include directories and libraries of recursive dependencies are concatenated and included in these variables.In “modern” CMake a package provides an interface target instead (commonly named<pkgname>::<pkgname>) which in itself encapsulates all recursive dependencies.
In order to export a library target to use modern CMakeament_export_targetsneeds to be called with an export name which is also used when installing the libraries usinginstall(TARGETS<libA><libB>EXPORT<export_name>...).
The exported interface targets are available through the CMake variable<pkgname>_TARGETS.
For library targets to be exportable like this they must not rely on classic functions affecting global state likeinclude_directories()but set the include directories on the target itself - for the build as well as install environment - using generator expressions, e.g.target_include_directories(<target>PUBLIC"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>""$<INSTALL_INTERFACE:include>").Whenament_target_dependenciesis used to add dependencies to a library target the function uses modern CMake targets when they are available.
Otherwise it falls back to using classic CMake variables.
As a consequence you should only export modern CMake targets if all dependencies are also providing modern CMake targets.Otherwise the exported interface target will contain the absolute paths to include directories / libraries in the generated CMake logic which makes the package non-relocatable.For examples how packages have been updated to modern CMake in Foxy seeros2/ros2#904.ament_export_interfaces replaced by ament_export_targetsThe CMake functionament_export_interfacesfrom the packageament_cmake_export_interfaceshas been deprecated in favor of the functionament_export_targetsin the new packageament_cmake_export_targets.
See the GitHub ticketament/ament_cmake#237for more context.rosidl_generator_c|cpp namespace / API changesThe packagesrosidl_generator_candrosidl_generator_cpphave been refactored with many headers and sources moved into the new packagesrosidl_runtime_candrosidl_runtime_cpp.
The intention is to remove run dependencies on the generator packages and therefore the code generation tools using Python.
While moving the headers the include paths / namespaces were updated accordingly so in many cases changing include directives from the generator package to the runtime package is sufficient.The generated C / C++ code has also been refactored.
The files ending in__struct.h|hpp,__functions.h,__traits.hpp, etc. have been moved into a subdirectorydetailbut most code only includes the header named after the interface without any of these suffixes.Some types regarding string and sequence bounds have also been renamed to match the naming conventions but they aren’t expected to be used in user code (above RMW implementation and type support packages)For more information seeros2/rosidl#446 (for C)andros2/rosidl#447 (for C++).Default working directory for ament_add_testThe default working directory for tests added withament_add_testhas been changed toCMAKE_CURRENT_BINARY_DIRto match the behavior of CMakeadd_test.
Either update the tests to work with the new default or passWORKING_DIRECTORY${CMAKE_SOURCE_DIR}to restore the previous value.Default Console Logging FormatThe default console logging output format was changed to include the timestamp by default, see:https://github.com/ros2/rcutils/pull/190https://discourse.ros.org/t/ros2-logging-format/11549Default Console Logging Output StreamAs of Foxy, all logging messages at all severity levels get logged to stderr by default.
This ensures that logging messages come out immediately, and brings the ROS 2 logging system into alignment with most other logging systems.
It is possible to change the stream to stdout at runtime via the RCUTILS_LOGGING_USE_STDOUT environment variable, but all logging messages will still go to the same stream.
Seehttps://github.com/ros2/rcutils/pull/196for more details.launch_rosNode name and namespace parameters changedTheNodeaction parameters related to naming have been changed:node_namehas been renamed tonamenode_namespacehas been renamed tonamespacenode_executablehas been renamed toexecutableexec_namehas been added for naming the process associated with the node.
Previously, users would have used thenamekeyword argument.The old parameters have been deprecated.These changes were made to make the launch frontend more idiomatic.
For example, instead of<nodepkg="demo_nodes_cpp"exec="talker"node-name="foo"/>we can now write<nodepkg="demo_nodes_cpp"exec="talker"name="foo"/>This change also applies toComposableNodeContainer,ComposableNode, andLifecycleNode.
For examples, see therelevant changes to the demos.Related pull request in launch_ros.rclcppChange in Advanced Subscription Callback SignatureWith the pull requesthttps://github.com/ros2/rclcpp/pull/1047the signature of callbacks which receive the message info with the message has changed.
Previously it used thermwtypermw_message_info_t, but now uses therclcpptyperclcpp::MessageInfo.
The required changes are straightforward, and can be seen demonstrated in these pull requests:https://github.com/ros2/system_tests/pull/423/fileshttps://github.com/ros2/rosbag2/pull/375/fileshttps://github.com/ros2/ros1_bridge/pull/253/filesChange in Serialized Message Callback SignatureThe pull requestros2/rclcpp#1081introduces a new signature of the callbacks for retrieving ROS messages in serialized form.
The previously used C-Structrcl_serialized_message_tis being superseded by a C++ data typerclcpp::SerializedMessage.The example nodes indemo_nodes_cpp, namelytalker_serialized_messageas well aslistener_serialized_messagereflect these changes.Breaking change in Node Interface getters’ signatureWith pull requestros2/rclcpp#1069, the signature of node interface getters has been modified to return shared ownership of node interfaces (i.e. anstd::shared_ptr) instead of a non-owning raw pointer.
Required changes in downstream packages that relied on the previous signature are simple and straightforward: use thestd::shared_ptr::get()method.Deprecate set_on_parameters_set_callbackInstead, use therclcpp::Nodemethodsadd_on_set_parameters_callbackandremove_on_set_parameters_callbackfor adding and removing functions that are called when parameters are set.Related pull request:https://github.com/ros2/rclcpp/pull/1123Breaking change in Publisher getter signatureWith pull requestros2/rclcpp#1119, the signature of publisher handle getter has been modified to return shared ownership of the underlying rcl structure (i.e. anstd::shared_ptr) instead of a non-owning raw pointer.
This was necessary to fix a segfault in certain circumstances.
Required changes in downstream packages that relied on the previous signature are simple and straightforward: use thestd::shared_ptr::get()method.rclcpp_actionDeprecate ClientGoalHandle::async_result()Using this API, it is possible to run into a race condition causing an exception to be thrown.
Instead, prefer to useClient::async_get_result(), which is safer.Seeros2/rclcpp#1120and the connected issue for more info.rclpySupport for multiple on parameter set callbacksUse theNodemethodsadd_on_set_parameters_callbackandremove_on_set_parameters_callbackfor adding and removing functions that are called when parameters are set.The methodset_parameters_callbackhas been deprecated.Related pull requests:https://github.com/ros2/rclpy/pull/457,https://github.com/ros2/rclpy/pull/504rmw_connext_cppConnext 5.1 locator kinds compatibility modeUp to and includingEloquent,rmw_connext_cppwas settingdds.transport.use_510_compatible_locator_kindsproperty totrue.
This property is not being forced anymore, and shared transport communication betweenFoxyand previous releases will stop working.
Logs similar to:PRESParticipant_checkTransportInfoMatching:Warning:discoveredremoteparticipant'RTI Administration Console'usingthe'shmem'transportwithclassID16777216.
ThisclassIDdoesnotmatchtheclassID2ofthesametransportinthelocalparticipant'talker'.
Thesetwoparticipantswillnotcommunicateoverthe'shmem'transport.
Checkthevalueoftheproperty'dds.transport.use_510_compatible_locator_kinds'inthelocalparticipant.
Seehttps://community.rti.com/kb/what-causes-error-discovered-remote-participantforadditionalinfo.will be observed when this incompatibility happens.If compatibility is needed, it can be set up in an external QoS profiles files containing:<participant_qos><property><value><element><name>dds.transport.use_510_compatible_locator_kinds</name><value>1</value></element></value></property></participant_qos>Remember to set theNDDS_QOS_PROFILESenvironment variable to the QoS profiles file path.
For more information, seeHowtoChangeTransportSettingsin5.2.0ApplicationsforCompatibilitywith5.1.0section ofTransport_Compatibility.rvizTools timestamp messages using ROS time‘2D Pose Estimate’, ‘2D Nav Goal’, and ‘Publish Point’ tools now timestamp their messages using ROS time instead of system time, in order for theuse_sim_timeparameter to have an effect on them.Related pull request:https://github.com/ros2/rviz/pull/519std_msgsDeprecation of messagesAlthough discouraged for a long time we have officially deprecated the following messages instd_msgs.
There are copies inexample_interfacesstd_msgs/msg/Boolstd_msgs/msg/Bytestd_msgs/msg/ByteMultiArraystd_msgs/msg/Charstd_msgs/msg/Float32std_msgs/msg/Float32MultiArraystd_msgs/msg/Float64std_msgs/msg/Float64MultiArraystd_msgs/msg/Int16std_msgs/msg/Int16MultiArraystd_msgs/msg/Int32std_msgs/msg/Int32MultiArraystd_msgs/msg/Int64std_msgs/msg/Int64MultiArraystd_msgs/msg/Int8std_msgs/msg/Int8MultiArraystd_msgs/msg/MultiArrayDimensionstd_msgs/msg/MultiArrayLayoutstd_msgs/msg/Stringstd_msgs/msg/UInt16std_msgs/msg/UInt16MultiArraystd_msgs/msg/UInt32std_msgs/msg/UInt32MultiArraystd_msgs/msg/UInt64std_msgs/msg/UInt64MultiArraystd_msgs/msg/UInt8std_msgs/msg/UInt8MultiArraySecurity featuresUse of security enclavesAs of Foxy, domain participants are no longer mapped directly to ROS nodes.
As a result, ROS 2 security features (which are specific to domain participants) are also no longer mapped directly to ROS nodes.
Instead, Foxy introduces the concept of a security “enclave”, where an “enclave” is a process or group of processes that will share the same identity and access control rules.This means that security artifacts arenotretrieved based on the node name anymore but based on the Security enclave name.
A node enclave name can be set by using the ROS argument--enclave, e.g.ros2rundemo_nodes_pytalker--ros-args--enclave/my_enclaveRelated design document:https://github.com/ros2/design/pull/274Note that permissions files are limited by the underlying transport packet size, so grouping many permissions under the same enclave willnotwork if the resulting permissions file exceed 64kB.
Related issue[ros2/sros2#228]Renaming of the environment variablesEnvironment variables renamingName in EloquentName in FoxyROS_SECURITY_ROOT_DIRECTORYROS_SECURITY_KEYSTOREROS_SECURITY_NODE_DIRECTORYROS_SECURITY_ENCLAVE_OVERRIDEKnown Issues[ros2/ros2#922]Services’ performance is flaky forrclcppnodes using eProsima Fast-RTPS or ADLINK CycloneDDS as RMW implementation.
Specifically, service clients sometimes do not receive the response from servers.[ros2/rclcpp#1212]Ready reentrant Waitable objects can attempt to execute multiple times.Timeline before the releaseA few milestones leading up to the release:NoteThe dates below reflect an extension by roughly two weeks due to the coronavirus pandemic.Wed. April 22nd, 2020API and feature freeze forros_core[1]packages.
Note that this includesrmw, which is a recursive dependency ofros_core.
Only bug fix releases should be made after this point.
New packages can be released independently.Mon. April 29th, 2020 (beta)Updated releases ofdesktop[2]packages available.
Testing of the new features.Wed. May 27th, 2020 (release candidate)Updated releases ofdesktop[2]packages available.Wed. June 3rd, 2020Freeze rosdistro.
No PRs for Foxy on therosdistrorepo will be merged (reopens after the release announcement).[1]Theros_corevariant described in thevariantsrepository.[2](1,2)Thedesktopvariant described in thevariantsrepository.

Code Examples:

Language: unknown
importlaunchfromlaunch.actionsimportSetEnvironmentVariablefromlaunch.actionsimportGroupActionfromlaunch_ros.actionsimportNodedefgenerate_launch_description():returnlaunch.LaunchDescription([SetEnvironmentVariable(name='my_env_var',value='1'),Node(package='foo',executable='foo',output='screen'),GroupAction([SetEnvironmentVariable(name='my_env_var',value='2'),]),])

Language: unknown
<launch><set_envname="my_env_var"value="1"/><nodepkg="foo"exec="foo"output="screen"/><group><set_envname="my_env_var"value="2"/></group></launch>

Language: unknown
<!-- results in the string value "'3'" --><paramname="foo"value="''3''"/>

Language: unknown
<paramname="foo"value="3"type="str"/>

Language: unknown
<nodepkg="demo_nodes_cpp"exec="talker"node-name="foo"/>

Language: unknown
<nodepkg="demo_nodes_cpp"exec="talker"name="foo"/>

Language: unknown
PRESParticipant_checkTransportInfoMatching:Warning:discoveredremoteparticipant'RTI Administration Console'usingthe'shmem'transportwithclassID16777216.
ThisclassIDdoesnotmatchtheclassID2ofthesametransportinthelocalparticipant'talker'.
Thesetwoparticipantswillnotcommunicateoverthe'shmem'transport.
Checkthevalueoftheproperty'dds.transport.use_510_compatible_locator_kinds'inthelocalparticipant.
Seehttps://community.rti.com/kb/what-causes-error-discovered-remote-participantforadditionalinfo.

Language: unknown
<participant_qos><property><value><element><name>dds.transport.use_510_compatible_locator_kinds</name><value>1</value></element></value></property></participant_qos>
