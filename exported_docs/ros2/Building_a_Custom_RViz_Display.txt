Title: Building a Custom RViz Display
URL: https://docs.ros.org/en/jazzy/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.html
Section: Installation
--------------------------------------------------------------------------------

Building a Custom RViz DisplayBackgroundThere are many types of data that have existing visualizations in RViz. However, if there is a message type that does
not yet have a plugin to display it, there are two choices to see it in RViz.Convert the message to another type, such asvisualization_msgs/Marker.Write a Custom RViz Display.With the first option, there is more network traffic and limitations to how the data can be represented. It is also quick and flexible.
The latter option is explained in this tutorial. It takes a bit of work, but can lead to much richer visualizations.All of the code for this tutorial can be found inthis repository.
In order to see the incremental progress of the plugin written in this tutorial,
the repository has different branches (step2,step3…) that can each be compiled and run as you go.Point2D MessageWe’ll be playing with a toy message defined in therviz_plugin_tutorial_msgspackage:Point2D.msg:std_msgs/Headerheaderfloat64xfloat64yBoilerplate for Basic PluginStrap in, there’s a lot of code.
You can view the full version of this code with the branch namestep1.Header FileHere are the contents ofpoint_display.hpp#ifndef RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_#define RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_#include<rviz_common/message_filter_display.hpp>#include<rviz_plugin_tutorial_msgs/msg/point2_d.hpp>namespacerviz_plugin_tutorial{classPointDisplay:publicrviz_common::MessageFilterDisplay<rviz_plugin_tutorial_msgs::msg::Point2D>{Q_OBJECTprotected:voidprocessMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg)override;};}// namespace rviz_plugin_tutorial#endif// RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_We’re implementing theMessageFilterDisplayclass which can be used with any message with astd_msgs/Header.The class is templated with ourPoint2Dmessage type.For reasons outside the scope of this tutorial, you need theQ_OBJECTmacro in there to get the QT parts of the GUI to work.processMessageis the only method that needs to be implemented, which we’ll do in the cpp file.Source Filepoint_display.cpp#include<rviz_plugin_tutorial/point_display.hpp>#include<rviz_common/logging.hpp>namespacerviz_plugin_tutorial{voidPointDisplay::processMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg){RVIZ_COMMON_LOG_INFO_STREAM("We got a message with frame "<<msg->header.frame_id);}}// namespace rviz_plugin_tutorial#include<pluginlib/class_list_macros.hpp>PLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorial::PointDisplay,rviz_common::Display)The logging is not strictly necessary, but helps with debugging.In order for RViz to find our plugin, we need thisPLUGINLIBinvocation in our code (as well as other things below).package.xmlWe need the following three dependencies in our package.xml:<depend>pluginlib</depend><depend>rviz_common</depend><depend>rviz_plugin_tutorial_msgs</depend>rviz_common_plugins.xml<librarypath="point_display"><classtype="rviz_plugin_tutorial::PointDisplay"base_class_type="rviz_common::Display"><description></description></class></library>This is standardpluginlibcode.The librarypathis the name of the library we’ll assign in the CMake.The class should match thePLUGINLIBinvocation from above.We’ll come back to the description later, I promise.CMakeLists.txtAdd the following lines to the top of the standard boilerplate.find_package(ament_cmake_rosREQUIRED)find_package(pluginlibREQUIRED)find_package(rviz_commonREQUIRED)find_package(rviz_plugin_tutorial_msgsREQUIRED)set(CMAKE_AUTOMOCON)qt5_wrap_cpp(MOC_FILESinclude/rviz_plugin_tutorial/point_display.hpp)add_library(point_displaysrc/point_display.cpp${MOC_FILES})target_include_directories(point_displayPUBLIC$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>$<INSTALL_INTERFACE:include>)ament_target_dependencies(point_displaypluginlibrviz_commonrviz_plugin_tutorial_msgs)install(TARGETSpoint_displayEXPORTexport_rviz_plugin_tutorialARCHIVEDESTINATIONlibLIBRARYDESTINATIONlibRUNTIMEDESTINATIONbin)install(DIRECTORYinclude/DESTINATIONinclude)install(FILESrviz_common_plugins.xmlDESTINATIONshare/${PROJECT_NAME})ament_export_include_directories(include)ament_export_targets(export_rviz_plugin_tutorial)pluginlib_export_plugin_description_file(rviz_commonrviz_common_plugins.xml)To generate the proper Qt files, we need toTurnCMAKE_AUTOMOCon.Wrap the headers by callingqt5_wrap_cppwith each header that hasQ_OBJECTin it.Include theMOC_FILESin the library alongside our other cpp files.Note that if you do NOT wrap your header files, you may get an error message when attempting to load the plugin at runtime, along the lines of:[rviz2]: PluginlibFactory: The plugin for class 'rviz_plugin_tutorial::PointDisplay' failed to load. Error: Failed to load library /home/ros/ros2_ws/install/rviz_plugin_tutorial/lib/libpoint_display.so. Make sure that you are calling the PLUGINLIB_EXPORT_CLASS macro in the library code, and that names are consistent between this macro and your XML. Error string: Could not load library LoadLibrary error: /home/ros/ros2_ws/install/rviz_plugin_tutorial/lib/libpoint_display.so: undefined symbol: _ZTVN20rviz_plugin_tutorial12PointDisplayE, at /tmp/binarydeb/ros-foxy-rcutils-1.1.4/src/shared_library.c:84A lot of the other code ensures that the plugin portion works.
Namely, callingpluginlib_export_plugin_description_fileis essential to getting RViz to find your new plugin.Testing it outCompile your code and runrviz2.
You should be able to add your new plugin by clickingAddin the bottom left, and then selecting your package/plugin.Initially, the display will be in an error state because you have yet to assign a topic.If we put the topic/pointin, it should load fine but not display anything.You can publish messages with the following command:ros2topicpub/pointrviz_plugin_tutorial_msgs/msg/Point2D"{header: {frame_id: map}, x: 1, y: 2}"-r0.5That should result in the “We got a message” logging to appear in thestdoutof RViz.Actual VisualizationYou can view the full version of this step with the branch namestep2.First, you need to add a dependency inCMakeLists.txtandpackage.xmlon the packagerviz_rendering.We need to add three lines to the header file:#include<rviz_rendering/objects/shape.hpp>- There’slots of options in the rviz_rendering packagefor objects to build your visualization on. Here we’re using a simple shape.In the class, we’ll add a newprotectedvirtual method:voidonInitialize()override;We also add a pointer to our shape object:std::unique_ptr<rviz_rendering::Shape>point_shape_;Then in the cpp file, we define theonInitializemethod:voidPointDisplay::onInitialize(){MFDClass::onInitialize();point_shape_=std::make_unique<rviz_rendering::Shape>(rviz_rendering::Shape::Type::Cube,scene_manager_,scene_node_);}MFDClassisaliasedto the templated parent class for convenience.The shape object must be constructed here in theonInitializemethod rather than the constructor because otherwisescene_manager_andscene_node_would not be ready.We also update ourprocessMessagemethod:voidPointDisplay::processMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg){RVIZ_COMMON_LOG_INFO_STREAM("We got a message with frame "<<msg->header.frame_id);Ogre::Vector3position;Ogre::Quaternionorientation;if(!context_->getFrameManager()->getTransform(msg->header,position,orientation)){RVIZ_COMMON_LOG_DEBUG_STREAM("Error transforming from frame '"<<msg->header.frame_id<<"' to frame '"<<qPrintable(fixed_frame_)<<"'");}scene_node_->setPosition(position);scene_node_->setOrientation(orientation);Ogre::Vector3point_pos;point_pos.x=msg->x;point_pos.y=msg->y;point_shape_->setPosition(point_pos);}We need to get the proper frame for our message and transform thescene_node_accordingly.
This ensures that the visualization does not always appear relative to the fixed frame.The actual visualization that we’ve been building up to is in the last four lines: we set the position of the visualization to match the message’s position.The result should look like this:If the box does not appear in that location, it might be because:You are not publishing the topic at this timeThe message hasn’t been published in the last 2 seconds.You did not properly set the topic in RViz.It’s Nice to Have Options.If you want to allow users to customize different properties of the visualization, you need to addrviz_common::Property objects.You can view the full version of this step with the branch namestep3.Header UpdatesInclude the header file for color properties:#include<rviz_common/properties/color_property.hpp>.
Color is but one of many properties you can set.Add in the prototype forupdateStyle, which is called whenever the GUI is changed via Qt’s SIGNAL/SLOT framework:privateQ_SLOTS:voidupdateStyle();Add in a new property to store the property itself:std::unique_ptr<rviz_common::properties::ColorProperty>color_property_;Cpp Updates#include<rviz_common/properties/parse_color.hpp>- Contains helper function to convert property to OGRE color.To ouronInitializewe addcolor_property_=std::make_unique<rviz_common::properties::ColorProperty>("Point Color",QColor(36,64,142),"Color to draw the point.",this,SLOT(updateStyle()));updateStyle();This constructs the object with its name, default value, description and the callback.We callupdateStyledirectly so that the color is set at the beginning even before the property is changed.Then we define the callback.voidPointDisplay::updateStyle(){Ogre::ColourValuecolor=rviz_common::properties::qtToOgre(color_property_->getColor());point_shape_->setColor(color);}The result should look like this:Ooh, pink!Status ReportYou can view the full version of this step with the branch namestep4.You can also set the status of the display.
As an arbitrary example, let’s make our display show a warning when the x coordinate is negative, because why not?
InprocessMessage:if(msg->x<0){setStatus(StatusProperty::Warn,"Message","I will complain about points with negative x values.");}else{setStatus(StatusProperty::Ok,"Message","OK");}We’re assuming a previoususingrviz_common::properties::StatusProperty;declaration.Think of the status as Key/Value pairs, with the key being some string (here we’re using"Message") and the values are the status level (error/warn/ok) and the description (some other string).CleanupNow its time to clean it up a bit.
This makes things look nicer and be a little easier to use, but aren’t strictly required.
You can view the full version of this step with the branch namestep5.First, we update the plugin declaration.<librarypath="point_display"><classname="Point2D"type="rviz_plugin_tutorial::PointDisplay"base_class_type="rviz_common::Display"><description>Tutorialtodisplayapoint</description><message_type>rviz_plugin_tutorial_msgs/msg/Point2D</message_type></class></library>We add thenamefield to theclasstag.
This changes the name that is displayed in RViz.
In code, it makes sense to call it aPointDisplaybut in RViz, we want to simplify.We put actual text into the description. Don’t be lazy.By declaring the specific message type here, when you attempt to add a Display by Topic, it will suggest this plugin for the topics of that type.We also add an icon for the plugin aticons/classes/Point2D.png.
The folder is hardcoded, and the filename should match the name from the plugin declaration (or the name of the class if not specified).[icon source]We need to install the image file in the CMake.install(FILESicons/classes/Point2D.pngDESTINATIONshare/${PROJECT_NAME}/icons/classes)Now when you add the display, it should show up with an icon and description.Here is the display when attempting to add by topic:And finally, here’s the icon in the standard interface:Note, if you change the plugins name, previous RViz configurations will no longer work.

Code Examples:

Language: unknown
std_msgs/Headerheaderfloat64xfloat64y

Language: unknown
#ifndef RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_#define RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_#include<rviz_common/message_filter_display.hpp>#include<rviz_plugin_tutorial_msgs/msg/point2_d.hpp>namespacerviz_plugin_tutorial{classPointDisplay:publicrviz_common::MessageFilterDisplay<rviz_plugin_tutorial_msgs::msg::Point2D>{Q_OBJECTprotected:voidprocessMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg)override;};}// namespace rviz_plugin_tutorial#endif// RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_

Language: unknown
#include<rviz_plugin_tutorial/point_display.hpp>#include<rviz_common/logging.hpp>namespacerviz_plugin_tutorial{voidPointDisplay::processMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg){RVIZ_COMMON_LOG_INFO_STREAM("We got a message with frame "<<msg->header.frame_id);}}// namespace rviz_plugin_tutorial#include<pluginlib/class_list_macros.hpp>PLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorial::PointDisplay,rviz_common::Display)

Language: unknown
<depend>pluginlib</depend><depend>rviz_common</depend><depend>rviz_plugin_tutorial_msgs</depend>

Language: unknown
<librarypath="point_display"><classtype="rviz_plugin_tutorial::PointDisplay"base_class_type="rviz_common::Display"><description></description></class></library>

Language: unknown
find_package(ament_cmake_rosREQUIRED)find_package(pluginlibREQUIRED)find_package(rviz_commonREQUIRED)find_package(rviz_plugin_tutorial_msgsREQUIRED)set(CMAKE_AUTOMOCON)qt5_wrap_cpp(MOC_FILESinclude/rviz_plugin_tutorial/point_display.hpp)add_library(point_displaysrc/point_display.cpp${MOC_FILES})target_include_directories(point_displayPUBLIC$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>$<INSTALL_INTERFACE:include>)ament_target_dependencies(point_displaypluginlibrviz_commonrviz_plugin_tutorial_msgs)install(TARGETSpoint_displayEXPORTexport_rviz_plugin_tutorialARCHIVEDESTINATIONlibLIBRARYDESTINATIONlibRUNTIMEDESTINATIONbin)install(DIRECTORYinclude/DESTINATIONinclude)install(FILESrviz_common_plugins.xmlDESTINATIONshare/${PROJECT_NAME})ament_export_include_directories(include)ament_export_targets(export_rviz_plugin_tutorial)pluginlib_export_plugin_description_file(rviz_commonrviz_common_plugins.xml)

Language: unknown
[rviz2]: PluginlibFactory: The plugin for class 'rviz_plugin_tutorial::PointDisplay' failed to load. Error: Failed to load library /home/ros/ros2_ws/install/rviz_plugin_tutorial/lib/libpoint_display.so. Make sure that you are calling the PLUGINLIB_EXPORT_CLASS macro in the library code, and that names are consistent between this macro and your XML. Error string: Could not load library LoadLibrary error: /home/ros/ros2_ws/install/rviz_plugin_tutorial/lib/libpoint_display.so: undefined symbol: _ZTVN20rviz_plugin_tutorial12PointDisplayE, at /tmp/binarydeb/ros-foxy-rcutils-1.1.4/src/shared_library.c:84

Language: unknown
ros2topicpub/pointrviz_plugin_tutorial_msgs/msg/Point2D"{header: {frame_id: map}, x: 1, y: 2}"-r0.5

Language: unknown
voidPointDisplay::onInitialize(){MFDClass::onInitialize();point_shape_=std::make_unique<rviz_rendering::Shape>(rviz_rendering::Shape::Type::Cube,scene_manager_,scene_node_);}

Language: unknown
voidPointDisplay::processMessage(constrviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtrmsg){RVIZ_COMMON_LOG_INFO_STREAM("We got a message with frame "<<msg->header.frame_id);Ogre::Vector3position;Ogre::Quaternionorientation;if(!context_->getFrameManager()->getTransform(msg->header,position,orientation)){RVIZ_COMMON_LOG_DEBUG_STREAM("Error transforming from frame '"<<msg->header.frame_id<<"' to frame '"<<qPrintable(fixed_frame_)<<"'");}scene_node_->setPosition(position);scene_node_->setOrientation(orientation);Ogre::Vector3point_pos;point_pos.x=msg->x;point_pos.y=msg->y;point_shape_->setPosition(point_pos);}

Language: unknown
privateQ_SLOTS:voidupdateStyle();

Language: unknown
color_property_=std::make_unique<rviz_common::properties::ColorProperty>("Point Color",QColor(36,64,142),"Color to draw the point.",this,SLOT(updateStyle()));updateStyle();

Language: unknown
voidPointDisplay::updateStyle(){Ogre::ColourValuecolor=rviz_common::properties::qtToOgre(color_property_->getColor());point_shape_->setColor(color);}

Language: unknown
if(msg->x<0){setStatus(StatusProperty::Warn,"Message","I will complain about points with negative x values.");}else{setStatus(StatusProperty::Ok,"Message","OK");}

Language: unknown
<librarypath="point_display"><classname="Point2D"type="rviz_plugin_tutorial::PointDisplay"base_class_type="rviz_common::Display"><description>Tutorialtodisplayapoint</description><message_type>rviz_plugin_tutorial_msgs/msg/Point2D</message_type></class></library>

Language: unknown
install(FILESicons/classes/Point2D.pngDESTINATIONshare/${PROJECT_NAME}/icons/classes)
