Title: Recording a bag from a node (C++)
URL: https://docs.ros.org/en/jazzy/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.html
Section: Installation
--------------------------------------------------------------------------------

Recording a bag from a node (C++)Goal:Record data from your own C++ node to a bag.Tutorial level:AdvancedTime:20 minutesContentsBackgroundPrerequisitesTasks1 Create a package2 Write the C++ node3 Build and run4 Record synthetic data from a node5 Record synthetic data from an executableSummaryBackgroundrosbag2doesn’t just provide theros2bagcommand line tool.
It also provides a C++ API for reading from and writing to a bag from your own source code.
This allows you to subscribe to a topic and save the received data to a bag at the same time as performing any other processing of your choice on that data.PrerequisitesYou should have therosbag2packages installed as part of your regular ROS 2 setup.If you’ve installed from deb packages on Linux, it may be installed by default.
If it is not, you can install it using this command.sudo apt install ros-jazzy-rosbag2This tutorial discusses using ROS 2 bags, including from the terminal.
You should have already completed thebasic ROS 2 bag tutorial.Tasks1 Create a packageOpen a new terminal andsource your ROS 2 installationso thatros2commands will work.Navigate into theros2_wsdirectory created in aprevious tutorial.
Navigate into theros2_ws/srcdirectory and create a new package:ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_recorder_nodes --dependencies example_interfaces rclcpp rosbag2_cpp std_msgsYour terminal will return a message verifying the creation of your packagebag_recorder_nodesand all its necessary files and folders.
The--dependenciesargument will automatically add the necessary dependency lines topackage.xmlandCMakeLists.txt.
In this case, the package will use therosbag2_cpppackage as well as therclcpppackage.
A dependency on theexample_interfacespackage is also required for later parts of this tutorial.1.1 Updatepackage.xmlBecause you used the--dependenciesoption during package creation, you don’t have to manually add dependencies topackage.xmlorCMakeLists.txt.
As always, though, make sure to add the description, maintainer email and name, and license information topackage.xml.<description>C++bagwritingtutorial</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>2 Write the C++ nodeInside theros2_ws/src/bag_recorder_nodes/srcdirectory, create a new file calledsimple_bag_recorder.cppand paste the following code into it.#include<rclcpp/rclcpp.hpp>#include<std_msgs/msg/string.hpp>#include<rosbag2_cpp/writer.hpp>classSimpleBagRecorder:publicrclcpp::Node{public:SimpleBagRecorder():Node("simple_bag_recorder"){writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("my_bag");autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){rclcpp::Timetime_stamp=this->now();writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);};subscription_=create_subscription<std_msgs::msg::String>("chatter",10,subscription_callback_lambda);}private:rclcpp::Subscription<std_msgs::msg::String>::SharedPtrsubscription_;std::unique_ptr<rosbag2_cpp::Writer>writer_;};intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<SimpleBagRecorder>());rclcpp::shutdown();return0;}2.1 Examine the codeThe#includestatements at the top are the package dependencies.
Note the inclusion of headers from therosbag2_cpppackage for the functions and structures necessary to work with bag files.In the class constructor we begin by creating the writer object we will use to write to the bag.writer_=std::make_unique<rosbag2_cpp::Writer>();Now that we have a writer object, we can open the bag using it.
We specify just the URI of the bag to create, leaving other options at their defaults.
The default storage options are used, which means that anmcap-format bag will be created.
The default conversion options are used, too, which will perform no conversion, instead storing messages in the serialisation format they are received in.writer_->open("my_bag");With the writer now set up to record data we pass to it, we create a subscription and specify a callback for it.
We will write data to the bag in the callback.autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){rclcpp::Timetime_stamp=this->now();writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);};subscription_=create_subscription<std_msgs::msg::String>("chatter",10,subscription_callback_lambda);The callback itself is different from a typical callback.
Rather than receiving an instance of the data type of the topic, we instead receive arclcpp::SerializedMessage.
We do this for two reasons.The message data will need to be serialized byrosbag2before being written to the bag, so rather than unserializing it when receiving the data and then re-serializing it, we ask ROS to just give us the serialized message as-is.The writer API can accept a serialized message.autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){Within the subscription callback, the first thing to do is determine the time stamp to use for the stored message.
This can be anything appropriate to your data, but two common values are the time at which the data was produced, if known, and the time it is received.
The second option, the time of reception, is used here.rclcpp::Timetime_stamp=this->now();We can then write the message into the bag.
Because we have not yet registered any topics with the bag, we must specify the full topic information with the message.
This is why we pass in the topic name and the topic type.writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);The class contains two member variables.The subscription object.A managed pointer to the writer object used to write to the bag.
Note the type of writer used here is therosbag2_cpp::Writer, the generic writer interface.
Other writers may be available with different behaviours.rclcpp::Subscription<std_msgs::msg::String>::SharedPtrsubscription_;std::unique_ptr<rosbag2_cpp::Writer>writer_;The file finishes with themainfunction used to create an instance of the node and start ROS processing it.intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<SimpleBagRecorder>());rclcpp::shutdown();return0;}2.2 Add executableNow open theCMakeLists.txtfile.Near the top of the file, changeCMAKE_CXX_STANDARDfrom14to17.#DefaulttoC++17if(NOT CMAKE_CXX_STANDARD)set(CMAKE_CXX_STANDARD 17)endif()Below the dependencies block, which containsfind_package(rosbag2_cppREQUIRED), add the following lines of code.add_executable(simple_bag_recorder src/simple_bag_recorder.cpp)ament_target_dependencies(simple_bag_recorder rclcpp rosbag2_cpp std_msgs)install(TARGETSsimple_bag_recorderDESTINATION lib/${PROJECT_NAME})3 Build and runNavigate back to the root of your workspace,ros2_ws, and build your new package.LinuxmacOSWindowscolcon build --packages-select bag_recorder_nodescolcon build --packages-select bag_recorder_nodescolcon build --merge-install --packages-select bag_recorder_nodesOpen a new terminal, navigate toros2_ws, and source the setup files.LinuxmacOSWindowssource install/setup.bashsource install/setup.bashcall install/setup.batNow run the node:ros2 run bag_recorder_nodes simple_bag_recorderOpen a second terminal and run thetalkerexample node.ros2 run demo_nodes_cpp talkerThis will start publishing data on thechattertopic.
As the bag-writing node receives this data, it will write it to themy_bagbag.Terminate both nodes.
Then, in one terminal start thelistenerexample node.ros2 run demo_nodes_cpp listenerIn the other terminal, useros2bagto play the bag recorded by your node.ros2 bag play my_bagYou will see the messages from the bag being received by thelistenernode.If you wish to run the bag-writing node again, you will first need to delete themy_bagdirectory.4 Record synthetic data from a nodeAny data can be recorded into a bag, not just data received over a topic.
A common use case for writing to a bag from your own node is to generate and store synthetic data.
In this section you will learn how to write a node that generates some data and stores it in a bag.
We will demonstrate two approaches for doing this.
The first uses a node with a timer; this is the approach that you would use if your data generation is external to the node, such as reading data directly from hardware (e.g. a camera).
The second approach does not use a node; this is the approach you can use when you do not need to use any functionality from the ROS infrastructure.4.1 Write a C++ nodeInside theros2_ws/src/bag_recorder_nodes/srcdirectory, create a new file calleddata_generator_node.cppand paste the following code into it.#include<chrono>#include<example_interfaces/msg/int32.hpp>#include<rclcpp/rclcpp.hpp>#include<rosbag2_cpp/writer.hpp>usingnamespacestd::chrono_literals;classDataGenerator:publicrclcpp::Node{public:DataGenerator():Node("data_generator"){data_.data=0;writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("timed_synthetic_bag");writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});autotimer_callback_lambda=[this](){returnthis->timer_callback();};timer_=create_wall_timer(1s,timer_callback_lambda);}private:voidtimer_callback(){writer_->write(data_,"synthetic",now());++data_.data;}rclcpp::TimerBase::SharedPtrtimer_;std::unique_ptr<rosbag2_cpp::Writer>writer_;example_interfaces::msg::Int32data_;};intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<DataGenerator>());rclcpp::shutdown();return0;}4.2 Examine the codeMuch of this code is the same as the first example.
The important differences are described here.First, the name of the bag is changed.writer_->open("timed_synthetic_bag");In this example we are registering the topic with the bag in advance.
This is optional in most cases, but it must be done when passing in a serialized message without topic information.writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});Rather than a subscription to a topic, this node has a timer.
The timer fires with a one-second period, and calls the given member function when it does.autotimer_callback_lambda=[this](){returnthis->timer_callback();};timer_=create_wall_timer(1s,timer_callback_lambda);Within the timer callback, we generate (or otherwise obtain, e.g. read from a serial port connected to some hardware) the data we wish to store in the bag.
The important difference between this and the previous sample is that the data is not yet serialized.
Instead we are passing a ROS message data type to the writer object, in this case an instance ofexample_interfaces/msg/Int32.
The writer will serialize the data for us before writing it into the bag.writer_->write(data_,"synthetic",now());4.3 Add executableOpen theCMakeLists.txtfile and add the following lines after the previously-added lines (specifically, after theinstall(TARGETS...)macro call).add_executable(data_generator_node src/data_generator_node.cpp)ament_target_dependencies(data_generator_node rclcpp rosbag2_cpp example_interfaces)install(TARGETSdata_generator_nodeDESTINATION lib/${PROJECT_NAME})4.4 Build and runNavigate back to the root of your workspace,ros2_ws, and build your package.LinuxmacOSWindowscolcon build --packages-select bag_recorder_nodescolcon build --packages-select bag_recorder_nodescolcon build --merge-install --packages-select bag_recorder_nodesOpen a new terminal, navigate toros2_ws, and source the setup files.LinuxmacOSWindowssource install/setup.bashsource install/setup.bashcall install/setup.bat(If thetimed_synthetic_bagdirectory already exists, you must first delete it before running the node.)Now run the node:ros2 run bag_recorder_nodes data_generator_nodeWait for 30 seconds or so, then terminate the node withctrl-c.
Next, play back the created bag.ros2 bag play timed_synthetic_bagOpen a second terminal and echo the/synthetictopic.ros2 topic echo /syntheticYou will see the data that was generated and stored in the bag printed to the console at a rate of one message per second.5 Record synthetic data from an executableNow that you can create a bag that stores data from a source other than a topic, you will learn how to generate and record synthetic data from a non-node executable.
The advantage of this approach is simpler code and rapid creation of a large quantity of data.5.1 Write a C++ executableInside theros2_ws/src/bag_recorder_nodes/srcdirectory, create a new file calleddata_generator_executable.cppand paste the following code into it.#include<chrono>#include<rclcpp/rclcpp.hpp>// For rclcpp::Clock, rclcpp::Duration and rclcpp::Time#include<example_interfaces/msg/int32.hpp>#include<rosbag2_cpp/writer.hpp>#include<rosbag2_cpp/writers/sequential_writer.hpp>#include<rosbag2_storage/serialized_bag_message.hpp>usingnamespacestd::chrono_literals;intmain(int,char**){example_interfaces::msg::Int32data;data.data=0;std::unique_ptr<rosbag2_cpp::Writer>writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("big_synthetic_bag");writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});rclcpp::Clockclock;rclcpp::Timetime_stamp=clock.now();for(int32_tii=0;ii<100;++ii){writer_->write(data,"synthetic",time_stamp);++data.data;time_stamp+=rclcpp::Duration(1s);}return0;}5.2 Examine the codeA comparison of this sample and the previous sample will reveal that they are not that different.
The only significant difference is the use of a for loop to drive the data generation rather than a timer.Notice that we are also now generating time stamps for the data rather than relying on the current system time for each sample.
The time stamp can be any value you need it to be.
The data will be played back at the rate given by these time stamps, so this is a useful way to control the default playback speed of the samples.
Notice also that while the gap between each sample is a full second in time, this executable does not need to wait a second between each sample.
This allows us to generate a lot of data covering a wide span of time in much less time than playback will take.rclcpp::Clockclock;rclcpp::Timetime_stamp=clock.now();for(int32_tii=0;ii<100;++ii){writer_->write(data,"synthetic",time_stamp);++data.data;time_stamp+=rclcpp::Duration(1s);}5.3 Add executableOpen theCMakeLists.txtfile and add the following lines after the previously-added lines.add_executable(data_generator_executable src/data_generator_executable.cpp)ament_target_dependencies(data_generator_executable rclcpp rosbag2_cpp example_interfaces)install(TARGETSdata_generator_executableDESTINATION lib/${PROJECT_NAME})5.4 Build and runNavigate back to the root of your workspace,ros2_ws, and build your package.LinuxmacOSWindowscolcon build --packages-select bag_recorder_nodescolcon build --packages-select bag_recorder_nodescolcon build --merge-install --packages-select bag_recorder_nodesOpen a terminal, navigate toros2_ws, and source the setup files.LinuxmacOSWindowssource install/setup.bashsource install/setup.bashcall install/setup.bat(If thebig_synthetic_bagdirectory already exists, you must first delete it before running the executable.)Now run the executable:ros2 run bag_recorder_nodes data_generator_executableNote that the executable runs and finishes very quickly.Now play back the created bag.ros2 bag play big_synthetic_bagOpen a second terminal and echo the/synthetictopic.ros2 topic echo /syntheticYou will see the data that was generated and stored in the bag printed to the console at a rate of one message per second.
Even though the bag was generated rapidly it is still played back at the rate the time stamps indicate.SummaryYou created a node that records data it receives on a topic into a bag.
You tested recording a bag using the node, and verified the data was recorded by playing back the bag.
You then went on to create a node and an executable to generate synthetic data and store it in a bag.

Code Examples:

Language: unknown
sudo apt install ros-jazzy-rosbag2

Language: unknown
ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_recorder_nodes --dependencies example_interfaces rclcpp rosbag2_cpp std_msgs

Language: unknown
<description>C++bagwritingtutorial</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>

Language: unknown
#include<rclcpp/rclcpp.hpp>#include<std_msgs/msg/string.hpp>#include<rosbag2_cpp/writer.hpp>classSimpleBagRecorder:publicrclcpp::Node{public:SimpleBagRecorder():Node("simple_bag_recorder"){writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("my_bag");autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){rclcpp::Timetime_stamp=this->now();writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);};subscription_=create_subscription<std_msgs::msg::String>("chatter",10,subscription_callback_lambda);}private:rclcpp::Subscription<std_msgs::msg::String>::SharedPtrsubscription_;std::unique_ptr<rosbag2_cpp::Writer>writer_;};intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<SimpleBagRecorder>());rclcpp::shutdown();return0;}

Language: unknown
writer_=std::make_unique<rosbag2_cpp::Writer>();

Language: unknown
writer_->open("my_bag");

Language: unknown
autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){rclcpp::Timetime_stamp=this->now();writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);};subscription_=create_subscription<std_msgs::msg::String>("chatter",10,subscription_callback_lambda);

Language: unknown
autosubscription_callback_lambda=[this](std::shared_ptr<rclcpp::SerializedMessage>msg){

Language: unknown
rclcpp::Timetime_stamp=this->now();

Language: unknown
writer_->write(msg,"chatter","std_msgs/msg/String",time_stamp);

Language: unknown
rclcpp::Subscription<std_msgs::msg::String>::SharedPtrsubscription_;std::unique_ptr<rosbag2_cpp::Writer>writer_;

Language: unknown
intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<SimpleBagRecorder>());rclcpp::shutdown();return0;}

Language: unknown
#DefaulttoC++17if(NOT CMAKE_CXX_STANDARD)set(CMAKE_CXX_STANDARD 17)endif()

Language: unknown
add_executable(simple_bag_recorder src/simple_bag_recorder.cpp)ament_target_dependencies(simple_bag_recorder rclcpp rosbag2_cpp std_msgs)install(TARGETSsimple_bag_recorderDESTINATION lib/${PROJECT_NAME})

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --merge-install --packages-select bag_recorder_nodes

Language: unknown
source install/setup.bash

Language: unknown
source install/setup.bash

Language: unknown
call install/setup.bat

Language: unknown
ros2 run bag_recorder_nodes simple_bag_recorder

Language: unknown
ros2 run demo_nodes_cpp talker

Language: unknown
ros2 run demo_nodes_cpp listener

Language: unknown
ros2 bag play my_bag

Language: unknown
#include<chrono>#include<example_interfaces/msg/int32.hpp>#include<rclcpp/rclcpp.hpp>#include<rosbag2_cpp/writer.hpp>usingnamespacestd::chrono_literals;classDataGenerator:publicrclcpp::Node{public:DataGenerator():Node("data_generator"){data_.data=0;writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("timed_synthetic_bag");writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});autotimer_callback_lambda=[this](){returnthis->timer_callback();};timer_=create_wall_timer(1s,timer_callback_lambda);}private:voidtimer_callback(){writer_->write(data_,"synthetic",now());++data_.data;}rclcpp::TimerBase::SharedPtrtimer_;std::unique_ptr<rosbag2_cpp::Writer>writer_;example_interfaces::msg::Int32data_;};intmain(intargc,char*argv[]){rclcpp::init(argc,argv);rclcpp::spin(std::make_shared<DataGenerator>());rclcpp::shutdown();return0;}

Language: unknown
writer_->open("timed_synthetic_bag");

Language: unknown
writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});

Language: unknown
autotimer_callback_lambda=[this](){returnthis->timer_callback();};timer_=create_wall_timer(1s,timer_callback_lambda);

Language: unknown
writer_->write(data_,"synthetic",now());

Language: unknown
add_executable(data_generator_node src/data_generator_node.cpp)ament_target_dependencies(data_generator_node rclcpp rosbag2_cpp example_interfaces)install(TARGETSdata_generator_nodeDESTINATION lib/${PROJECT_NAME})

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --merge-install --packages-select bag_recorder_nodes

Language: unknown
source install/setup.bash

Language: unknown
source install/setup.bash

Language: unknown
call install/setup.bat

Language: unknown
ros2 run bag_recorder_nodes data_generator_node

Language: unknown
ros2 bag play timed_synthetic_bag

Language: unknown
ros2 topic echo /synthetic

Language: unknown
#include<chrono>#include<rclcpp/rclcpp.hpp>// For rclcpp::Clock, rclcpp::Duration and rclcpp::Time#include<example_interfaces/msg/int32.hpp>#include<rosbag2_cpp/writer.hpp>#include<rosbag2_cpp/writers/sequential_writer.hpp>#include<rosbag2_storage/serialized_bag_message.hpp>usingnamespacestd::chrono_literals;intmain(int,char**){example_interfaces::msg::Int32data;data.data=0;std::unique_ptr<rosbag2_cpp::Writer>writer_=std::make_unique<rosbag2_cpp::Writer>();writer_->open("big_synthetic_bag");writer_->create_topic({0u,"synthetic","example_interfaces/msg/Int32",rmw_get_serialization_format(),{},"",});rclcpp::Clockclock;rclcpp::Timetime_stamp=clock.now();for(int32_tii=0;ii<100;++ii){writer_->write(data,"synthetic",time_stamp);++data.data;time_stamp+=rclcpp::Duration(1s);}return0;}

Language: unknown
rclcpp::Clockclock;rclcpp::Timetime_stamp=clock.now();for(int32_tii=0;ii<100;++ii){writer_->write(data,"synthetic",time_stamp);++data.data;time_stamp+=rclcpp::Duration(1s);}

Language: unknown
add_executable(data_generator_executable src/data_generator_executable.cpp)ament_target_dependencies(data_generator_executable rclcpp rosbag2_cpp example_interfaces)install(TARGETSdata_generator_executableDESTINATION lib/${PROJECT_NAME})

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --packages-select bag_recorder_nodes

Language: unknown
colcon build --merge-install --packages-select bag_recorder_nodes

Language: unknown
source install/setup.bash

Language: unknown
source install/setup.bash

Language: unknown
call install/setup.bat

Language: unknown
ros2 run bag_recorder_nodes data_generator_executable

Language: unknown
ros2 bag play big_synthetic_bag

Language: unknown
ros2 topic echo /synthetic
