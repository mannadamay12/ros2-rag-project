Title: Understanding nodes
URL: https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.html
Section: Installation
--------------------------------------------------------------------------------

Understanding nodesGoal:Learn about the function of nodes in ROS 2, and the tools to interact with them.Tutorial level:BeginnerTime:10 minutesContentsBackground1 The ROS 2 graph2 Nodes in ROS 2PrerequisitesTasks1 ros2 run2 ros2 node list3 ros2 node infoSummaryNext stepsRelated contentBackground1 The ROS 2 graphOver the next few tutorials, you will learn about a series of core ROS 2 concepts that make up what is referred to as the “ROS (2) graph”.The ROS graph is a network of ROS 2 elements processing data together at the same time.
It encompasses all executables and the connections between them if you were to map them all out and visualize them.2 Nodes in ROS 2Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder.
Each node can send and receive data from other nodes via topics, services, actions, or parameters.A full robotic system is comprised of many nodes working in concert.
In ROS 2, a single executable (C++ program, Python program, etc.) can contain one or more nodes.PrerequisitesTheprevious tutorialshows you how to install theturtlesimpackage used here.As always, don’t forget to source ROS 2 inevery new terminal you open.Tasks1 ros2 runThe commandros2runlaunches an executable from a package.ros2 run <package_name> <executable_name>To run turtlesim, open a new terminal, and enter the following command:ros2 run turtlesim turtlesim_nodeThe turtlesim window will open, as you saw in theprevious tutorial.Here, the package name isturtlesimand the executable name isturtlesim_node.We still don’t know the node name, however.
You can find node names by usingros2nodelist2 ros2 node listros2nodelistwill show you the names of all running nodes.
This is especially useful when you want to interact with a node, or when you have a system running many nodes and need to keep track of them.Open a new terminal while turtlesim is still running in the other one, and enter the following command:ros2 node listThe terminal will return the node name:/turtlesimOpen another new terminal and start the teleop node with the command:ros2 run turtlesim turtle_teleop_keyHere, we are referring to theturtlesimpackage again, but this time we target the executable namedturtle_teleop_key.Return to the terminal where you ranros2nodelistand run it again.
You will now see the names of two active nodes:/turtlesim/teleop_turtle2.1 RemappingRemappingallows you to reassign default node properties, like node name, topic names, service names, etc., to custom values.
In the last tutorial, you used remapping onturtle_teleop_keyto change the cmd_vel topic and targetturtle2.Now, let’s reassign the name of our/turtlesimnode.
In a new terminal, run the following command:ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtleSince you’re callingros2runon turtlesim again, another turtlesim window will open.
However, now if you return to the terminal where you ranros2nodelist, and run it again, you will see three node names:/my_turtle/turtlesim/teleop_turtle3 ros2 node infoNow that you know the names of your nodes, you can access more information about them with:ros2 node info <node_name>To examine your latest node,my_turtle, run the following command:ros2 node info /my_turtleros2nodeinforeturns a list of subscribers, publishers, services, and actions. i.e. the ROS graph connections that interact with that node.
The output should look like this:/my_turtleSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEvent/turtle1/cmd_vel: geometry_msgs/msg/TwistPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/color_sensor: turtlesim/msg/Color/turtle1/pose: turtlesim/msg/PoseService Servers:/clear: std_srvs/srv/Empty/kill: turtlesim/srv/Kill/my_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters/my_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/my_turtle/get_parameters: rcl_interfaces/srv/GetParameters/my_turtle/list_parameters: rcl_interfaces/srv/ListParameters/my_turtle/set_parameters: rcl_interfaces/srv/SetParameters/my_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically/reset: std_srvs/srv/Empty/spawn: turtlesim/srv/Spawn/turtle1/set_pen: turtlesim/srv/SetPen/turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute/turtle1/teleport_relative: turtlesim/srv/TeleportRelativeService Clients:Action Servers:/turtle1/rotate_absolute: turtlesim/action/RotateAbsoluteAction Clients:Now try running the same command on the/teleop_turtlenode, and see how its connections differ frommy_turtle.You will learn more about the ROS graph connection concepts including the message types in the upcoming tutorials.SummaryA node is a fundamental ROS 2 element that serves a single, modular purpose in a robotics system.In this tutorial, you utilized nodes created in theturtlesimpackage by running the executablesturtlesim_nodeandturtle_teleop_key.You learned how to useros2nodelistto discover active node names andros2nodeinfoto introspect a single node.
These tools are vital to understanding the flow of data in a complex, real-world robot system.Next stepsNow that you understand nodes in ROS 2, you can move on to thetopics tutorial.
Topics are one of the communication types that connects nodes.Related contentTheConceptspage adds some more detail to the concept of nodes.

Code Examples:

Language: unknown
ros2 run <package_name> <executable_name>

Language: unknown
ros2 run turtlesim turtlesim_node

Language: unknown
ros2 node list

Language: unknown
/turtlesim

Language: unknown
ros2 run turtlesim turtle_teleop_key

Language: unknown
/turtlesim/teleop_turtle

Language: unknown
ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle

Language: unknown
/my_turtle/turtlesim/teleop_turtle

Language: unknown
ros2 node info <node_name>

Language: unknown
ros2 node info /my_turtle

Language: unknown
/my_turtleSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEvent/turtle1/cmd_vel: geometry_msgs/msg/TwistPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/color_sensor: turtlesim/msg/Color/turtle1/pose: turtlesim/msg/PoseService Servers:/clear: std_srvs/srv/Empty/kill: turtlesim/srv/Kill/my_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters/my_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/my_turtle/get_parameters: rcl_interfaces/srv/GetParameters/my_turtle/list_parameters: rcl_interfaces/srv/ListParameters/my_turtle/set_parameters: rcl_interfaces/srv/SetParameters/my_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically/reset: std_srvs/srv/Empty/spawn: turtlesim/srv/Spawn/turtle1/set_pen: turtlesim/srv/SetPen/turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute/turtle1/teleport_relative: turtlesim/srv/TeleportRelativeService Clients:Action Servers:/turtle1/rotate_absolute: turtlesim/action/RotateAbsoluteAction Clients:
