Title: Understanding actions
URL: https://docs.ros.org/en/jazzy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.html
Section: Installation
--------------------------------------------------------------------------------

Understanding actionsGoal:Introspect actions in ROS 2.Tutorial level:BeginnerTime:15 minutesContentsBackgroundPrerequisitesTasks1 Setup2 Use actions3 ros2 node info4 ros2 action list5 ros2 action type6 ros2 action info7 ros2 interface show8 ros2 action send_goalSummaryNext stepsRelated contentBackgroundActions are one of the communication types in ROS 2 and are intended for long running tasks.
They consist of three parts: a goal, feedback, and a result.Actions are built on topics and services.
Their functionality is similar to services, except actions can be canceled.
They also provide steady feedback, as opposed to services which return a single response.Actions use a client-server model, similar to the publisher-subscriber model (described in thetopics tutorial).
An “action client” node sends a goal to an “action server” node that acknowledges the goal and returns a stream of feedback and a result.PrerequisitesThis tutorial builds off concepts, likenodesandtopics, covered in previous tutorials.This tutorial uses theturtlesim package.As always, don’t forget to source ROS 2 inevery new terminal you open.Tasks1 SetupStart up the two turtlesim nodes,/turtlesimand/teleop_turtle.Open a new terminal and run:ros2 run turtlesim turtlesim_nodeOpen another terminal and run:ros2 run turtlesim turtle_teleop_key2 Use actionsWhen you launch the/teleop_turtlenode, you will see the following message in your terminal:Use arrow keys to move the turtle.Use G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a rotation.Let’s focus on the second line, which corresponds to an action.
(The first instruction corresponds to the “cmd_vel” topic, discussed previously in thetopics tutorial.)Notice that the letter keysG|B|V|C|D|E|R|Tform a “box” around theFkey on a US QWERTY keyboard (if you are not using a QWERTY keyboard, seethis linkto follow along).
Each key’s position aroundFcorresponds to that orientation in turtlesim.
For example, theEwill rotate the turtle’s orientation to the upper left corner.Pay attention to the terminal where the/turtlesimnode is running.
Each time you press one of these keys, you are sending a goal to an action server that is part of the/turtlesimnode.
The goal is to rotate the turtle to face a particular direction.
A message relaying the result of the goal should display once the turtle completes its rotation:[INFO] [turtlesim]: Rotation goal completed successfullyTheFkey will cancel a goal mid-execution.Try pressing theCkey, and then pressing theFkey before the turtle can complete its rotation.
In the terminal where the/turtlesimnode is running, you will see the message:[INFO] [turtlesim]: Rotation goal canceledNot only can the client-side (your input in the teleop) stop a goal, but the server-side (the/turtlesimnode) can as well.
When the server-side chooses to stop processing a goal, it is said to “abort” the goal.Try hitting theDkey, then theGkey before the first rotation can complete.
In the terminal where the/turtlesimnode is running, you will see the message:[WARN] [turtlesim]: Rotation goal received before a previous goal finished. Aborting previous goalThis action server chose to abort the first goal because it got a new one.
It could have chosen something else, like reject the new goal or execute the second goal after the first one finished.
Don’t assume every action server will choose to abort the current goal when it gets a new one.3 ros2 node infoTo see the list of actions a node provides,/turtlesimin this case, open a new terminal and run the command:ros2 node info /turtlesimWhich will return a list of/turtlesim’s subscribers, publishers, services, action servers and action clients:/turtlesimSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEvent/turtle1/cmd_vel: geometry_msgs/msg/TwistPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/color_sensor: turtlesim/msg/Color/turtle1/pose: turtlesim/msg/PoseService Servers:/clear: std_srvs/srv/Empty/kill: turtlesim/srv/Kill/reset: std_srvs/srv/Empty/spawn: turtlesim/srv/Spawn/turtle1/set_pen: turtlesim/srv/SetPen/turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute/turtle1/teleport_relative: turtlesim/srv/TeleportRelative/turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters/turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/turtlesim/get_parameters: rcl_interfaces/srv/GetParameters/turtlesim/list_parameters: rcl_interfaces/srv/ListParameters/turtlesim/set_parameters: rcl_interfaces/srv/SetParameters/turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomicallyService Clients:Action Servers:/turtle1/rotate_absolute: turtlesim/action/RotateAbsoluteAction Clients:Notice that the/turtle1/rotate_absoluteaction for/turtlesimis underActionServers.
This means/turtlesimresponds to and provides feedback for the/turtle1/rotate_absoluteaction.The/teleop_turtlenode has the name/turtle1/rotate_absoluteunderActionClientsmeaning that it sends goals for that action name.
To see that, run:ros2 node info /teleop_turtleWhich will return:/teleop_turtleSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEventPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/cmd_vel: geometry_msgs/msg/TwistService Servers:/teleop_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters/teleop_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/teleop_turtle/get_parameters: rcl_interfaces/srv/GetParameters/teleop_turtle/list_parameters: rcl_interfaces/srv/ListParameters/teleop_turtle/set_parameters: rcl_interfaces/srv/SetParameters/teleop_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomicallyService Clients:Action Servers:Action Clients:/turtle1/rotate_absolute: turtlesim/action/RotateAbsolute4 ros2 action listTo identify all the actions in the ROS graph, run the command:ros2 action listWhich will return:/turtle1/rotate_absoluteThis is the only action in the ROS graph right now.
It controls the turtle’s rotation, as you saw earlier.
You also already know that there is one action client (part of/teleop_turtle) and one action server (part of/turtlesim) for this action from using theros2nodeinfo<node_name>command.4.1 ros2 action list -tActions have types, similar to topics and services.
To find/turtle1/rotate_absolute’s type, run the command:ros2 action list -tWhich will return:/turtle1/rotate_absolute [turtlesim/action/RotateAbsolute]In brackets to the right of each action name (in this case only/turtle1/rotate_absolute) is the action type,turtlesim/action/RotateAbsolute.
You will need this when you want to execute an action from the command line or from code.5 ros2 action typeIf you want to check the action type for the action, run the command:ros2 action type /turtle1/rotate_absoluteWhich will return:turtlesim/action/RotateAbsolute6 ros2 action infoYou can further introspect the/turtle1/rotate_absoluteaction with the command:ros2 action info /turtle1/rotate_absoluteWhich will returnAction: /turtle1/rotate_absoluteAction clients: 1/teleop_turtleAction servers: 1/turtlesimThis tells us what we learned earlier from runningros2nodeinfoon each node:
The/teleop_turtlenode has an action client and the/turtlesimnode has an action server for the/turtle1/rotate_absoluteaction.7 ros2 interface showOne more piece of information you will need before sending or executing an action goal yourself is the structure of the action type.Recall that you identified/turtle1/rotate_absolute’s type when running the commandros2actionlist-t.
Enter the following command with the action type in your terminal:ros2 interface show turtlesim/action/RotateAbsoluteWhich will return:#Thedesiredheadinginradiansfloat32 theta---#Theangulardisplacementinradianstothestartingpositionfloat32 delta---#Theremainingrotationinradiansfloat32 remainingThe section of this message above the first---is the structure (data type and name) of the goal request.
The next section is the structure of the result.
The last section is the structure of the feedback.8 ros2 action send_goalNow let’s send an action goal from the command line with the following syntax:ros2 action send_goal <action_name> <action_type> <values><values>need to be in YAML format.Keep an eye on the turtlesim window, and enter the following command into your terminal:ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.57}"You should see the turtle rotating, as well as the following message in your terminal:Waiting for an action server to become available...Sending goal:theta: 1.57Goal accepted with ID: f8db8f44410849eaa93d3feb747dd444Result:delta: -1.568000316619873Goal finished with status: SUCCEEDEDAll goals have a unique ID, shown in the return message.
You can also see the result, a field with the namedelta, which is the displacement to the starting position.To see the feedback of this goal, add--feedbackto theros2actionsend_goalcommand:ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: -1.57}" --feedbackYour terminal will return the message:Sending goal:theta: -1.57Goal accepted with ID: e6092c831f994afda92f0086f220da27Feedback:remaining: -3.1268222332000732Feedback:remaining: -3.1108222007751465…Result:delta: 3.1200008392333984Goal finished with status: SUCCEEDEDYou will continue to receive feedback, the remaining radians, until the goal is complete.SummaryActions are like services that allow you to execute long running tasks, provide regular feedback, and are cancelable.A robot system would likely use actions for navigation.
An action goal could tell a robot to travel to a position.
While the robot navigates to the position, it can send updates along the way (i.e. feedback), and then a final result message once it’s reached its destination.Turtlesim has an action server that action clients can send goals to for rotating turtles.
In this tutorial, you introspected that action,/turtle1/rotate_absolute, to get a better idea of what actions are and how they work.Next stepsNow you’ve covered all of the core ROS 2 concepts.
The last few tutorials in this set will introduce you to some tools and techniques that will make using ROS 2 easier, starting withUsing rqt_console to view logs.Related contentYou can read more about the design decisions behind actions in ROS 2here.

Code Examples:

Language: unknown
ros2 run turtlesim turtlesim_node

Language: unknown
ros2 run turtlesim turtle_teleop_key

Language: unknown
Use arrow keys to move the turtle.Use G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a rotation.

Language: unknown
[INFO] [turtlesim]: Rotation goal completed successfully

Language: unknown
[INFO] [turtlesim]: Rotation goal canceled

Language: unknown
[WARN] [turtlesim]: Rotation goal received before a previous goal finished. Aborting previous goal

Language: unknown
ros2 node info /turtlesim

Language: unknown
/turtlesimSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEvent/turtle1/cmd_vel: geometry_msgs/msg/TwistPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/color_sensor: turtlesim/msg/Color/turtle1/pose: turtlesim/msg/PoseService Servers:/clear: std_srvs/srv/Empty/kill: turtlesim/srv/Kill/reset: std_srvs/srv/Empty/spawn: turtlesim/srv/Spawn/turtle1/set_pen: turtlesim/srv/SetPen/turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute/turtle1/teleport_relative: turtlesim/srv/TeleportRelative/turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters/turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/turtlesim/get_parameters: rcl_interfaces/srv/GetParameters/turtlesim/list_parameters: rcl_interfaces/srv/ListParameters/turtlesim/set_parameters: rcl_interfaces/srv/SetParameters/turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomicallyService Clients:Action Servers:/turtle1/rotate_absolute: turtlesim/action/RotateAbsoluteAction Clients:

Language: unknown
ros2 node info /teleop_turtle

Language: unknown
/teleop_turtleSubscribers:/parameter_events: rcl_interfaces/msg/ParameterEventPublishers:/parameter_events: rcl_interfaces/msg/ParameterEvent/rosout: rcl_interfaces/msg/Log/turtle1/cmd_vel: geometry_msgs/msg/TwistService Servers:/teleop_turtle/describe_parameters: rcl_interfaces/srv/DescribeParameters/teleop_turtle/get_parameter_types: rcl_interfaces/srv/GetParameterTypes/teleop_turtle/get_parameters: rcl_interfaces/srv/GetParameters/teleop_turtle/list_parameters: rcl_interfaces/srv/ListParameters/teleop_turtle/set_parameters: rcl_interfaces/srv/SetParameters/teleop_turtle/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomicallyService Clients:Action Servers:Action Clients:/turtle1/rotate_absolute: turtlesim/action/RotateAbsolute

Language: unknown
ros2 action list

Language: unknown
/turtle1/rotate_absolute

Language: unknown
ros2 action list -t

Language: unknown
/turtle1/rotate_absolute [turtlesim/action/RotateAbsolute]

Language: unknown
ros2 action type /turtle1/rotate_absolute

Language: unknown
turtlesim/action/RotateAbsolute

Language: unknown
ros2 action info /turtle1/rotate_absolute

Language: unknown
Action: /turtle1/rotate_absoluteAction clients: 1/teleop_turtleAction servers: 1/turtlesim

Language: unknown
ros2 interface show turtlesim/action/RotateAbsolute

Language: unknown
#Thedesiredheadinginradiansfloat32 theta---#Theangulardisplacementinradianstothestartingpositionfloat32 delta---#Theremainingrotationinradiansfloat32 remaining

Language: unknown
ros2 action send_goal <action_name> <action_type> <values>

Language: unknown
ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.57}"

Language: unknown
Waiting for an action server to become available...Sending goal:theta: 1.57Goal accepted with ID: f8db8f44410849eaa93d3feb747dd444Result:delta: -1.568000316619873Goal finished with status: SUCCEEDED

Language: unknown
ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: -1.57}" --feedback

Language: unknown
Sending goal:theta: -1.57Goal accepted with ID: e6092c831f994afda92f0086f220da27Feedback:remaining: -3.1268222332000732Feedback:remaining: -3.1108222007751465…Result:delta: 3.1200008392333984Goal finished with status: SUCCEEDED
