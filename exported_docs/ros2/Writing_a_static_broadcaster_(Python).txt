Title: Writing a static broadcaster (Python)
URL: https://docs.ros.org/en/jazzy/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.html
Section: Installation
--------------------------------------------------------------------------------

Writing a static broadcaster (Python)Goal:Learn how to broadcast static coordinate frames to tf2.Tutorial level:IntermediateTime:15 minutesContentsBackgroundPrerequisitesTasks1 Create a package2 Write the static broadcaster node3 Build4 RunThe proper way to publish static transformsSummaryBackgroundPublishing static transforms is useful to define the relationship between a robot base and its sensors or non-moving parts.
For example, it is easiest to reason about laser scan measurements in a frame at the center of the laser scanner.This is a standalone tutorial covering the basics of static transforms, which consists of two parts.
In the first part we will write code to publish static transforms to tf2.
In the second part we will explain how to use the commandlinestatic_transform_publisherexecutable tool intf2_ros.In the next two tutorials we will write the code to reproduce the demo from theIntroduction to tf2tutorial.
After that, the following tutorials focus on extending the demo with more advanced tf2 features.PrerequisitesIn previous tutorials, you learned how tocreate a workspaceandcreate a package.Tasks1 Create a packageFirst we will create a package that will be used for this tutorial and the following ones.
The package calledlearning_tf2_pywill depend ongeometry_msgs,python3-numpy,rclpy,tf2_ros_py, andturtlesim.
Code for this tutorial is storedhere.Open a new terminal andsource your ROS 2 installationso thatros2commands will work.
Navigate to workspace’ssrcfolder and create a new package:ros2 pkg create --build-type ament_python --license Apache-2.0 -- learning_tf2_pyYour terminal will return a message verifying the creation of your packagelearning_tf2_pyand all its necessary files and folders.2 Write the static broadcaster nodeLet’s first create the source files.
Inside thesrc/learning_tf2_py/learning_tf2_pydirectory download the example static broadcaster code by entering the following command:LinuxmacOSWindowswget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.pywget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.pyIn a Windows command line prompt:curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.pyOr in powershell:curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.pyNow open the file calledstatic_turtle_tf2_broadcaster.pyusing your preferred text editor.importmathimportsysfromgeometry_msgs.msgimportTransformStampedimportnumpyasnpimportrclpyfromrclpy.nodeimportNodefromtf2_ros.static_transform_broadcasterimportStaticTransformBroadcasterdefquaternion_from_euler(ai,aj,ak):ai/=2.0aj/=2.0ak/=2.0ci=math.cos(ai)si=math.sin(ai)cj=math.cos(aj)sj=math.sin(aj)ck=math.cos(ak)sk=math.sin(ak)cc=ci*ckcs=ci*sksc=si*ckss=si*skq=np.empty((4,))q[0]=cj*sc-sj*csq[1]=cj*ss+sj*ccq[2]=cj*cs-sj*scq[3]=cj*cc+sj*ssreturnqclassStaticFramePublisher(Node):"""Broadcast transforms that never change.This example publishes transforms from `world` to a static turtle frame.The transforms are only published once at startup, and are constant for alltime."""def__init__(self,transformation):super().__init__('static_turtle_tf2_broadcaster')self.tf_static_broadcaster=StaticTransformBroadcaster(self)# Publish static transforms once at startupself.make_transforms(transformation)defmake_transforms(self,transformation):t=TransformStamped()t.header.stamp=self.get_clock().now().to_msg()t.header.frame_id='world't.child_frame_id=transformation[1]t.transform.translation.x=float(transformation[2])t.transform.translation.y=float(transformation[3])t.transform.translation.z=float(transformation[4])quat=quaternion_from_euler(float(transformation[5]),float(transformation[6]),float(transformation[7]))t.transform.rotation.x=quat[0]t.transform.rotation.y=quat[1]t.transform.rotation.z=quat[2]t.transform.rotation.w=quat[3]self.tf_static_broadcaster.sendTransform(t)defmain():logger=rclpy.logging.get_logger('logger')# obtain parameters from command line argumentsiflen(sys.argv)!=8:logger.info('Invalid number of parameters. Usage:\n''$ ros2 run learning_tf2_py static_turtle_tf2_broadcaster''child_frame_name x y z roll pitch yaw')sys.exit(1)ifsys.argv[1]=='world':logger.info('Your static turtle name cannot be "world"')sys.exit(2)# pass parameters and initialize noderclpy.init()node=StaticFramePublisher(sys.argv)try:rclpy.spin(node)exceptKeyboardInterrupt:passrclpy.shutdown()2.1 Examine the codeNow let’s look at the code that is relevant to publishing the static turtle pose to tf2.
The first lines import required packages.
First we import theTransformStampedfrom thegeometry_msgs, which provides us a template for the message that we will publish to the transformation tree.fromgeometry_msgs.msgimportTransformStampedAfterward,rclpyis imported so itsNodeclass can be used.importrclpyfromrclpy.nodeimportNodeThetf2_rospackage provides aStaticTransformBroadcasterto make the publishing of static transforms easy.
To use theStaticTransformBroadcaster, we need to import it from thetf2_rosmodule.fromtf2_ros.static_transform_broadcasterimportStaticTransformBroadcasterTheStaticFramePublisherclass constructor initializes the node with the namestatic_turtle_tf2_broadcaster.
Then,StaticTransformBroadcasteris created, which will send one static transformation upon the startup.self.tf_static_broadcaster=StaticTransformBroadcaster(self)self.make_transforms(transformation)Here we create aTransformStampedobject, which will be the message we will send over once populated.
Before passing the actual transform values we need to give it the appropriate metadata.We need to give the transform being published a timestamp and we’ll just stamp it with the current time,self.get_clock().now()Then we need to set the name of the parent frame of the link we’re creating, in this caseworldFinally, we need to set the name of the child frame of the link we’re creatingt=TransformStamped()t.header.stamp=self.get_clock().now().to_msg()t.header.frame_id='world't.child_frame_id=transformation[1]Here we populate the 6D pose (translation and rotation) of the turtle.t.transform.translation.x=float(transformation[2])t.transform.translation.y=float(transformation[3])t.transform.translation.z=float(transformation[4])quat=quaternion_from_euler(float(transformation[5]),float(transformation[6]),float(transformation[7]))t.transform.rotation.x=quat[0]t.transform.rotation.y=quat[1]t.transform.rotation.z=quat[2]t.transform.rotation.w=quat[3]Finally, we broadcast static transform using thesendTransform()function.self.tf_static_broadcaster.sendTransform(t)2.2 Update package.xmlNavigate one level back to thesrc/learning_tf2_pydirectory, where thesetup.py,setup.cfg, andpackage.xmlfiles have been created for you.Openpackage.xmlwith your text editor.As mentioned in theCreate a packagetutorial, make sure to fill in the<description>,<maintainer>and<license>tags:<description>Learningtf2withrclpy</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>After the lines above, add the following dependencies corresponding to your node’s import statements:<exec_depend>geometry_msgs</exec_depend><exec_depend>python3-numpy</exec_depend><exec_depend>rclpy</exec_depend><exec_depend>tf2_ros_py</exec_depend><exec_depend>turtlesim</exec_depend>This declares the requiredgeometry_msgs,python3-numpy,rclpy,tf2_ros_py, andturtlesimdependencies when its code is executed.Make sure to save the file.2.3 Add an entry pointTo allow theros2runcommand to run your node, you must add the entry point tosetup.py(located in thesrc/learning_tf2_pydirectory).Add the following line between the'console_scripts':brackets:'static_turtle_tf2_broadcaster = learning_tf2_py.static_turtle_tf2_broadcaster:main',3 BuildIt’s good practice to runrosdepin the root of your workspace to check for missing dependencies before building:LinuxmacOSWindowsrosdep install -i --from-path src --rosdistro jazzy -yrosdep only runs on Linux, so you will need to installgeometry_msgsandturtlesimdependencies yourselfrosdep only runs on Linux, so you will need to installgeometry_msgsandturtlesimdependencies yourselfStill in the root of your workspace, build your new package:LinuxmacOSWindowscolcon build --packages-select learning_tf2_pycolcon build --packages-select learning_tf2_pycolcon build --merge-install --packages-select learning_tf2_pyOpen a new terminal, navigate to the root of your workspace, and source the setup files:LinuxmacOSWindows. install/setup.bash. install/setup.bash#CMDcall install\setup.bat#Powershell.\install\setup.ps14 RunNow run thestatic_turtle_tf2_broadcasternode:ros2 run learning_tf2_py static_turtle_tf2_broadcaster mystaticturtle 0 0 1 0 0 0This sets a turtle pose broadcast formystaticturtleto float 1 meter above the ground.We can now check that the static transform has been published by echoing thetf_statictopicros2 topic echo /tf_staticIf everything went well you should see a single static transformtransforms:- header:stamp:sec: 1622908754nanosec: 208515730frame_id: worldchild_frame_id: mystaticturtletransform:translation:x: 0.0y: 0.0z: 1.0rotation:x: 0.0y: 0.0z: 0.0w: 1.0The proper way to publish static transformsThis tutorial aimed to show howStaticTransformBroadcastercan be used to publish static transforms.
In your real development process you shouldn’t have to write this code yourself and should use the dedicatedtf2_rostool to do so.tf2_rosprovides an executable namedstatic_transform_publisherthat can be used either as a commandline tool or a node that you can add to your launchfiles.The following command publishes a static coordinate transform to tf2 using an x/y/z offset in meters and roll/pitch/yaw in radians.
In ROS 2, roll/pitch/yaw refers to rotation about the x/y/z-axis, respectively.ros2 run tf2_ros static_transform_publisher --x x --y y --z z --yaw yaw --pitch pitch --roll roll --frame-id frame_id --child-frame-id child_frame_idThe following command publishes a static coordinate transform to tf2 using an x/y/z offset in meters and roll/pitch/yaw as a quaternion.ros2 run tf2_ros static_transform_publisher --x x --y y --z z --qx qx --qy qy --qz qz --qw qw --frame-id frame_id --child-frame-id child_frame_idstatic_transform_publisheris designed both as a command-line tool for manual use, as well as for use withinlaunchfiles for setting static transforms. For example:fromlaunchimportLaunchDescriptionfromlaunch_ros.actionsimportNodedefgenerate_launch_description():returnLaunchDescription([Node(package='tf2_ros',executable='static_transform_publisher',arguments=['--x','0','--y','0','--z','1','--yaw','0','--pitch','0','--roll','0','--frame-id','world','--child-frame-id','mystaticturtle']),])Note that all arguments except for--frame-idand--child-frame-idare optional; if a particular option isn’t specified, then the identity will be assumed.SummaryIn this tutorial you learned how static transforms are useful to define static relationships between frames, likemystaticturtlein relation to theworldframe.
In addition, you learned how static transforms can be useful for understanding sensor data, such as from laser scanners, by relating the data to a common coordinate frame.
Finally, you wrote your own node to publish static transforms to tf2 and learned how to publish required static transformations usingstatic_transform_publisherexecutable and launch files.

Code Examples:

Language: unknown
ros2 pkg create --build-type ament_python --license Apache-2.0 -- learning_tf2_py

Language: unknown
wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py

Language: unknown
wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py

Language: unknown
curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.py

Language: unknown
curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.py

Language: unknown
importmathimportsysfromgeometry_msgs.msgimportTransformStampedimportnumpyasnpimportrclpyfromrclpy.nodeimportNodefromtf2_ros.static_transform_broadcasterimportStaticTransformBroadcasterdefquaternion_from_euler(ai,aj,ak):ai/=2.0aj/=2.0ak/=2.0ci=math.cos(ai)si=math.sin(ai)cj=math.cos(aj)sj=math.sin(aj)ck=math.cos(ak)sk=math.sin(ak)cc=ci*ckcs=ci*sksc=si*ckss=si*skq=np.empty((4,))q[0]=cj*sc-sj*csq[1]=cj*ss+sj*ccq[2]=cj*cs-sj*scq[3]=cj*cc+sj*ssreturnqclassStaticFramePublisher(Node):"""Broadcast transforms that never change.This example publishes transforms from `world` to a static turtle frame.The transforms are only published once at startup, and are constant for alltime."""def__init__(self,transformation):super().__init__('static_turtle_tf2_broadcaster')self.tf_static_broadcaster=StaticTransformBroadcaster(self)# Publish static transforms once at startupself.make_transforms(transformation)defmake_transforms(self,transformation):t=TransformStamped()t.header.stamp=self.get_clock().now().to_msg()t.header.frame_id='world't.child_frame_id=transformation[1]t.transform.translation.x=float(transformation[2])t.transform.translation.y=float(transformation[3])t.transform.translation.z=float(transformation[4])quat=quaternion_from_euler(float(transformation[5]),float(transformation[6]),float(transformation[7]))t.transform.rotation.x=quat[0]t.transform.rotation.y=quat[1]t.transform.rotation.z=quat[2]t.transform.rotation.w=quat[3]self.tf_static_broadcaster.sendTransform(t)defmain():logger=rclpy.logging.get_logger('logger')# obtain parameters from command line argumentsiflen(sys.argv)!=8:logger.info('Invalid number of parameters. Usage:\n''$ ros2 run learning_tf2_py static_turtle_tf2_broadcaster''child_frame_name x y z roll pitch yaw')sys.exit(1)ifsys.argv[1]=='world':logger.info('Your static turtle name cannot be "world"')sys.exit(2)# pass parameters and initialize noderclpy.init()node=StaticFramePublisher(sys.argv)try:rclpy.spin(node)exceptKeyboardInterrupt:passrclpy.shutdown()

Language: unknown
fromgeometry_msgs.msgimportTransformStamped

Language: unknown
importrclpyfromrclpy.nodeimportNode

Language: unknown
fromtf2_ros.static_transform_broadcasterimportStaticTransformBroadcaster

Language: unknown
self.tf_static_broadcaster=StaticTransformBroadcaster(self)self.make_transforms(transformation)

Language: unknown
t=TransformStamped()t.header.stamp=self.get_clock().now().to_msg()t.header.frame_id='world't.child_frame_id=transformation[1]

Language: unknown
t.transform.translation.x=float(transformation[2])t.transform.translation.y=float(transformation[3])t.transform.translation.z=float(transformation[4])quat=quaternion_from_euler(float(transformation[5]),float(transformation[6]),float(transformation[7]))t.transform.rotation.x=quat[0]t.transform.rotation.y=quat[1]t.transform.rotation.z=quat[2]t.transform.rotation.w=quat[3]

Language: unknown
self.tf_static_broadcaster.sendTransform(t)

Language: unknown
<description>Learningtf2withrclpy</description><maintaineremail="you@email.com">YourName</maintainer><license>Apache-2.0</license>

Language: unknown
<exec_depend>geometry_msgs</exec_depend><exec_depend>python3-numpy</exec_depend><exec_depend>rclpy</exec_depend><exec_depend>tf2_ros_py</exec_depend><exec_depend>turtlesim</exec_depend>

Language: unknown
'static_turtle_tf2_broadcaster = learning_tf2_py.static_turtle_tf2_broadcaster:main',

Language: unknown
rosdep install -i --from-path src --rosdistro jazzy -y

Language: unknown
colcon build --packages-select learning_tf2_py

Language: unknown
colcon build --packages-select learning_tf2_py

Language: unknown
colcon build --merge-install --packages-select learning_tf2_py

Language: unknown
. install/setup.bash

Language: unknown
. install/setup.bash

Language: unknown
#CMDcall install\setup.bat#Powershell.\install\setup.ps1

Language: unknown
ros2 run learning_tf2_py static_turtle_tf2_broadcaster mystaticturtle 0 0 1 0 0 0

Language: unknown
ros2 topic echo /tf_static

Language: unknown
transforms:- header:stamp:sec: 1622908754nanosec: 208515730frame_id: worldchild_frame_id: mystaticturtletransform:translation:x: 0.0y: 0.0z: 1.0rotation:x: 0.0y: 0.0z: 0.0w: 1.0

Language: unknown
ros2 run tf2_ros static_transform_publisher --x x --y y --z z --yaw yaw --pitch pitch --roll roll --frame-id frame_id --child-frame-id child_frame_id

Language: unknown
ros2 run tf2_ros static_transform_publisher --x x --y y --z z --qx qx --qy qy --qz qz --qw qw --frame-id frame_id --child-frame-id child_frame_id

Language: unknown
fromlaunchimportLaunchDescriptionfromlaunch_ros.actionsimportNodedefgenerate_launch_description():returnLaunchDescription([Node(package='tf2_ros',executable='static_transform_publisher',arguments=['--x','0','--y','0','--z','1','--yaw','0','--pitch','0','--roll','0','--frame-id','world','--child-frame-id','mystaticturtle']),])
