Title: Using event handlers
URL: https://docs.ros.org/en/jazzy/Tutorials/Intermediate/Launch/Using-Event-Handlers.html
Section: Installation
--------------------------------------------------------------------------------

Using event handlersGoal:Learn about event handlers in ROS 2 launch filesTutorial level:IntermediateTime:15 minutesTable of ContentsBackgroundPrerequisitesUsing event handlers1 Event handlers example launch fileBuild the packageLaunching exampleDocumentationSummaryBackgroundLaunch in ROS 2 is a system that executes and manages user-defined processes.
It is responsible for monitoring the state of processes it launched, as well as reporting and reacting to changes in the state of those processes.
These changes are called events and can be handled by registering an event handler with the launch system.
Event handlers can be registered for specific events and can be useful for monitoring the state of processes.
Additionally, they can be used to define a complex set of rules which can be used to dynamically modify the launch file.This tutorial shows usage examples of event handlers in ROS 2 launch files.PrerequisitesThis tutorial uses theturtlesimpackage.
This tutorial also assumes you havecreated a new packageof build typeament_pythoncalledlaunch_tutorial.This tutorial extends the code shown in theUsing substitutions in launch filestutorial.Using event handlers1 Event handlers example launch fileCreate a new file calledexample_event_handlers_launch.pyfile in thelaunchfolder of thelaunch_tutorialpackage.fromlaunch_ros.actionsimportNodefromlaunchimportLaunchDescriptionfromlaunch.actionsimport(DeclareLaunchArgument,EmitEvent,ExecuteProcess,LogInfo,RegisterEventHandler,TimerAction)fromlaunch.conditionsimportIfConditionfromlaunch.event_handlersimport(OnExecutionComplete,OnProcessExit,OnProcessIO,OnProcessStart,OnShutdown)fromlaunch.eventsimportShutdownfromlaunch.substitutionsimport(EnvironmentVariable,FindExecutable,LaunchConfiguration,LocalSubstitution,PythonExpression)defgenerate_launch_description():turtlesim_ns=LaunchConfiguration('turtlesim_ns')use_provided_red=LaunchConfiguration('use_provided_red')new_background_r=LaunchConfiguration('new_background_r')turtlesim_ns_launch_arg=DeclareLaunchArgument('turtlesim_ns',default_value='turtlesim1')use_provided_red_launch_arg=DeclareLaunchArgument('use_provided_red',default_value='False')new_background_r_launch_arg=DeclareLaunchArgument('new_background_r',default_value='200')turtlesim_node=Node(package='turtlesim',namespace=turtlesim_ns,executable='turtlesim_node',name='sim')spawn_turtle=ExecuteProcess(cmd=[[FindExecutable(name='ros2'),' service call ',turtlesim_ns,'/spawn ','turtlesim/srv/Spawn ','"{x: 2, y: 2, theta: 0.2}"']],shell=True)change_background_r=ExecuteProcess(cmd=[[FindExecutable(name='ros2'),' param set ',turtlesim_ns,'/sim background_r ','120']],shell=True)change_background_r_conditioned=ExecuteProcess(condition=IfCondition(PythonExpression([new_background_r,' == 200',' and ',use_provided_red])),cmd=[[FindExecutable(name='ros2'),' param set ',turtlesim_ns,'/sim background_r ',new_background_r]],shell=True)returnLaunchDescription([turtlesim_ns_launch_arg,use_provided_red_launch_arg,new_background_r_launch_arg,turtlesim_node,RegisterEventHandler(OnProcessStart(target_action=turtlesim_node,on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),spawn_turtle])),RegisterEventHandler(OnProcessIO(target_action=spawn_turtle,on_stdout=lambdaevent:LogInfo(msg='Spawn request says "{}"'.format(event.text.decode().strip())))),RegisterEventHandler(OnExecutionComplete(target_action=spawn_turtle,on_completion=[LogInfo(msg='Spawn finished'),change_background_r,TimerAction(period=2.0,actions=[change_background_r_conditioned],)])),RegisterEventHandler(OnProcessExit(target_action=turtlesim_node,on_exit=[LogInfo(msg=(EnvironmentVariable(name='USER'),' closed the turtlesim window')),EmitEvent(event=Shutdown(reason='Window closed'))])),RegisterEventHandler(OnShutdown(on_shutdown=[LogInfo(msg=['Launch was asked to shutdown: ',LocalSubstitution('event.reason')])])),])RegisterEventHandleractions for theOnProcessStart,OnProcessIO,OnExecutionComplete,OnProcessExit, andOnShutdownevents were defined in the launch description.TheOnProcessStartevent handler is used to register a callback function that is executed when the turtlesim node starts.
It logs a message to the console and executes thespawn_turtleaction when the turtlesim node starts.RegisterEventHandler(OnProcessStart(target_action=turtlesim_node,on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),spawn_turtle])),TheOnProcessIOevent handler is used to register a callback function that is executed when thespawn_turtleaction writes to its standard output.
It logs the result of the spawn request.RegisterEventHandler(OnProcessIO(target_action=spawn_turtle,on_stdout=lambdaevent:LogInfo(msg='Spawn request says "{}"'.format(event.text.decode().strip())))),TheOnExecutionCompleteevent handler is used to register a callback function that is executed when thespawn_turtleaction completes.
It logs a message to the console and executes thechange_background_randchange_background_r_conditionedactions when the spawn action completes.RegisterEventHandler(OnExecutionComplete(target_action=spawn_turtle,on_completion=[LogInfo(msg='Spawn finished'),change_background_r,TimerAction(period=2.0,actions=[change_background_r_conditioned],)])),TheOnProcessExitevent handler is used to register a callback function that is executed when the turtlesim node exits.
It logs a message to the console and executes theEmitEventaction to emit aShutdownevent when the turtlesim node exits.
It means that the launch process will shutdown when the turtlesim window is closed.RegisterEventHandler(OnProcessExit(target_action=turtlesim_node,on_exit=[LogInfo(msg=(EnvironmentVariable(name='USER'),' closed the turtlesim window')),EmitEvent(event=Shutdown(reason='Window closed'))])),Finally, theOnShutdownevent handler is used to register a callback function that is executed when the launch file is asked to shutdown.
It logs a message to the console why the launch file is asked to shutdown.
It logs the message with a reason for shutdown like the closure of turtlesim window orctrl-csignal made by the user.RegisterEventHandler(OnShutdown(on_shutdown=[LogInfo(msg=['Launch was asked to shutdown: ',LocalSubstitution('event.reason')])])),Build the packageGo to the root of the workspace, and build the package:colcon buildAlso remember to source the workspace after building.Launching exampleNow you can launch theexample_event_handlers_launch.pyfile using theros2launchcommand.ros2 launch launch_tutorial example_event_handlers_launch.py turtlesim_ns:='turtlesim3' use_provided_red:='True' new_background_r:=200This will do the following:Start a turtlesim node with a blue backgroundSpawn the second turtleChange the color to purpleChange the color to pink after two seconds if the providedbackground_rargument is200anduse_provided_redargument isTrueShutdown the launch file when the turtlesim window is closedAdditionally, it will log messages to the console when:The turtlesim node startsThe spawn action is executedThechange_background_raction is executedThechange_background_r_conditionedaction is executedThe turtlesim node exitsThe launch process is asked to shutdown.DocumentationThe launch documentationprovides detailed information about available event handlers.SummaryIn this tutorial, you learned about using event handlers in launch files.
You learned about their syntax and usage examples to define a complex set of rules to dynamically modify launch files.

Code Examples:

Language: unknown
fromlaunch_ros.actionsimportNodefromlaunchimportLaunchDescriptionfromlaunch.actionsimport(DeclareLaunchArgument,EmitEvent,ExecuteProcess,LogInfo,RegisterEventHandler,TimerAction)fromlaunch.conditionsimportIfConditionfromlaunch.event_handlersimport(OnExecutionComplete,OnProcessExit,OnProcessIO,OnProcessStart,OnShutdown)fromlaunch.eventsimportShutdownfromlaunch.substitutionsimport(EnvironmentVariable,FindExecutable,LaunchConfiguration,LocalSubstitution,PythonExpression)defgenerate_launch_description():turtlesim_ns=LaunchConfiguration('turtlesim_ns')use_provided_red=LaunchConfiguration('use_provided_red')new_background_r=LaunchConfiguration('new_background_r')turtlesim_ns_launch_arg=DeclareLaunchArgument('turtlesim_ns',default_value='turtlesim1')use_provided_red_launch_arg=DeclareLaunchArgument('use_provided_red',default_value='False')new_background_r_launch_arg=DeclareLaunchArgument('new_background_r',default_value='200')turtlesim_node=Node(package='turtlesim',namespace=turtlesim_ns,executable='turtlesim_node',name='sim')spawn_turtle=ExecuteProcess(cmd=[[FindExecutable(name='ros2'),' service call ',turtlesim_ns,'/spawn ','turtlesim/srv/Spawn ','"{x: 2, y: 2, theta: 0.2}"']],shell=True)change_background_r=ExecuteProcess(cmd=[[FindExecutable(name='ros2'),' param set ',turtlesim_ns,'/sim background_r ','120']],shell=True)change_background_r_conditioned=ExecuteProcess(condition=IfCondition(PythonExpression([new_background_r,' == 200',' and ',use_provided_red])),cmd=[[FindExecutable(name='ros2'),' param set ',turtlesim_ns,'/sim background_r ',new_background_r]],shell=True)returnLaunchDescription([turtlesim_ns_launch_arg,use_provided_red_launch_arg,new_background_r_launch_arg,turtlesim_node,RegisterEventHandler(OnProcessStart(target_action=turtlesim_node,on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),spawn_turtle])),RegisterEventHandler(OnProcessIO(target_action=spawn_turtle,on_stdout=lambdaevent:LogInfo(msg='Spawn request says "{}"'.format(event.text.decode().strip())))),RegisterEventHandler(OnExecutionComplete(target_action=spawn_turtle,on_completion=[LogInfo(msg='Spawn finished'),change_background_r,TimerAction(period=2.0,actions=[change_background_r_conditioned],)])),RegisterEventHandler(OnProcessExit(target_action=turtlesim_node,on_exit=[LogInfo(msg=(EnvironmentVariable(name='USER'),' closed the turtlesim window')),EmitEvent(event=Shutdown(reason='Window closed'))])),RegisterEventHandler(OnShutdown(on_shutdown=[LogInfo(msg=['Launch was asked to shutdown: ',LocalSubstitution('event.reason')])])),])

Language: unknown
RegisterEventHandler(OnProcessStart(target_action=turtlesim_node,on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),spawn_turtle])),

Language: unknown
RegisterEventHandler(OnProcessIO(target_action=spawn_turtle,on_stdout=lambdaevent:LogInfo(msg='Spawn request says "{}"'.format(event.text.decode().strip())))),

Language: unknown
RegisterEventHandler(OnExecutionComplete(target_action=spawn_turtle,on_completion=[LogInfo(msg='Spawn finished'),change_background_r,TimerAction(period=2.0,actions=[change_background_r_conditioned],)])),

Language: unknown
RegisterEventHandler(OnProcessExit(target_action=turtlesim_node,on_exit=[LogInfo(msg=(EnvironmentVariable(name='USER'),' closed the turtlesim window')),EmitEvent(event=Shutdown(reason='Window closed'))])),

Language: unknown
RegisterEventHandler(OnShutdown(on_shutdown=[LogInfo(msg=['Launch was asked to shutdown: ',LocalSubstitution('event.reason')])])),

Language: unknown
colcon build

Language: unknown
ros2 launch launch_tutorial example_event_handlers_launch.py turtlesim_ns:='turtlesim3' use_provided_red:='True' new_background_r:=200
