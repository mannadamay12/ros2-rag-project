Title: Iron Irwini (iron)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Iron-Irwini.html
Section: Installation
--------------------------------------------------------------------------------

Iron Irwini (iron)Table of ContentsSupported PlatformsInstallationNew features in this ROS 2 releaseAPI documentation generation for Python packagesService introspectionPre and post set parameter callback supportImproved discovery optionsMatched eventsExternal configuration services of loggersType Description DistributionDynamic Types and Dynamic Messageslaunchlaunch_roslaunch_testingrclcpprclpyros2paramros2topicChanges since the Humble releaseChange to the default console logging file flushing behaviorament_cmake_autoament_cmake_noseament_lintcamera_info_managerlaunchlaunch_roslaunch_xmllaunch_yamlmessage_filtersrcl_yaml_param_parserrclcpprclpyrcutilsrmwrmw_dds_commonros2topicrosbag2rosidl_pythonrviztracetoolsKnown IssuesRelease TimelineDevelopment progressIron Irwiniis the ninth release of ROS 2.
What follows is highlights of the important changes and features in Iron Irwini since the last release.
For a list of all of the changes since Humble, see thelong form changelog.Supported PlatformsIron Irwini is primarily supported on the following platforms:Tier 1 platforms:Ubuntu 22.04 (Jammy):amd64andarm64Windows 10 (Visual Studio 2019):amd64Tier 2 platforms:RHEL 9:amd64Tier 3 platforms:macOS:amd64Debian Bullseye:amd64For more information about RMW implementations, compiler / interpreter versions, and system dependency versions seeREP 2000.InstallationInstall Iron IrwiniNew features in this ROS 2 releaseAPI documentation generation for Python packagesROS 2 has had automatic API documentation for C++ packages for several releases, e.g.https://docs.ros.org/en/rolling/p/rclcpp/generated/index.html.
Iron adds automatic API documentation for Python packages as well, e.g.https://docs.ros.org/en/rolling/p/rclpy/rclpy.html.Seehttps://github.com/ros-infrastructure/rosdoc2/pull/28,https://github.com/ros-infrastructure/rosdoc2/pull/49,https://github.com/ros-infrastructure/rosdoc2/pull/51, andhttps://github.com/ros-infrastructure/rosdoc2/pull/52for more details.Service introspectionIt is now possible to enable service introspection on a per-service basis.
When enabled, this allows users to see the metadata associated with the client requesting a service, the server accepting the request, the server sending the response, and the client accepting the response.
Optionally, the contents of the client/server requests/responses can also be introspected.
All of the information is published on a hidden topic generated from the name of the service.
So if the service is called/myservice, then the information will be published on/myservice/_service_event.Note that this functionality is disabled by default; to enable it, users must callconfigure_introspectionafter creating a server client or server.
There are examples showing how to do this inhttps://github.com/ros2/demos/tree/iron/demo_nodes_cpp/src/services(C++) andhttps://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/services/introspection.py(Python).SeeREP 2012and the tracking bug athttps://github.com/ros2/ros2/issues/1285for more information.Pre and post set parameter callback supportFor many releases now, users could register a callback to be called when parameters on a node were changed by an external entity (likeros2paramset).
This callback could examine the changed parameter types and values, and reject the whole lot if one of them didn’t meet certain criteria.
However, it could not modify the parameter list, nor should it have modified state (since there might be other callbacks after the set one that would reject the parameters).This release adds in a pre and post callback.
The callbacks are called in this order:The “pre” set parameter callback, which can modify the list of parameters based on arbitrary criteria.The “set” parameter callback, which cannot modify the list and should only accept or reject the parameters based on their type and value (this is the existing callback).The “post” set parameter callback, which can make state changes based on parameters and is only called if the previous two callbacks are successful.There are examples of this in action inhttps://github.com/ros2/demos/blob/iron/demo_nodes_cpp/src/parameters/set_parameters_callback.cpp(C++) andhttps://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/parameters/set_parameters_callback.py(Python).Seehttps://github.com/ros2/rclcpp/pull/1947,https://github.com/ros2/rclpy/pull/966, andhttps://github.com/ros2/demos/pull/565for more information.Improved discovery optionsPrevious ROS 2 versions offered limited discovery options.
The default behavior for DDS based RMW implementations was to discover any node reachable via multicast.
It could be limited to the same machine by setting the environment variableROS_LOCALHOST_ONLY, but any additional configuration required configuring the middleware directly, usually via middleware specific XML files and environment variables.
ROS Iron retains the same default discovery behavior, but deprecatesROS_LOCALHOST_ONLYin favor of more granular options.ROS_AUTOMATIC_DISCOVERY_RANGEcontrols how far ROS nodes will try to discover each other. Valid options are:SUBNET- The default, and for DDS-based middlewares it will discover any node reachable via multicast.LOCALHOST- Will only try to discover other nodes on the same machine.OFF- Will not attempt to discover any other nodes automatically, even on the same machine.SYSTEM_DEFAULT- Will not change any discovery settings.  This is useful when you already have custom settings for your middleware and don’t want ROS to change them.ROS_STATIC_PEERS- A semicolon (;) separated list of addresses that ROS should try to discover nodes on.  This allows the user to connect to nodes on specifc machines (as long as their discovery range is not set toOFF).For example, you might have several robots withROS_AUTOMATIC_DISCOVERY_RANGEset toLOCALHOSTso they don’t communicate with each other.
When you want to connect RViz to one of them, you add it’s address toROS_STATIC_PEERSin your terminal.
Now you can use ROS 2 CLI and visualization tools to interact with the robot.Seehttps://github.com/ros2/ros2/issues/1359for more information about this feature.Matched eventsIn addition to QoS events, matched events can be generated when any publisher and subscription establishes or drops the connection between them.
Users can provide each publisher and subscription with callback functions that are triggered by matched events and handle them in a way they see fit, similar to how messages received on a topic are handled.publisher: this event happens when it finds a subscription which matches the topic and has compatible QoS or a connected subscription is disconnected.subscription: this event happens when it finds a publisher which matches the topic and has compatible QoS or a connected publisher is disconnected.See the tracking issue athttps://github.com/ros2/rmw/issues/330for more information.C++ Demo of Matched Events:https://github.com/ros2/demos/blob/iron/demo_nodes_cpp/src/events/matched_event_detect.cppPython Demo of Matched Events:https://github.com/ros2/demos/blob/iron/demo_nodes_py/demo_nodes_py/events/matched_event_detect.pyExternal configuration services of loggersIt is now possible to configure node logger levels remotely via a service.
When theenable_logger_serviceoption is enabled during node creation, theset_logger_levelsandget_logger_levelsservices will be available.Be advised that theenable_logger_serviceoption is disabled by default, so the user needs to enable this option on node creation.Seehttps://github.com/ros2/ros2/issues/1355for more information.Type Description DistributionIt is now possible to communicate information about the types of ROS 2 messages, so that systems with potentially-different types of the same name may discover their compatibility more transparently.
This umbrella of capabilities, which is defined by a subset of REP-2011: Evolving Message Types, has had many parts land in Iron.First, the introduction of the new packagetype_description_interfacesprovides a common way to communicate the descriptions of ROS 2 communication interface types (msg, srv, action).Next, a method to hash type descriptions has been decided on, the ROS Interface Hashing Standard (RIHS) - starting with the first version RIHS01.
RIHS hashes are automatically calculated for all compiled ROS types at build time, and baked into the generated code so that they can be inspected.
These hashes are also communicated automatically during discovery, and included inrmw_topic_endpoint_info_tfor graph introspection queries such asget_publishers_info_by_topic.The fullTypeDescriptiondata structure, as well as the raw source text (such as.msgfile) that were used to generate it are now baked in by default to the message libraries, so they can be used bytypesupportor end users.
While we expect this data to provide value to most users, some users trying to minimize bytes in their install space can disable the feature when building ROS 2 Core by defining the CMake variableROSIDL_GENERATOR_C_DISABLE_TYPE_DESCRIPTION_CODEGEN.Finally, the new servicetype_description_interfaces/GetTypeDescription.srvhas been defined to allow nodes, on encountering an unknown RIHS type hash, to request the full definition from the node advertising that type.
Work is in progress to provide this feature natively in ROS 2 Nodes, as an optional switch on node construction.
This feature has not yet shipped, but is expected to be backported into Iron sometime mid-2023.
Meanwhile, user nodes could implement this service indepedently, using the stable service interface.SeeREP 2011for the design proposal.
SeeType Description Distributionfor tracking development on the feature set.Dynamic Types and Dynamic MessagesAlongside the type description distribution feature mentioned above, is the ability to construct and access dynamically created types at runtime (i.e., dynamic types).
This feature is available in Iron for Fast DDS andrcl, with newrmwinterfaces for supporting the taking of messages as dynamic messages (i.e., messages built from or following the structure of the dynamic type).First, utilities were introduced intorosidlto aid in the construction and manipulation of type descriptions.Next, therosidl_dynamic_typesupportpackage was written and provides a middleware-agnostic interface to construct dynamic types and dynamic messages at runtime.
Types can be constructed at runtime either programmatically, or by parsing atype_description_interfaces/TypeDescriptionmessage.NoteTherosidl_dynamic_typesupportlibrary requires serialization support libraries to implement the middleware-specific dynamic type behavior.
A serialization support library for Fast DDS was implemented inrosidl_dynamic_typesupport_fastrtps.
Ideally more middlewares will implement support libraries, expanding the number of middlewares that support this feature.Finally, to support the use of dynamic types and dynamic messages, new methods were added tormwandrclthat support:The ability to obtain of middleware-specific serialization supportThe ability to construct message type support at runtime that use dynamic typesThe ability to take dynamic messages using dynamic typeWork is in progress to enable the use of dynamic types to create subscriptions in the client libraries (see therclcppissue below), though it is uncertain when the feature will land or be backported.
This will allow users to subscribe to topics whose type descriptions are only known at runtime.
In the meantime, users may write their own subscriptions that subscribe to dynamic types by using the newrmwandrclfeatures introduced as part of this feature set.SeeREP 2011for the design proposal.
SeeDynamic Subscriptionfor tracking development on the feature set, withrclcppneeding the bulk of the work.launchPythonExpressionnow supports importing modulesIt is now possible to have a launchPythonExpressionimport modules before performing the evaluation.
This can be useful for pulling in additional functionality to be used when evaluating an expression.Seehttps://github.com/ros2/launch/pull/655for more information.ReadyToTestcan be called from an event handlerIt is now possible to register an event handler that usesReadyToTestin its output.
This can be useful for doing things like downloading an asset before allowing a test to run.Seehttps://github.com/ros2/launch/pull/665for more information.Addition ofAnySubstitutionandAllSubstitutionIt is now possible to specify a substitution to happen when any of the input arguments are true (AnySubstitution), or when all of the input arguments are true (AllSubstitution).Seehttps://github.com/ros2/launch/pull/649for more details.Addition of a new substitution to get the launch logging directoryIt is now possible to use a substitution calledLaunchLogDirto get the current logging directory for launch.Seehttps://github.com/ros2/launch/pull/652for more details.launch_rosAdd aLifecycleTransitionactionIt is now possible to send a transition signal to a lifecycle node via the newLifeCycleTransitionaction.Seehttps://github.com/ros2/launch_ros/pull/317for more information.Add aSetROSLogDiractionIt is now possible to configure the directory used for logging via theSetROSLogDiraction.Seehttps://github.com/ros2/launch_ros/pull/325for more information.Ability to specify a condition to aComposableNodeIt is now possible to specify a condition that must be satisfied in order for aComposableNodeto be inserted into its container.Seehttps://github.com/ros2/launch_ros/pull/311for more information.launch_testingTimeout for process startup is now configurablePrior to this release, theReadyToTestaction would wait exactly 15 seconds for processes to start up.
If the processes took longer than that, they would fail.
There is now a new decorator calledready_to_test_action_timeoutthat allows the user to configure the amount of time to wait for the processes to start.Seehttps://github.com/ros2/launch/pull/625for more information.rclcppAddition of a new paradigm for handlingNodeandLifecycleNodeTheNodeandLifecycleNodeclasses are related in that they both provide the same base set of methods (thoughLifecycleNodeprovides additional methods as well).
Due to various implementation considerations, they are not derived from a common base class.This has led to some trouble for downstream code that wants to accept either aNodeor aLifecycleNode.
One solution is to have two method signatures, one that accepts aNodeand one that accepts aLifecycleNode.
The other, recommended solution is to have a method that accepts the “node interfaces” pointers that can be accessed from both classes, e.g.voiddo_thing(rclcpp::node_interfaces::NodeGraphInterfacegraph){fprintf(stderr,"Doing a thing\n");}voiddo_thing(rclcpp::Node::SharedPtrnode){do_thing(node->get_node_graph_interface());}voiddo_thing(rclcpp::LifecycleNode::SharedPtrnode){do_thing(node->get_node_graph_interface());}This works, but can get a bit unwieldy when many node interfaces are needed.
To make this a bit better, there is now a newNodeInterfacesclass that can be constructed to contain the interfaces, and then be used by other code.There are examples on how to use this inhttps://github.com/ros2/rclcpp/pull/2041.Introduction of a new executor type: the Events ExecutorTheEventsExecutorfrom iRobot has been merged into the mainrclcppcodebase.
This alternative executor implementation uses event-driven callbacks from the middleware implementations to fire callbacks at therclcpplayer.
In addition to the push-based model, theEventsExecutoralso moves timer management into a separate thread, which can allow for more accurate results and lower overhead, especially with many timers.TheEventsExecutorhas a substantial set of documentation and use-in-practice that make it a strong candidate for inclusion in therclcppcodebase.
For information about the initial implementation proposal as well as performance benchmarks, seehttps://discourse.ros.org/t/ros2-middleware-change-proposal/15863.
For more information about the design, see the design PR:https://github.com/ros2/design/pull/305.Since the API is the same, trying theEventsExecutoris as straightforward as replacing your current Executor implementation (eg.SingleThreadedExecutor):#include<rclcpp/experimental/executors/events_executor/events_executor.hpp>usingrclcpp::experimental::executors::EventsExecutor;EventsExecutorexecutor;executor.add_node(node);executor.spin();NoteTheEventsExecutorandTimersManagerare currently in theexperimentalnamespace.
While it has been used as a standalone implementation for some timehttps://github.com/irobot-ros/events-executor, it was decided to use theexperimentalnamespace for at least one release to give latitude in changing the API within the release.
Use caution as it will not be subject to the same API/ABI guarantees that the non-experimental code has.rclpyAbility to wait for another node to join the graphIt is now possible to wait for another node to join the network graph with code like the following:node.wait_for_node('/fully_qualified_node_name')Seehttps://github.com/ros2/rclpy/pull/930for more information.Implementation ofAsyncParameterClientrclpynow has anAsyncParameterClientclass, bringing it to feature parity withrclcpp.
This class is used to perform parameter actions on a remote node without blocking the calling node.Seehttps://github.com/ros2/rclpy/pull/959for more information and examples.Subscription callbacks can now optionally get the message infoIt is now possible to register for a subscription callback with a function signature that takes both the message, and the message info, like:defmsg_info_cb(msg,msg_info):print('Message info:',msg_info)node.create_subscription(msg_type=std_msgs.msg.String,topic='/chatter',qos_profile=10,callback=msg_info_cb)The message info structure contains various pieces of information like the sequence number of the message, the source and received timestamps, and the GID of the publisher.Seehttps://github.com/ros2/rclpy/pull/922for more information.Optional argument that hides assertions for messages classAll message classes now include a new optional argument that allows the hiding of assertions for each field type from the message.
By default, assertions are hidden, which provides a performance improvement during runtime.
In order to enable the assertions for development/debugging purposes, you are given two choices:Define the environment variableROS_PYTHON_CHECK_FIELDSto'1'(this would affect all the messages in your project):importosfromstd_msgs.msgimportStringos.environ['ROS_PYTHON_CHECK_FIELDS']='1'new_message=String()Select the specific behavior for a single message by explicitly defining the new argument in the constructor:fromstd_msgs.msgimportStringnew_message=String(check_fields=True)Seehttps://github.com/ros2/rosidl_python/pull/194for more information.ros2paramOption to timeout when waiting for a node withros2paramIt is now possible to have the variousros2paramcommands timeout by passing--timeoutto the command.Seehttps://github.com/ros2/ros2cli/pull/802for more information.Deprecated options were removed--output-dirand--printoptions withdumpcommand have been removed.Seehttps://github.com/ros2/ros2cli/pull/824for more information.ros2topicnowas keyword forbuiltin_interfaces.msg.Timeandautoforstd_msgs.msg.Headerros2topicpubnow allows to set abuiltin_interfaces.msg.Timemessage to the current time via thenowkeyword.
Similarly, astd_msg.msg.Headermessage will be automatically generated when passed the keywordauto.
This behavior matches that of ROS 1’srostopic(http://wiki.ros.org/ROS/YAMLCommandLine#Headers.2Ftimestamps)Related PR:ros2/ros2cli#749ros2topicpubcan be configured to wait a maximum amount of timeThe commandros2topicpub-w1will wait for at least that number of subscribers before publishing a message.
This release adds in a--max-wait-timeoption so that the command will only wait a maximum amount of time before quitting if no subscribers are seen.Seehttps://github.com/ros2/ros2cli/pull/800for more information.ros2topicechocan be configured to wait a maximum amount of timeThe commandros2topicechonow accepts a--timeoutoption, which controls the maximum amount of time that the command will wait for a publication to happen.Seehttps://github.com/ros2/ros2cli/pull/792for more information.Deprecated option was removed--lost-messagesoption withechocommand has been removed.Seehttps://github.com/ros2/ros2cli/pull/824for more information.Changes since the Humble releaseChange to the default console logging file flushing behaviorThis specifically applies to the defaultspdlogbased logging backend in ROS 2, implemented inrcl_logging_spdlog.
Log file flushing was changed to flush every time an “error” log message is used, e.g. eachRCLCPP_ERROR()call, and also periodically every five seconds.Previously,spdlogwas used without configuring anything other than creating the sink for logging to a file.We tested the change and did not find that the CPU overhead was significant, even on machines with slow disks (e.g. sd cards).
However, if this change is causing you problems, you can get the old behavior by setting theRCL_LOGGING_SPDLOG_EXPERIMENTAL_OLD_FLUSHING_BEHAVIOR=1environment variable.Later we would like to have support for a full configuration file (see:https://github.com/ros2/rcl_logging/issues/92), giving you more flexibility in how the logging is done, but that is work that is only planned right now.Therefore,this environment variable should be considered experimental and subject to removal without deprecation in the future, when we add config file support for thercl_logging_spdloglogging backend.See this pull request for more details about the change:https://github.com/ros2/rcl_logging/pull/95ament_cmake_autoInclude dependencies are now marked as SYSTEMWhen usingament_auto_add_executableorament_auto_add_library, dependencies are now automatically added asSYSTEM.
This means that warnings in the header files of the dependencies will not be reported.Seehttps://github.com/ament/ament_cmake/pull/385for more details.ament_cmake_nosePackage has been deprecated and removedThe Pythonnosepackage has long been deprecated.
Since none of the open-source packages currently released into Humble or Rolling currently depend on it, this release deprecates and removes the ament wrapper around it.Seehttps://github.com/ament/ament_cmake/pull/415for more information.ament_lintFiles can be excluded from linter checksCertain files can now be excluded from linter checks by setting theAMENT_LINT_AUTO_FILE_EXCLUDECMake variable before callingament_lint_auto_find_test_dependencies.Seehttps://github.com/ament/ament_lint/pull/386for more information.camera_info_managerLifecycle node supportcamera_info_managernow supports lifecycle nodes in additional to regular ROS 2 nodes.Seehttps://github.com/ros-perception/image_common/pull/190for more information.launchLaunchConfigurationEqualsandLaunchConfigurationNotEqualsare deprecatedTheLaunchConfigurationEqualsandLaunchConfigurationNotEqualsconditions are deprecated, and will be removed in a future release.
Instead, the more universalEqualsandNotEqualssubstitutions should be used instead.Seehttps://github.com/ros2/launch/pull/649for more details.launch_rosRenamed classes which usedRosin the name to useROSin line with PEP8Classes that were changed:launch_ros.actions.RosTimer->launch_ros.actions.ROSTimerlaunch_ros.actions.PushRosNamespace->launch.actions.PushROSNamespaceThe old class names are still there, but will be deprecated.Seehttps://github.com/ros2/launch_ros/pull/326for more information.launch_xmlExposeemulate_ttyto XML frontendIt has been possible for several releases to have thelaunchPython code use pseudo-terminals to emulate a TTY (and hence do things like print colors).
That functionality is now available in the XML frontend by passing theemulate_ttyargument to an executable command.Seehttps://github.com/ros2/launch/pull/669for more information.Exposesigterm_timeoutandsigkill_timeoutto XML frontendIt has been possible for several releases to configure the maximum timeout value for the SIGTERM and SIGKILL signals in thelaunchPython code.
That functionality is now available in the XML frontend by passing thesigterm_timeoutorsigkill_timeoutargument to an executable command.Seehttps://github.com/ros2/launch/pull/667for more information.launch_yamlExposeemulate_ttyto YAML frontendIt has been possible for several releases to have thelaunchPython code use pseudo-terminals to emulate a TTY (and hence do things like print colors).
That functionality is now available in the YAML frontend by passing theemulate_ttyargument to an executable command.Seehttps://github.com/ros2/launch/pull/669for more information.Exposesigterm_timeoutandsigkill_timeoutto YAML frontendIt has been possible for several releases to configure the maximum timeout value for the SIGTERM and SIGKILL signals in thelaunchPython code.
That functionality is now available in the YAML frontend by passing thesigterm_timeoutorsigkill_timeoutargument to an executable command.Seehttps://github.com/ros2/launch/pull/667for more information.message_filtersNew approximate time policyAdd in a simpler approximate time policy calledApproximateEpsilonTime.
This time policy works likeExactTime, but allows timestamps being within a epsilon tolerance.
Seehttps://github.com/ros2/message_filters/pull/84for more information.New upsampling time policyAdds in a new time policy calledLatestTime.
It can synchronize up to 9 messages by their rates with upsampling via zero-order-hold.
Seehttps://github.com/ros2/message_filters/pull/73for more information.rcl_yaml_param_parserSupport for YAML!!strsyntax in parameter filesIt is now possible to force the ROS parameter file parser to interpret a field as a string using the YAML!!strsyntax.
Seehttps://github.com/ros2/rcl/pull/999for more information.rclcppDefault number of threads for multi-threaded executor has been changedIf the user doesn’t specify otherwise, the default number of threads for the multi-threaded executor will be set to the number of CPUs on the machine.
If the underlying OS doesn’t support getting this information, it will be set to 2.Seehttps://github.com/ros2/rclcpp/pull/2032for more information.A warning is now printed when QoS of KEEP_LAST is specified with a depth of 0Specifying a QoS of KEEP_LAST with a depth of 0 is a nonsensical arrangement, since the entity wouldn’t be able to send or receive any data.rclcppwill now print a warning if this combination is specified, but will still continue on and let the underlying middleware choose a sane value (generally a depth of 1).Seehttps://github.com/ros2/rclcpp/pull/2048for more information.DeprecatedRCLCPP_SCOPE_EXITmacro was removedIn Humble, the macroRCLCPP_SCOPE_EXITwas deprecated in favor ofRCPPUTILS_SCOPE_EXIT.
In Iron, theRCLCPP_SCOPE_EXITmacro has been completely removed.rclpyDefault number of threads for multi-threaded executor has been changedIf the user doesn’t specify otherwise, the default number of threads for the multi-threaded executor will be set to the number of CPUs on the machine.
If the underlying OS doesn’t support getting this information, it will be set to 2.Seehttps://github.com/ros2/rclpy/pull/1031for more information.A warning is now printed when QoS of KEEP_LAST is specified with a depth of 0Specifying a QoS of KEEP_LAST with a depth of 0 is a nonsensical arrangement, since the entity wouldn’t be able to send or receive any data.rclpywill now print a warning if this combination is specified, but will still continue on and let the underlying middleware choose a sane value (generally a depth of 1).Seehttps://github.com/ros2/rclpy/pull/1048for more information.Time and Duration no longer raise exception when compared to another typeIt is now possible to comparerclpy.time.Timeandrclpy.duration.Durationto other types without getting exceptions.
If the types are not comparable, the comparison returnsFalse.
Note that this is a behavior change from previous releases.print(Nonein[rclpy.time.Time(),rclpy.duration.Duration()])# Prints "False" instead of raising TypeErrorSeehttps://github.com/ros2/rclpy/pull/1007for more information.rcutilsImprove the performance of message loggingThe code used to output a log message whenRCUTILS_LOG_*orRCLCPP_*was optimized to reduce overhead.
These log messages should now be more efficient, though they should still not be called at high rates.
Seehttps://github.com/ros2/rcutils/pull/381,https://github.com/ros2/rcutils/pull/372,https://github.com/ros2/rcutils/pull/369, andhttps://github.com/ros2/rcutils/pull/367for more information.Deprecatedrcutils/get_env.hheader was removedIn Humble, the headerrcutils/get_env.hwas deprecated in favor ofrcutils/env.h.
In Iron, thercutils/get_env.hheader been completely removed.rmwChange the GID storage to 16 bytesThe GID in the RMW layer is meant to be a globally unique identifier for writers in the ROS graph.
Previously, this was erroneously set to 24 bytes based on a bug in an old RMW implementation.
But thermwpackage should define this, and all of the implementations should conform to that.
Thus, this release defines it as 16 bytes (the DDS standard), and changes all implementations to use that definition.Seehttps://github.com/ros2/rmw/pull/345and the (closed, but relevant)https://github.com/ros2/rmw/pull/328for more information.rmw_dds_commonChange the GID storage to 16 bytesAlong with the change in thermwlayer, change the message that sends out GID information to 16 bytes.Seehttps://github.com/ros2/rmw_dds_common/pull/68for more information.ros2topicros2topichz/bw/pubnow respectuse_sim_timeWhen running under simulation, the ROS 2 ecosystem generally gets its time from a/clocktopic published by the simulator (rather than using the system clock).
ROS 2 nodes are typically informed of this change by setting theuse_sim_timeparameter on the node.
The node created by theros2topiccommandshz,bw, andpubnow respect that parameter and will use simulation time as appropriate.Seehttps://github.com/ros2/ros2cli/pull/754for more information.rosbag2Change default bag file type tomcapPrior to this release, by default rosbag2 would record data into sqlite3 databases.
During testing, it was found that in many cases this was not performant enough and lacked certain features desirable for offline processing.To meet these needs, a new bag format (influenced by the original ROS 1 bag file format) calledmcapwas developed.
This bag file format has many of the missing features from the sqlite3 file format, and should also be more performant.This release switches to usingmcapas the default file format for writing new bags.
The oldsqlite3file format is still available and can be selected by the user for writing if desired.
This release also allows playing back data from either thesqlite3file format or themcapfile format.Seehttps://github.com/ros2/rosbag2/pull/1160for more information.Store message definitions in bag files with SQLite3 pluginNow we support saving message definitions to thesqlite3database file in the same format
as we are saving it to themcapfile.
This opens an opportunity for third-party tools to have
the ability to deserialize rosbag2 files without having the correct version of all the original
.msg files on the machine that is decoding the bag file recorded withsqlite3plugin.Seehttps://github.com/ros2/rosbag2/issues/782andhttps://github.com/ros2/rosbag2/pull/1293for
more information.New playback and recording controlsSeveral pull requests have been added to enhance the user’s control over playback of bags.
Pull request960adds the ability to play bag for
a specified number of seconds.
And pull request1005allows to play bag until specified timestamp.
Another pull request1007adds the ability to
stop playback remotely via service call.
Stop will unpause player if it was in pause mode, stop playback and force exit from play() method if it was in progress.Managing recording via service callsThere are new options to control the recording process from remote nodes.
The pull request1131adds the ability to pause and
resume recording via service calls.
Another pull request1115adds the ability to split
bags during recording by sending service call.Filtering topics via regular expression during playbackUsers sometimes need to replay only a subset of topics from recorded bags and the following two pull request
adds such capability.
Pull request1034adds a new option--topics-regexthat allows filtering topics via regular expressions.
The--topics-regexoption accepts multiple regular expressions separated by space.
And pull request1046adds the ability to exclude some
certain topics from being replayed by providing regular expression in a new--exclude(and-x) option.Allow plugins to register their own CLI verb argumentsPull request1209adds the ability forrosbag2plugins to
register an optional Python entrypoint providing plugin-specific CLI argument values.
As a result the command line option--storage-preset-profileforros2bagrecordverb will have
different valid options depending on the underlying storage plugin.Other changesThe pull request1038adds the ability to record
any key/value pair in ‘custom’ field in metadata.yaml file.
It is useful when users need to save some hardware specific id or coordinates where the recording was captured.
And pull request1180adds an option to change the underlying
node name for the recorder via providing the new command line--node-nameoption.
This option might be used for creating remote distributed recording with multiple rosbag2 recorder instances.
It provides the ability to send service calls for managing the recording process to the dedicated
rosbag2 recorder instances.rosidl_pythonModification of content of__slots__attributeSo far, the attribute__slots__from the python message classes, have been used as the member that contains the field names of the message.
In Iron, this attribute no longer contains only the field names from the message structure, but the field names for all the class members.
Therefore, users shouldn’t rely on this attribute to retrieve the field names information, instead, users should retrieve it using the methodget_field_and_field_types().Seehttps://github.com/ros2/rosidl_python/pull/194for more information.rvizMap display can now be shown as binaryThe RViz map display can now display the map as binary, with a settable threshold.
This is useful in some cases to inspect maps or in combination with planners that have a settable threshold.Seehttps://github.com/ros2/rviz/pull/846for more information.Camera display plugin respects the ROI in the CameraInfo messageThe CameraDisplay plugin now honors the region-of-interest (ROI) settings in the CameraInfo message, if it is provided.
This accounts for the fact that an image was cropped by the camera driver to reduce the bandwidth.Seehttps://github.com/ros2/rviz/pull/864for more information.Binary STL files from SOLIDWORKS work without errorA change was made to the STL loader such that it accepts binary STL files from SOLIDWORKS that have the word “solid” in them.
This technically violates the STL specification, but is common enough that a special case is added to handle these files.Seehttps://github.com/ros2/rviz/pull/917for more information.tracetoolsTracing instrumentation is now included by default on LinuxThe ROS 2 core has had tracing instrumentation for a while now.
However, it was compiled out by default.
To get the instrumentation, the LTTng tracer had to be manually installed before rebuilding ROS 2 from source.
In Iron, the tracing instrumentation and tracepoints are included by default; the LTTng tracer is therefore now a ROS 2 dependency.Note that this only applies to Linux.Seehttps://github.com/ros2/ros2_tracing/pull/31andhttps://github.com/ros2/ros2/issues/1177for more information.
Seethis how-to guide to remove the instrumentation (or add the instrumentation with Humble and older).New tracepoints forrclcppintra-process are addedNew tracepoints have been added to supportrclcppintra-process communication.
This allows the evaluation of the time between the message publishing and the callback start in intra-process communication.Seehttps://github.com/ros2/ros2_tracing/pull/30andhttps://github.com/ros2/rclcpp/pull/2091for more information.Known Issuesrmw_connextddsdoes not work with Windows Binary release packages.
RTI is not longer distributingRTIConnextDDS6.0.1which was used by the packaging jobs to create the binaries for Windows.
Instead they now distributeRTIConnextDDS6.1.0which is ABI incompatible with the generated binaries.
The solution is to rely on source builds of ROS 2 andrmw_connextddson Windows.sros2on Windows requires users to downgrade thecryptographypython module tocryptography==38.0.4as discussedhere.ros1_bridgedoes not work with ROS Noetic packages fromupstream Ubuntu.  The suggested workaround is to build ROS Noetic from sources, then build theros1_bridgeusing that.Release TimelineNovember, 2022 - Platform decisionsREP 2000 is updated with the target platforms and major dependency versions.By January, 2023 - Rolling platform shiftBuild farm is updated with the new platform versions and dependency versions for Iron Irwini (if necessary).Mon. April 10, 2023 - Alpha + RMW freezePreliminary testing and stabilization of ROS Base[1]packages, and API and feature freeze for RMW provider packages.Mon. April 17, 2023 - FreezeAPI and feature freeze for ROS Base[1]packages in Rolling Ridley.
Only bug fix releases should be made after this point.
New packages can be released independently.Mon. April 24, 2023 - BranchBranch from Rolling Ridley.rosdistrois reopened for Rolling PRs for ROS Base[1]packages.
Iron development shifts fromros-rolling-*packages toros-iron-*packages.Mon. May 1, 2023 - BetaUpdated releases of ROS Desktop[2]packages available.
Call for general testing.Mon. May 15, 2023 - Release CandidateRelease Candidate packages are built.
Updated releases of ROS Desktop[2]packages available.Thu. May 18, 2023 - Distro FreezeFreeze rosdistro.
No PRs for Iron on therosdistrorepo will be merged (reopens after the release announcement).Tue. May 23, 2023 - General AvailabilityRelease announcement.rosdistrois reopened for Iron PRs.[1](1,2,3)Theros_basevariant is described inREP 2001 (ros-base).[2](1,2)Thedesktopvariant is described inREP 2001 (desktop-variants).Development progressFor progress on the development and release of Iron Irwini, seethe tracking GitHub issue.For the broad process followed by Iron Irwini, see theprocess description page.

Code Examples:

Language: unknown
voiddo_thing(rclcpp::node_interfaces::NodeGraphInterfacegraph){fprintf(stderr,"Doing a thing\n");}voiddo_thing(rclcpp::Node::SharedPtrnode){do_thing(node->get_node_graph_interface());}voiddo_thing(rclcpp::LifecycleNode::SharedPtrnode){do_thing(node->get_node_graph_interface());}

Language: unknown
#include<rclcpp/experimental/executors/events_executor/events_executor.hpp>usingrclcpp::experimental::executors::EventsExecutor;EventsExecutorexecutor;executor.add_node(node);executor.spin();

Language: unknown
node.wait_for_node('/fully_qualified_node_name')

Language: unknown
defmsg_info_cb(msg,msg_info):print('Message info:',msg_info)node.create_subscription(msg_type=std_msgs.msg.String,topic='/chatter',qos_profile=10,callback=msg_info_cb)

Language: unknown
importosfromstd_msgs.msgimportStringos.environ['ROS_PYTHON_CHECK_FIELDS']='1'new_message=String()

Language: unknown
fromstd_msgs.msgimportStringnew_message=String(check_fields=True)

Language: unknown
print(Nonein[rclpy.time.Time(),rclpy.duration.Duration()])# Prints "False" instead of raising TypeError
