Title: Crystal Clemmys (crystal)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Crystal-Clemmys.html
Section: Installation
--------------------------------------------------------------------------------

Crystal Clemmys (crystal)Table of ContentsSupported PlatformsNew features in this ROS 2 releaseChanges since the Bouncy releaseKnown IssuesCrystal Clemmysis the third release of ROS 2.Supported PlatformsCrystal Clemmys is primarily supported on the following platforms (seeREP 2000for full details):Tier 1 platforms:Ubuntu 18.04 (Bionic)Mac macOS 10.12 (Sierra)Windows 10Tier 2 platforms:Ubuntu 16.04 (Xenial)New features in this ROS 2 releaseActions in C / C++ (server/clientexamples)gazebo_ros_pkgsimage_transportnavigation2rosbag2rqtImprovement in memory managementIntrospection information about nodesLaunch system improvementsArgumentsNested launch filesConditionsPass params to NodesLaid the groundwork forfile-based logging and /rosout publishingTime and Duration API in PythonParameters work with Python nodesChanges since the Bouncy releaseChanges since theBouncy Bolsonrelease:geometry2 -tf2_ros::BufferAPI Changetf2_ros::Buffernow usesrclcpp::Time, with the constructor requiring ashared_ptrto arclcpp::Clockinstance.
Seehttps://github.com/ros2/geometry2/pull/67for details, with example usage:#include<tf2_ros/transform_listener.h>#include<rclcpp/rclcpp.hpp>...# Assuming you have a rclcpp::Node my_nodetf2_ros::Bufferbuffer(my_node.get_clock());tf2_ros::TransformListenertf_listener(buffer);Allrclcppandrcutilslogging macros require semicolons.Seehttps://github.com/ros2/rcutils/issues/113for details.rcutils_get_error_string_safe()andrcl_get_error_string_safe()have been replaced withrcutils_get_error_string().strandrcl_get_error_string().str.Seehttps://github.com/ros2/rcutils/pull/121for details.rmw -rmw_initAPI ChangeThere are two new structs, thercl_context_tand thercl_init_options_t, which are used withrmw_init.
The init options struct is used to pass options down to the middleware and is an input tormw_init.
The context is a handle which is an output ofrmw_initfunction is used to identify which init-shutdown cycle each entity is associated with, where an “entity” is anything created like a node, guard condition, etc.This is listed here because maintainers of alternative rmw implementations will need to implement these new functions to have their rmw implementation work in Crystal.This is the function that had a signature change:rmw_initAdditionally, there are these new functions which need to be implemented by each rmw implementation:rmw_shutdownrmw_init_options_initrmw_init_options_copyrmw_init_options_finiHere’s an example of what minimally needs to be changed in an rmw implementation to adhere to this API change:rmw_fastrtps prrcl -rcl_initAPI ChangeLike thermwchange above, there’s two new structs inrclcalledrcl_context_tandrcl_init_options_t.
The init options are passed intorcl_initas an input and the context is passed in as an output.
The context is used to associate all other rcl entities to a specific init-shutdown cycle, effectively making init and shutdown no longer global functions, or rather those functions no longer use an global state and instead encapsulate all state within the context type.Any maintainers of a client library implementation (that also usesrclunder the hood) will need to make changes to work with Crystal.These functions were removed:rcl_get_global_argumentsrcl_get_instance_idrcl_okThese functions had signature changes:rcl_initrcl_shutdownrcl_guard_condition_initrcl_guard_condition_init_from_rmwrcl_node_initrcl_timer_initThese are the new functions and types:rcl_context_trcl_get_zero_initialized_contextrcl_context_finircl_context_get_init_optionsrcl_context_get_instance_idrcl_context_is_validrcl_init_options_trcl_get_zero_initialized_init_optionsrcl_init_options_initrcl_init_options_copyrcl_init_options_finircl_init_options_get_rmw_init_optionsrcl_node_is_valid_except_contextrcl_publisher_get_contextrcl_publisher_is_valid_except_contextThese new and changed functions will impact how you handle init and shutdown in your client library.
For examples, look at the followingrclcppandrclpyPR’s:rclcpprclpyHowever, you may just continue to offer a single, global init and shutdown in your client library, and just store a single global context object.Known IssuesA race condition in Fast-RTPS 1.7.0 may cause messages to drop under stress (Issue).Using the TRANSIENT_LOCAL QoS setting with rmw_fastrtps_cpp can crash applications with large messages (Issue).Cross-vendor communication between rmw_fastrtps_cpp and other implementations is not functioning on Windows (Issue).When using OpenSplice (version < 6.9.190227) on macOS and Windows you might experience naming conflicts when when referencing field types with names from other packages if the same name also exist in the current package (Issue).
By updating to a newer OpenSplice version as well as at least the third patch release of Crystal the problem should be resolved.
On Linux updating to the latest Debian packages will include the newest OpenSplice version.

Code Examples:

Language: unknown
#include<tf2_ros/transform_listener.h>#include<rclcpp/rclcpp.hpp>...# Assuming you have a rclcpp::Node my_nodetf2_ros::Bufferbuffer(my_node.get_clock());tf2_ros::TransformListenertf_listener(buffer);
