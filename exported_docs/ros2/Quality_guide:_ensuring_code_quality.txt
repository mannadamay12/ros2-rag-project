Title: Quality guide: ensuring code quality
URL: https://docs.ros.org/en/jazzy/The-ROS2-Project/Contributing/Quality-Guide.html
Section: Installation
--------------------------------------------------------------------------------

Quality guide: ensuring code qualityTable of ContentsStatic code analysis as part of the ament package buildStatic Thread Safety Analysis via Code AnnotationDynamic analysis (data races & deadlocks)This page gives guidance about how to improve the software quality of ROS 2 packages, focusing on more specific areas than the Quality Practices section of theDeveloper Guide.The sections below intend to address ROS 2 core, application and ecosystem packages and the core client libraries, C++ and Python.
The solutions presented are motivated by design and implementation considerations to improve quality attributes like “Reliability”, “Security”, “Maintainability”, “Determinism”, etc. which relate to non-functional requirements.Static code analysis as part of the ament package buildContext:You have developed your C++ production code.You have created a ROS 2 package with build support withament.Problem:Library level static code analysis is not run as part of the package build procedure.Library level static code analysis needs to be executed manually.Risk of forgetting to execute library level static code analysis before building
a new package version.Solution:Use the integration capabilities ofamentto execute static code analysis as
part of the package build procedure.Implementation:Insert into the packagesCMakeLists.txtfile....if(BUILD_TESTING)find_package(ament_lint_autoREQUIRED)ament_lint_auto_find_test_dependencies()...
endif()...Insert theament_linttest dependencies into the packagespackage.xmlfile....
<packageformat="2">...<test_depend>ament_lint_auto</test_depend><test_depend>ament_lint_common</test_depend>...
</package>Examples:rclcpp:rclcpp/rclcpp/CMakeLists.txtrclcpp/rclcpp/package.xmlrclcpp_lifecycle:rclcpp/rclcpp_lifecycle/CMakeLists.txtrclcpp/rclcpp_lifecycle/package.xmlResulting context:The static code analysis tools supported byamentare run as part of the package build.Static code analysis tools not supported byamentneed to be executed separately.Static Thread Safety Analysis via Code AnnotationContext:You are developing/debugging your multithreaded C++ production codeYou access data from multiple threads in C++ codeProblem:Data races and deadlocks can lead to critical bugs.Solution:Utilize Clang’s staticThread Safety Analysisby annotating threaded codeContext For Implementation:To enable Thread Safety Analysis, code must be annotated to let the compiler know more about the semantics of the code.
These annotations are Clang-specific attributes - e.g.__attribute__(capability())).
Instead of using those attributes directly, ROS 2 provides preprocessor macros that are erased when using other compilers.These macros can be found inrcpputils/thread_safety_annotations.hppThe Thread Safety Analysis documentation statesThread safety analysis can be used with any threading library, but it does require that the threading API be wrapped in classes and methods which have the appropriate annotationsWe have decided that we want ROS 2 developers to be able to usestd::threading primitives directly for their development.
We do not want to provide our own wrapped types as is suggested above.There are three C++ standard libraries to be aware ofThe GNU standard librarylibstdc++- default on Linux, explicitly via the compiler option-stdlib=libstdc++The LLVM standard librarylibc++(also calledlibcxx) - default on macOS,  explicitly set by the compiler option-stdlib=libc++The Windows C++ Standard Library - not relevant to this use caselibcxxannotates itsstd::mutexandstd::lock_guardimplementations for Thread Safety Analysis. When using GNUlibstdc++, those annotations are not present, so Thread Safety Analysis cannot be used on non-wrappedstd::types.Therefore, to use Thread Safety Analysis directly withstd::types, we must uselibcxxImplementation:The code migration suggestions here are by no means complete - when writing (or annotating existing) threaded code, you are encouraged to utilize as many of the annotations as is logical for your use case.
However, this step-by-step is a great place to start!Enabling Analysis for Package/TargetWhen the C++ compiler is Clang, enable the-Wthread-safetyflag. Example below for CMake-based projectsif(CMAKE_CXX_COMPILER_IDMATCHES"Clang")add_compile_options(-Wthread-safety)# for your whole packagetarget_compile_options(${MY_TARGET}PUBLIC-Wthread-safety)# for a single library or executableendif()Annotating CodeStep 1 - Annotate data membersFind anywhere thatstd::mutexis used to protect some member dataAdd theRCPPUTILS_TSA_GUARDED_BY(mutex_name)annotation to the data that is protected by the mutexclassFoo{public:voidincr(intamount){std::lock_guard<std::mutex>lock(mutex_);bar+=amount;}voidget()const{returnbar;}private:mutablestd::mutexmutex_;intbarRCPPUTILS_TSA_GUARDED_BY(mutex_)=0;};Step 2 - Fix WarningsIn the above example -Foo::getwill produce a compiler warning! To fix it, lock before returning barvoidget()const{std::lock_guard<std::mutex>lock(mutex_);returnbar;}Step 3 - (Optional but Recommended) Refactor Existing Code to Private-Mutex PatternA recommended pattern in threaded C++ code is to always keep yourmutexas aprivate:member of the data structure. This makes data safety the concern of the containing structure, offloading that responsibility from users of the structure and minimizing the surface area of affected code.Making your locks private may require rethinking the interfaces to your data. This is a great exercise - here are a few things to considerYou may want to provide specialized interfaces for performing analysis that requires complex locking logic, e.g. counting members in a filtered set of a mutex-guarded map structure, instead of actually returning the underlying structure to consumersConsider copying to avoid blocking, where the amount of data is small. This can let other threads get on with accessing the shared data, which can potentially lead to better overall performance.Step 4 - (Optional) Enable Negative Capability Analysishttps://clang.llvm.org/docs/ThreadSafetyAnalysis.html#negative-capabilitiesNegative Capability Analysis lets you specify “this lock must not be held when calling this function”. It can reveal potential deadlock cases that other annotations cannot.Where you specified-Wthread-safety, add the additional flag-Wthread-safety-negativeOn any function that acquires a lock, use theRCPPUTILS_TSA_REQUIRES(!mutex)patternHow to run the analysisThe ROS CI build farm runs a nightly job withlibcxx, which will surface any issues in the ROS 2 core stack by being marked “Unstable” when Thread Safety Analysis raises warningsFor local runs, you have the following options, all equivalentUse the colconclang-libcxx mixin(see thedocumentationfor configuring mixins)colconbuild--mixinclang-libcxxPassing compiler to CMakecolconbuild--cmake-args-DCMAKE_C_COMPILER=clang-DCMAKE_CXX_COMPILER=clang++-DCMAKE_CXX_FLAGS='-stdlib=libc++ -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS'-DFORCE_BUILD_VENDOR_PKG=ON--no-warn-unused-cliOverriding system compilerCC=clangCXX=clang++colconbuild--cmake-args-DCMAKE_CXX_FLAGS='-stdlib=libc++ -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS'-DFORCE_BUILD_VENDOR_PKG=ON--no-warn-unused-cliResulting Context:Potential deadlocks and race conditions will be surfaced at compile time, when using Clang andlibcxxDynamic analysis (data races & deadlocks)Context:You are developing/debugging your multithreaded C++ production code.You use pthreads or C++11 threading + llvm libc++ (in case of ThreadSanitizer).You do not use Libc/libstdc++ static linking (in case of ThreadSanitizer).You do not build non-position-independent executables (in case of ThreadSanitizer).Problem:Data races and deadlocks can lead to critical bugs.Data races and deadlocks cannot be detected using static analysis (reason: limitation of static analysis).Data races and deadlocks must not show up during development debugging / testing (reason: usually not all possible control paths through production code exercised).Solution:Use a dynamic analysis tool which focuses on finding data races and deadlocks (here clang ThreadSanitizer).Implementation:Compile and link the production code with clang using the option-fsanitize=thread(this instruments the production code).In case different production code shall be executed during analysis consider conditional compilation e.g.ThreadSanitizers _has_feature(thread_sanitizer).In case some code shall not be instrumented considerThreadSanitizers _/*attribute*/_((no_sanitize(“thread”))).In case some files shall not be instrumented consider file or function-level exclusionThreadSanitizers blacklisting, more specific:ThreadSanitizers Sanitizer Special Case Listor withThreadSanitizers no_sanitize(“thread”)and use the option--fsanitize-blacklist.Resulting context:Higher chance to find data races and deadlocks in production code before deploying it.Analysis result may lack reliability, tool in beta phase stage (in case of ThreadSanitizer).Overhead due to production code instrumentation (maintenance of separate branches for instrumented/not instrumented production code, etc.).Instrumented code needs more memory per thread (in case of ThreadSanitizer).Instrumented code maps a lot virtual address space (in case of ThreadSanitizer).

Code Examples:

Language: unknown
...if(BUILD_TESTING)find_package(ament_lint_autoREQUIRED)ament_lint_auto_find_test_dependencies()...
endif()...

Language: unknown
...
<packageformat="2">...<test_depend>ament_lint_auto</test_depend><test_depend>ament_lint_common</test_depend>...
</package>

Language: unknown
if(CMAKE_CXX_COMPILER_IDMATCHES"Clang")add_compile_options(-Wthread-safety)# for your whole packagetarget_compile_options(${MY_TARGET}PUBLIC-Wthread-safety)# for a single library or executableendif()

Language: unknown
classFoo{public:voidincr(intamount){std::lock_guard<std::mutex>lock(mutex_);bar+=amount;}voidget()const{returnbar;}private:mutablestd::mutexmutex_;intbarRCPPUTILS_TSA_GUARDED_BY(mutex_)=0;};

Language: unknown
voidget()const{std::lock_guard<std::mutex>lock(mutex_);returnbar;}

Language: unknown
colconbuild--mixinclang-libcxx

Language: unknown
colconbuild--cmake-args-DCMAKE_C_COMPILER=clang-DCMAKE_CXX_COMPILER=clang++-DCMAKE_CXX_FLAGS='-stdlib=libc++ -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS'-DFORCE_BUILD_VENDOR_PKG=ON--no-warn-unused-cli

Language: unknown
CC=clangCXX=clang++colconbuild--cmake-args-DCMAKE_CXX_FLAGS='-stdlib=libc++ -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS'-DFORCE_BUILD_VENDOR_PKG=ON--no-warn-unused-cli
