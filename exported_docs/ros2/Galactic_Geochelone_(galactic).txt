Title: Galactic Geochelone (galactic)
URL: https://docs.ros.org/en/jazzy/Releases/Release-Galactic-Geochelone.html
Section: Installation
--------------------------------------------------------------------------------

Galactic Geochelone (galactic)Table of ContentsSupported PlatformsInstallationNew features in this ROS 2 releaseAbility to specify per-logger log levelsAbility to configure logging directory through environment variablesAbility to invokerosidlpipeline outside CMakeExternally configure QoS at start-upPython point_cloud2 utilities availableRViz2 Time Panelros2 topic echo can print serialized dataGet the YAML representation of messagesAbility to load parameter files at runtime through the ros2 commandTools to check for QoS incompatibilitiesUse launch substitutions in parameter filesSupport for unique network flowsRosbag2 New FeaturesChanges since the Foxy releaseDefault RMW changed to Eclipse Cyclone DDSConnext RMW changed to rmw_connextddsLarge improvements in testing and overall qualityrmwament_cmakenav2tf2_ros Python split out of tf2_rostf2_ros Python TransformListener uses global namespacerclcpprclpyrclcpp_actionrosidl_typesupport_introspection_crcl_lifecycle and rclcpp_lifecyclercl_lifecycle and rclcpp_lifecycleKnown Issuesros2clirqtrviz2Timeline before the releaseGalactic Geocheloneis the seventh release of ROS 2.
What follows is highlights of the important changes and features in Galactic Geochelone since the last release.
For a list of all of the changes since Foxy, see thelong form changelog.Supported PlatformsGalactic Geochelone is primarily supported on the following platforms:Tier 1 platforms:Ubuntu 20.04 (Focal):amd64andarm64Windows 10 (Visual Studio 2019):amd64Tier 2 platforms:RHEL 8:amd64Tier 3 platforms:Ubuntu 20.04 (Focal):arm32Debian Bullseye (11):amd64,arm64andarm32OpenEmbedded Thud (2.6) / webOS OSE:arm32andarm64Mac macOS 10.14 (Mojave):amd64For more information about RMW implementations, compiler / interpreter versions, and system dependency versions seeREP 2000.InstallationInstall Galactic GeocheloneNew features in this ROS 2 releaseAbility to specify per-logger log levelsIt is now possible to specify different logging levels for different loggers on the command line:ros2rundemo_nodes_cpptalker--ros-args--log-levelWARN--log-leveltalker:=DEBUGThe above command sets a global log level of WARN, but sets the log level of the talker node messages to DEBUG.
The--log-levelcommand-line option can be passed an arbitrary number of times to set different log levels for each logger.Ability to configure logging directory through environment variablesIt is now possible to configure the logging directory through two environment variables:ROS_LOG_DIRandROS_HOME.
The logic is as follows:Use$ROS_LOG_DIRifROS_LOG_DIRis set and not empty.Otherwise, use$ROS_HOME/log, using~/.rosforROS_HOMEif not set or if empty.Thus the default value stays the same:~/.ros/log.Related PRs:ros2/rcl_logging#53andros2/launch#460.For example:ROS_LOG_DIR=/tmp/fooros2rundemo_nodes_cpptalkerWill place all logs in/tmp/foo.ROS_HOME=/path/to/homeros2rundemo_nodes_cpptalkerWill place all logs in/path/to/home/log.Ability to invokerosidlpipeline outside CMakeIt is now straightforward to invoke therosidlinterface generation pipeline outside CMake.
Source code generators and interface definition translators are accessible through a unified command line interface.For example, given aDemomessage in somedemopackage like:mkdir-pdemo/msgcddemo
cat<< EOF > msg/Demo.msgstd_msgs/Header headergeometry_msgs/Twist twistgeometry_msgs/Accel accelEOFit is easy to generate C, C++, and Python support source code:rosidlgenerate-ogen-tc-tcpp-tpy-I$(ros2pkgprefix--sharestd_msgs)/..\-I$(ros2pkgprefix--sharegeometry_msgs)/..demomsg/Demo.msgGenerated source code will be put in thegendirectory.One may also translate the message definition to a different format for a third-party code generation tool to consume:rosidltranslate-ogen--toidl-I$(ros2pkgprefix--sharestd_msgs)/..\-I$(ros2pkgprefix--sharegeometry_msgs)/..demomsg/Demo.msgThe translated message definition will be put in thegendirectory.Note that these tools generate sources but do not build it – that responsibility is still on the caller.
This is a first step towards enablingrosidlinterface generation in build systems other than CMake.
See thedesign documentfor further reference and next steps.Externally configure QoS at start-upIt is now possible to externally configure the QoS settings for a node at start-up time.
QoS settings arenotconfigurable during runtime; they are only configurable at start-up.
Node authors must opt-in to enable changing QoS settings at start-up.
If the feature is enabled on a node, then QoS settings can be set with ROS parameters when a node first starts.Demos in C++ and Python can be found here.See thedesign document for more details.Note, user code handling parameter changes with registered callbacks should avoid rejecting updates for unknown parameters.
It was considered bad practice prior to Galactic, but with externally configurable QoS enabled it will result in a hard failure.Related PRs:ros2/rclcpp#1408andros2/rclpy#635Python point_cloud2 utilities availableSeveral utilities for interacting withPointCloud2 messagesin Python wereported to ROS 2.
These utilities allow one to get a list of points from a PointCloud2 message (read_pointsandread_points_list), and to create a PointCloud2 message from a list of points (create_cloudandcreate_cloud_xyz32).An example of creating PointCloud 2 message, then reading it back:importsensor_msgs_py.point_cloud2fromstd_msgs.msgimportHeaderpointlist=[[0.0,0.1,0.2]]pointcloud=sensor_msgs_py.point_cloud2.create_cloud_xyz32(Header(frame_id='frame'),pointlist)forpointinsensor_msgs_py.point_cloud2.read_points(pointcloud):print(point)RViz2 Time PanelThe Rviz2 Time Panel, which shows the current Wall and ROS time, along with the elapsed Wall and ROS time, has beenported to RViz2.
To enable the Time Panel, click on Panels -> Add New Panel, and select “Time”.
A panel that looks like the following will appear:ros2 topic echo can print serialized dataWhen debugging middleware issues, it can be useful to see the raw serialized data that the RMW is sending.
The–raw command-line flagwas added toros2topicechoto show this data.
To see this in action, run the following commands.Terminal 1:$ros2topicpub/chatterstd_msgs/msg/String"data: 'hello'"Terminal 2:$ros2topicecho--raw/chatter
b'\x00\x01\x00\x00\x06\x00\x00\x00hello\x00\x00\x00'---Get the YAML representation of messagesIt is now possible to get a YAML representation of all messages in C++ using theto_yamlfunction.
An example of code that prints out the YAML representation:#include<cstdio>#include<std_msgs/msg/string.hpp>intmain(){std_msgs::msg::Stringmsg;msg.data="hello world";printf("%s",rosidl_generator_traits::to_yaml(msg).c_str());return0;}Ability to load parameter files at runtime through the ros2 commandROS 2 has long had the ability to specify parameter values at startup (through command-line arguments or a YAML file), and to dump current parameters out to a file (throughros2paramdump).
Galactic adds the ability toload parameter values at runtimefrom a YAML file using theros2paramloadverb.
For example:Terminal 1:$ros2rundemo_nodes_cppparameter_blackboardTerminal 2:$ros2paramset/parameter_blackboardfoobar# sets 'foo' parameter to value 'bar'$ros2paramdump/parameter_blackboard# dumps current value of parameters to ./parameter_blackboard.yaml$ros2paramset/parameter_blackboardfoodifferent# sets 'foo' parameter to value 'different'$ros2paramload/parameter_blackboard./parameter_blackboard.yaml# reloads previous state of parameters, 'foo' is back to 'bar'Tools to check for QoS incompatibilitiesBuilt on top of new QoS compatibility check APIs,ros2doctorandrqt_graphcan now detect and report QoS incompatibilities between publishers and subscriptions.Given a publisher and a subscription withincompatible QoS settings:Terminal 1:$ros2rundemo_nodes_pytalker_qos-n1000# i.e. best_effort publisherTerminal 2:$ros2rundemo_nodes_pylistener_qos--reliable-n1000# i.e. reliable subscriptionros2doctorreports:$ros2doctor--report# ...QOSCOMPATIBILITYLIST
topic[type]:/chatter[std_msgs/msg/String]publishernode:talker_qos
subscribernode:listener_qos
compatibilitystatus:ERROR:Besteffortpublisherandreliablesubscription;# ...whilerqt_graphshows:Related PRs:ros2/ros2cli#621,ros-visualization/rqt_graph#61Use launch substitutions in parameter filesJust likerosparamtags in ROS 1roslaunch,launch_roscan now evaluate substitutions in parameter files.For example, given someparameter_file_with_substitutions.yamllike the following:/**:ros__parameters:launch_date:$(command date)Setallow_subststoTrueto get substitutions evaluated uponNodelaunch:importlaunchimportlaunch_ros.parameter_descriptionsimportlaunch_ros.actionsdefgenerate_launch_description():returnlaunch.LaunchDescription([launch_ros.actions.Node(package='demo_nodes_cpp',executable='parameter_blackboard',parameters=[launch_ros.parameter_descriptions.ParameterFile(param_file='parameter_file_with_substitutions.yaml',allow_substs=True)])])XML launch files also support this.<launch><nodepkg="demo_nodes_cpp"exec="parameter_blackboard"><paramfrom="parameter_file_with_substitutions.yaml"allow_substs="true"/></node></launch>Related PR:ros2/launch_ros#168Support for unique network flowsApplications may now require UDP/TCP and IP-based RMW implementations to provide uniquenetwork flows(i.e. uniqueDifferentiated Services Code Pointsand/or uniqueIPv6 Flow Labelsand/or unique ports in IP packet headers) for publishers and subscriptions, enabling QoS specifications for these IP streams in network architectures that support such a feature, like 5G networks.To see this in action, you may run these C++ examples (to be found in theros2/examplesrepository):Terminal 1:ros2runexamples_rclcpp_minimal_publisherpublisher_member_function_with_unique_network_flow_endpointsTerminal 2:ros2runexamples_rclcpp_minimal_subscribersubscriber_member_function_with_unique_network_flow_endpointsSee theUnique Network Flows design documentfor further reference.Rosbag2 New FeaturesSplit recording by timeIn Foxy, you could only split bags as they were recording by the size of the bag, now you can also split by the elapsed time.
The following command will split bagfiles into 100-second chunks.ros2bagrecord--all--max-bag-duration100ros2 bag listThis new command lists installed plugins of various types that rosbag2 uses.$ros2bagliststorage
rosbag2_v2
sqlite3

$ros2baglistconverter
rosbag_v2_converterCompression implementation is a pluginIn Foxy, rosbag2 compression was hardcoded with a Zstd library implementation.
This has been rearchitected so that compression implementations are a plugin, and can be swapped out without modifying the core rosbag2 codebase.
The default plugin that ships withros-galactic-rosbag2is still the Zstd plugin - but now more can be released and used, and by selectively installing packages Zstd could be excluded from an installation.Compress per-messageIn Foxy, you could automatically compress each rosbag file as it was split (per-file compression), but now you can also specify per-message compression.ros2bagrecord--all--compression-formatzstd--compression-modemessageRosbag2 Python APIA new packagerosbag2_pyhas been released in Galactic, which provides a Python API.
This package is apybind11binding around the C++ API.
As of the initial Galactic release, it does not yet expose all functionality available via therosbag2_cppAPI, but it is the sole connection for theros2bagCLI tool, so a good deal of functionality is available.performance testing package and performance improvementsA thorough performance analysis project was performed on rosbag2 since the Foxy release.
The full initial report is available athttps://github.com/ros2/rosbag2/blob/galactic/rosbag2_performance/rosbag2_performance_benchmarking/docs/rosbag2_performance_improvements.pdf.
The packagerosbag2_performance_benchmarkingprovides tools to run performance analyses, especially on recording, which helps us maintain and improve the performance of rosbag2.Following this report, key work was done do improve the performance to a much more usable state for actual robot workflows.
To highlight a key metric - in a high bandwidth stress test (200Mbps), the Foxy release dropped up to 70% of messages, whereas the Galactic version was approximately 100% retention.
Please see the linked report for more details.--regexand--excludeoptions for topic selectionThe new recording options--regexand--excludeallow for fine-tuning the topics recorded in a bag, without having to explicitly list all topics.
These options may be used together or separately, and in conjunction with--allThe following command will record only topics with “scan” in the name.ros2bagrecord--regex"*scan*"The following command will record all topics except for ones in/my_namespace/ros2bagrecord--all--exclude"/my_namespace/*"ros2bagreindexROS 2 bags are represented by a directory, instead of a single file.
This directory contains ametadata.yamlfile, and one or more bag files.
When themetadata.yamlfile is lost or missing,ros2bagreindex$bag_dirwill attempt to reconstruct it by reading all the bag files in the directory.Playback time controlNew controls have been added for rosbag2 playback - pause & resume, change rate, and play-next.
As of the Galactic release, these controls are exposed only as services on the rosbag2 player node.
Development is in progress to expose them to keyboard controls as well inros2bagplay, but until then a user application with buttons or keyboard controls may be trivially implemented to call these services.# In one shell$ros2bagplaymy_bag# In another shell$ros2servicelist-t
/rosbag2_player/get_rate[rosbag2_interfaces/srv/GetRate]/rosbag2_player/is_paused[rosbag2_interfaces/srv/IsPaused]/rosbag2_player/pause[rosbag2_interfaces/srv/Pause]/rosbag2_player/play_next[rosbag2_interfaces/srv/PlayNext]/rosbag2_player/resume[rosbag2_interfaces/srv/Resume]/rosbag2_player/set_rate[rosbag2_interfaces/srv/SetRate]/rosbag2_player/toggle_paused[rosbag2_interfaces/srv/TogglePaused]# Check if playback is paused$ros2servicecall/rosbag2_player/is_pausedrosbag2_interfaces/IsPaused# Pause playback$ros2servicecall/rosbag2_player/pauserosbag2_interfaces/Pause# Resume playback$ros2servicecall/rosbag2_player/resumerosbag2_interfaces/Resume# Change the paused state of playback to its opposite. If playing, pauses. If paused, resumes.$ros2servicecall/rosbag2_player/toggle_pausedrosbag2_interfaces/TogglePaused# Get the current playback rate$ros2servicecall/rosbag2_player/get_rate# Set the current playback rate (must be > 0)$ros2servicecall/rosbag2_player/set_raterosbag2_interfaces/SetRate"rate: 0.1"# Play a single next message (only works while paused)$ros2servicecall/rosbag2_player/play_nextrosbag2_interfaces/PlayNextPlayback publishes /clockRosbag2 can also dictate “simulation time” by publishing to the/clocktopic during playback.
The following commands will publish the clock message at a regular interval.# Publish at default rate - 40Hzros2bagplaymy_bag--clock# Publish at specific rate - 100Hzros2bagplaymy_bag--clock100Changes since the Foxy releaseDefault RMW changed to Eclipse Cyclone DDSDuring the Galactic development process, the ROS 2 Technical Steering Committeevotedto change the default ROS middleware (RMW) toEclipse Cyclone DDSproject ofEclipse Foundation.
Without any configuration changes, users will get Eclipse Cyclone DDS by default.
Fast DDS and Connext are still Tier-1 supported RMW vendors, and users can opt-in to use one of these RMWs at their discretion by using theRMW_IMPLEMENTATIONenvironment variable.
See theWorking with multiple RMW implementations guidefor more information.Connext RMW changed to rmw_connextddsA new RMW for Connext calledrmw_connextddswas merged for Galactic.
This RMW has better performance and fixes many of the issues with the older RMWrmw_connext_cpp.Large improvements in testing and overall qualityGalactic contains many changes that fix race conditions, plug memory leaks, and fix user reported problems.
Besides these changes, there was a concerted effort during Galactic development to improve overall quality of the system by implementingREP 2004.
Therclcpppackage and all of its dependencies (which include most of the ROS 2 non-Python core packages) were brought up toQuality Level 1by:Having a version policy (QL1 requirement 1)Having a documented change control process (QL1 requirement 2)Documenting all features and public APIs (QL1 requirement 3)Adding many additional tests (QL1 requirement 4):System tests for all featuresUnit tests for all public APIsNightly performance testsCode coverage at 95%Having all runtime dependencies of packages be at least as high as the package (QL1 requirement 5)Supporting all of the REP-2000 platforms (QL1 requirement 6)Having a vulnerability disclosure policy (QL1 requirement 7)rmwNew API for checking QoS profile compatibilityrmw_qos_profile_check_compatibleis a new function for checking the compatibility of two QoS profiles.RMW vendors should implement this API for QoS debugging and introspection features in tools such asrqt_graphto work correctly.Related PR:ros2/rmw#299ament_cmakeament_install_python_package()now installs a Python eggBy installing a flat Python egg, Python packages installed usingament_install_python_package()can be discovered using modules such aspkg_resourcesand`importlib.metadata. Also, additional metadata can be provided in asetup.cfgfile (including entry points).Related PR:ament/ament_cmake#326ament_target_dependencies()handles SYSTEM dependenciesSome package dependencies can now be marked as SYSTEM dependencies, helping to cope with warnings in external code. Typically, SYSTEM dependencies are also excluded from dependency calculations – use them with care.Related PR:ament/ament_cmake#297nav2Changes include, but are not limited to, a number of stability improvements, new plugins, interface changes, costmap filters.
SeeMigration Guidesfor full listtf2_ros Python split out of tf2_rosThe Python code that used to live in tf2_ros has been moved into its own package named tf2_ros_py.
Any existing Python code that depends on tf2_ros will continue to work, but the package.xml of those packages should be amended toexec_dependon tf2_ros_py.tf2_ros Python TransformListener uses global namespaceThe PythonTransformListenernow subscribes to/tfand/tf_staticin the global namespace.
Previously, it was susbcribing in the node’s namespace.
This means that the node’s namespace will no longer have an effect on the/tfand/tf_staticsubscriptions.For example:ros2runtf2_rostf2_echo--ros-args-r__ns:=/test--odombase_linkwill subscribe to/tfand/tf_static, asros2topiclistwill show.Related PR:ros2/geometry2#390rclcppChange in spin_until_future_complete template parametersThe first template parameter ofExecutor::spin_until_future_completewas the future result typeResultT, and the method only accepted astd::shared_future<ResultT>.
In order to accept other types of futures (e.g.:std::future), that parameter was changed to the future type itself.In places where aspin_until_future_completecall was relying on template argument deduction, no change is needed.
If not, this is an example diff:std::shared_future<MyResultT> future;
...-executor.spin_until_future_complete<MyResultT>(future);+executor.spin_until_future_complete<std::shared_future<MyResultT>>(future);For more details, seeros2/rclcpp#1160.
For an example of the needed changes in user code, seeros-visualization/interactive_markers#72.Change in default/clocksubscription QoS profileThe default was changed from a reliable communication with history depth 10 to a best effort communication with history depth 1.
Seeros2/rclcpp#1312.Waitable APIWaitable API was modified to avoid issues with theMultiThreadedExecutor.
This only affects users implementing a custom waitable.
Seeros2/rclcpp#1241for more details.Change inrclcpp’s logging macrosPreviously, the logging macros were vulnerable to aformat string attack, where the format string is evaluated and can potentially execute code, read the stack, or cause a segmentation fault in the running program.
To address this security issue, the logging macro now accepts only string literals for it’s format string argument.If you previously had code like:constchar*my_const_char_stringformat="Foo";RCLCPP_DEBUG(get_logger(),my_const_char_string);you should now replace it with:constchar*my_const_char_stringformat="Foo";RCLCPP_DEBUG(get_logger(),"%s",my_const_char_string);or:RCLCPP_DEBUG(get_logger(),"Foo");This change removes some convenience from the logging macros, asstd::strings are no longer accepted as the format argument.If you previously had code with no format arguments like:std::stringmy_std_string="Foo";RCLCPP_DEBUG(get_logger(),my_std_string);you should now replace it with:std::stringmy_std_string="Foo";RCLCPP_DEBUG(get_logger(),"%s",my_std_string.c_str());NoteIf you are using astd::stringas a format string with format arguments, converting that string to achar*and using it as the format string will yield a format security warning. That’s because the compiler has no way at compile to introspect into thestd::stringto verify the arguments.  To avoid the security warning, we recommend you build the string manually and pass it in with no format arguments like the previous example.std::stringstreamtypes are still accepted as arguments to the stream logging macros.
Seeros2/rclcpp#1442for more details.Parameter types are now static by defaultPreviously, the type of a parameter could be changed when a parameter was set.
For example, if a parameter was declared as an integer, a later call to set the parameter could change that type to a string.
This behavior could lead to bugs, and is rarely what the user wants.
As of Galactic parameter types are static by default, and attempts to change the type will fail.
If the previous dynamic behavior is desired, there is an mechanism to opt it in (see the code below).// declare integer parameter with default value, trying to set it to a different type will fail.node->declare_parameter("my_int",5);// declare string parameter with no default and mandatory user provided override.// i.e. the user must pass a parameter file setting it or a command line rule -p <param_name>:=<value>node->declare_parameter("string_mandatory_override",rclcpp::PARAMETER_STRING);// Conditionally declare a floating point parameter with a mandatory override.// Useful when the parameter is only needed depending on other conditions and no default is reasonable.if(mode=="modeA"){node->declare_parameter("conditionally_declare_double_parameter",rclcpp::PARAMETER_DOUBLE);}// You can also get the old dynamic typing behavior if you want:rcl_interfaces::msg::ParameterDescriptordescriptor;descriptor.dynamic_typing=true;node->declare_parameter("dynamically_typed_param",rclcpp::ParameterValue{},descriptor);For more details seehttps://github.com/ros2/rclcpp/blob/galactic/rclcpp/doc/notes_on_statically_typed_parameters.md.New API for checking QoS profile compatibilityqos_check_compatibleis a new function for checking the compatibility of two QoS profiles.Related PR:ros2/rclcpp#1554rclpyRemoval of deprecated Node.set_parameters_callbackThe methodNode.set_parameters_callbackwasdeprecated in ROS Foxyand has beenremoved in ROS Galactic.
UseNode.add_on_set_parameters_callback()instead.
Here is some example code using it.importrclpyimportrclpy.nodefromrcl_interfaces.msgimportParameterTypefromrcl_interfaces.msgimportSetParametersResultrclpy.init()node=rclpy.node.Node('callback_example')node.declare_parameter('my_param','initial value')defon_parameter_event(parameter_list):forparameterinparameter_list:node.get_logger().info(f'Got{parameter.name}={parameter.value}')returnSetParametersResult(successful=True)node.add_on_set_parameters_callback(on_parameter_event)rclpy.spin(node)Run this command to see the parameter callback in action.ros2paramset/callback_examplemy_param"Hello World"Parameter types are now static by defaultIn Foxy and earlier a call to set a parameter could change its type.
As of Galactic parameter types are static and cannot be changed by default.
If the previous behavior is desired, then setdynamic_typingto true in the parameter descriptor.
Here is an example.importrclpyimportrclpy.nodefromrcl_interfaces.msgimportParameterDescriptorrclpy.init()node=rclpy.node.Node('static_param_example')node.declare_parameter('static_param','initial value')node.declare_parameter('dynamic_param','initial value',descriptor=ParameterDescriptor(dynamic_typing=True))rclpy.spin(node)Run these commands to see how statically and dynamically typed parameters are different.$ros2paramset/static_param_exampledynamic_param42Set parameter successful$ros2paramset/static_param_examplestatic_param42Setting parameter failed: Wrong parameter type, expected 'Type.STRING' got 'Type.INTEGER'For more details seehttps://github.com/ros2/rclcpp/blob/galactic/rclcpp/doc/notes_on_statically_typed_parameters.md.New API for checking QoS profile compatibilityrclpy.qos.qos_check_compatibleisa new functionfor checking the compatibility of two QoS profiles.
If the profiles are compatible, then a publisher and subscriber using them will be able to talk to each other.importrclpy.qospublisher_profile=rclpy.qos.qos_profile_sensor_datasubscription_profile=rclpy.qos.qos_profile_parameter_eventsprint(rclpy.qos.qos_check_compatible(publisher_profile,subscription_profile))$python3qos_check_compatible_example.py(QoSCompatibility.ERROR, 'ERROR: Best effort publisher and reliable subscription;')rclcpp_actionAction client goal response callback signature changedThe goal response callback should now take a shared pointer to a goal handle, instead of a future.Forexample, old signature:voidgoal_response_callback(std::shared_future<GoalHandleFibonacci::SharedPtr>future)New signature:voidgoal_response_callback(GoalHandleFibonacci::SharedPtrgoal_handle)Related PR:ros2/rclcpp#1311rosidl_typesupport_introspection_cAPI break in function that gets an element from an arrayThe signature of the function was changed because it was semantically different to all the other functions used to get an element from an array or sequence.
This only affects authors of rmw implementations using the introspection typesupport.For further details, seeros2/rosidl#531.rcl_lifecycle and rclcpp_lifecycleRCL’s lifecycle state machine gets new init APIThe lifecycle state machine in rcl_lifecycle was modified to expect a newly introduced options struct, combining general configurations for the state machine.
The option struct allows to indicate whether the state machine shall be initialized with default values, whether its attached services are active and which allocator to be used.rcl_ret_trcl_lifecycle_state_machine_init(rcl_lifecycle_state_machine_t*state_machine,rcl_node_t*node_handle,constrosidl_message_type_support_t*ts_pub_notify,constrosidl_service_type_support_t*ts_srv_change_state,constrosidl_service_type_support_t*ts_srv_get_state,constrosidl_service_type_support_t*ts_srv_get_available_states,constrosidl_service_type_support_t*ts_srv_get_available_transitions,constrosidl_service_type_support_t*ts_srv_get_transition_graph,constrcl_lifecycle_state_machine_options_t*state_machine_options);RCL’s lifecycle state machine stores allocator instanceThe options struct (discussed above) entails an instance of the allocator being used for initializing the state machine.
This options struct and there the embodied allocator are being stored within the lifecycle state machine.
As a direct consequence, thercl_lifecycle_finifunctionno longer expects an allocator in its fini function but rather uses the allocator set in the options struct for deallocating its internal data structures.rcl_ret_trcl_lifecycle_state_machine_fini(rcl_lifecycle_state_machine_t*state_machine,rcl_node_t*node_handle);RCLCPP’s lifecycle node exposes option to not instantiate servicesIn order to use rclcpp’s lifecycle nodes without exposing its internal services such aschange_state,get_stateet. al., the constructor of a lifecycle node has a newly introduced parameter indicating whether or not the services shall be available.
This boolean flag is set to true by default, not requiring any changes to existing API if not wished.explicitLifecycleNode(conststd::string&node_name,constrclcpp::NodeOptions&options=rclcpp::NodeOptions(),boolenable_communication_interface=true);Related PRs:ros2/rcl#882andros2/rclcpp#1507rcl_lifecycle and rclcpp_lifecycleRecording - Split by timeKnown Issuesros2cliDaemon slows down CLI on WindowsAs a workaround, CLI commands may be used without a daemon e.g.:ros2topiclist--no-daemonIssue is tracked byros2/ros2cli#637.rqtSome rqt_bag icons are missingThe icons to “Zoom In”, “Zoom Out”, “Zoom Home”, and “Toggle Thumbnails” are missing inrqt_bag.
The issue is tracked inros-visualization/rqt_bag#102Most rqt utilities don’t work standalone on WindowsLaunching the rqt utilities “standalone” on Windows (likeros2runrqt_graphrqt_graph) generally doesn’t work.
The workaround is to launch the rqt container process (rqt), and then insert the plugins to be used.rviz2RViz2 panel close buttons are blankThe upper right-hand corner of every RViz2 panel should contain an “X” to allow one to close the panel.
Those buttons are there, but the “X” inside of them is missing on all platforms.
The issue is being tracked inros2/rviz2#692.Timeline before the releaseMon. March 22, 2021 - AlphaPreliminary testing and stabilization of ROS Core[1]packages.Mon. April 5, 2021 - FreezeAPI and feature freeze for ROS Core[1]packages in Rolling Ridley.
Note that this includesrmw, which is a recursive dependency ofros_core.
Only bug fix releases should be made after this point.
New packages can be released independently.Mon. April 19, 2021 - BranchBranch from Rolling Ridley.rosdistrois reopened for Rolling PRs for ROS Core[1]packages.
Galactic development shifts fromros-rolling-*packages toros-galactic-*packages.Mon. April 26, 2021 - BetaUpdated releases of ROS Desktop[2]packages available.
Call for general testing.Mon. May 17, 2021 - RCRelease Candidate packages are built.Updated releases of ROS Desktop[2]packages available.Thu. May 20, 2021 - Distro FreezeFreeze rosdistro.
No PRs for Galactic on therosdistrorepo will be merged (reopens after the release announcement).Sun. May 23, 2021 - General AvailabilityRelease announcement.rosdistrois reopened for Galactic PRs.[1](1,2,3)Theros_corevariant is described inREP 2001 (ros-core).[2](1,2)Thedesktopvariant is described inREP 2001 (desktop-variants).

Code Examples:

Language: unknown
ros2rundemo_nodes_cpptalker--ros-args--log-levelWARN--log-leveltalker:=DEBUG

Language: unknown
ROS_LOG_DIR=/tmp/fooros2rundemo_nodes_cpptalker

Language: unknown
ROS_HOME=/path/to/homeros2rundemo_nodes_cpptalker

Language: unknown
mkdir-pdemo/msgcddemo
cat<< EOF > msg/Demo.msgstd_msgs/Header headergeometry_msgs/Twist twistgeometry_msgs/Accel accelEOF

Language: unknown
rosidlgenerate-ogen-tc-tcpp-tpy-I$(ros2pkgprefix--sharestd_msgs)/..\-I$(ros2pkgprefix--sharegeometry_msgs)/..demomsg/Demo.msg

Language: unknown
rosidltranslate-ogen--toidl-I$(ros2pkgprefix--sharestd_msgs)/..\-I$(ros2pkgprefix--sharegeometry_msgs)/..demomsg/Demo.msg

Language: unknown
importsensor_msgs_py.point_cloud2fromstd_msgs.msgimportHeaderpointlist=[[0.0,0.1,0.2]]pointcloud=sensor_msgs_py.point_cloud2.create_cloud_xyz32(Header(frame_id='frame'),pointlist)forpointinsensor_msgs_py.point_cloud2.read_points(pointcloud):print(point)

Language: unknown
$ros2topicpub/chatterstd_msgs/msg/String"data: 'hello'"

Language: unknown
$ros2topicecho--raw/chatter
b'\x00\x01\x00\x00\x06\x00\x00\x00hello\x00\x00\x00'---

Language: unknown
#include<cstdio>#include<std_msgs/msg/string.hpp>intmain(){std_msgs::msg::Stringmsg;msg.data="hello world";printf("%s",rosidl_generator_traits::to_yaml(msg).c_str());return0;}

Language: unknown
$ros2rundemo_nodes_cppparameter_blackboard

Language: unknown
$ros2paramset/parameter_blackboardfoobar# sets 'foo' parameter to value 'bar'$ros2paramdump/parameter_blackboard# dumps current value of parameters to ./parameter_blackboard.yaml$ros2paramset/parameter_blackboardfoodifferent# sets 'foo' parameter to value 'different'$ros2paramload/parameter_blackboard./parameter_blackboard.yaml# reloads previous state of parameters, 'foo' is back to 'bar'

Language: unknown
$ros2rundemo_nodes_pytalker_qos-n1000# i.e. best_effort publisher

Language: unknown
$ros2rundemo_nodes_pylistener_qos--reliable-n1000# i.e. reliable subscription

Language: unknown
$ros2doctor--report# ...QOSCOMPATIBILITYLIST
topic[type]:/chatter[std_msgs/msg/String]publishernode:talker_qos
subscribernode:listener_qos
compatibilitystatus:ERROR:Besteffortpublisherandreliablesubscription;# ...

Language: unknown
/**:ros__parameters:launch_date:$(command date)

Language: unknown
importlaunchimportlaunch_ros.parameter_descriptionsimportlaunch_ros.actionsdefgenerate_launch_description():returnlaunch.LaunchDescription([launch_ros.actions.Node(package='demo_nodes_cpp',executable='parameter_blackboard',parameters=[launch_ros.parameter_descriptions.ParameterFile(param_file='parameter_file_with_substitutions.yaml',allow_substs=True)])])

Language: unknown
<launch><nodepkg="demo_nodes_cpp"exec="parameter_blackboard"><paramfrom="parameter_file_with_substitutions.yaml"allow_substs="true"/></node></launch>

Language: unknown
ros2runexamples_rclcpp_minimal_publisherpublisher_member_function_with_unique_network_flow_endpoints

Language: unknown
ros2runexamples_rclcpp_minimal_subscribersubscriber_member_function_with_unique_network_flow_endpoints

Language: unknown
ros2bagrecord--all--max-bag-duration100

Language: unknown
$ros2bagliststorage
rosbag2_v2
sqlite3

$ros2baglistconverter
rosbag_v2_converter

Language: unknown
ros2bagrecord--all--compression-formatzstd--compression-modemessage

Language: unknown
ros2bagrecord--regex"*scan*"

Language: unknown
ros2bagrecord--all--exclude"/my_namespace/*"

Language: unknown
# In one shell$ros2bagplaymy_bag# In another shell$ros2servicelist-t
/rosbag2_player/get_rate[rosbag2_interfaces/srv/GetRate]/rosbag2_player/is_paused[rosbag2_interfaces/srv/IsPaused]/rosbag2_player/pause[rosbag2_interfaces/srv/Pause]/rosbag2_player/play_next[rosbag2_interfaces/srv/PlayNext]/rosbag2_player/resume[rosbag2_interfaces/srv/Resume]/rosbag2_player/set_rate[rosbag2_interfaces/srv/SetRate]/rosbag2_player/toggle_paused[rosbag2_interfaces/srv/TogglePaused]# Check if playback is paused$ros2servicecall/rosbag2_player/is_pausedrosbag2_interfaces/IsPaused# Pause playback$ros2servicecall/rosbag2_player/pauserosbag2_interfaces/Pause# Resume playback$ros2servicecall/rosbag2_player/resumerosbag2_interfaces/Resume# Change the paused state of playback to its opposite. If playing, pauses. If paused, resumes.$ros2servicecall/rosbag2_player/toggle_pausedrosbag2_interfaces/TogglePaused# Get the current playback rate$ros2servicecall/rosbag2_player/get_rate# Set the current playback rate (must be > 0)$ros2servicecall/rosbag2_player/set_raterosbag2_interfaces/SetRate"rate: 0.1"# Play a single next message (only works while paused)$ros2servicecall/rosbag2_player/play_nextrosbag2_interfaces/PlayNext

Language: unknown
# Publish at default rate - 40Hzros2bagplaymy_bag--clock# Publish at specific rate - 100Hzros2bagplaymy_bag--clock100

Language: unknown
ros2runtf2_rostf2_echo--ros-args-r__ns:=/test--odombase_link

Language: unknown
std::shared_future<MyResultT> future;
...-executor.spin_until_future_complete<MyResultT>(future);+executor.spin_until_future_complete<std::shared_future<MyResultT>>(future);

Language: unknown
constchar*my_const_char_stringformat="Foo";RCLCPP_DEBUG(get_logger(),my_const_char_string);

Language: unknown
constchar*my_const_char_stringformat="Foo";RCLCPP_DEBUG(get_logger(),"%s",my_const_char_string);

Language: unknown
RCLCPP_DEBUG(get_logger(),"Foo");

Language: unknown
std::stringmy_std_string="Foo";RCLCPP_DEBUG(get_logger(),my_std_string);

Language: unknown
std::stringmy_std_string="Foo";RCLCPP_DEBUG(get_logger(),"%s",my_std_string.c_str());

Language: unknown
// declare integer parameter with default value, trying to set it to a different type will fail.node->declare_parameter("my_int",5);// declare string parameter with no default and mandatory user provided override.// i.e. the user must pass a parameter file setting it or a command line rule -p <param_name>:=<value>node->declare_parameter("string_mandatory_override",rclcpp::PARAMETER_STRING);// Conditionally declare a floating point parameter with a mandatory override.// Useful when the parameter is only needed depending on other conditions and no default is reasonable.if(mode=="modeA"){node->declare_parameter("conditionally_declare_double_parameter",rclcpp::PARAMETER_DOUBLE);}// You can also get the old dynamic typing behavior if you want:rcl_interfaces::msg::ParameterDescriptordescriptor;descriptor.dynamic_typing=true;node->declare_parameter("dynamically_typed_param",rclcpp::ParameterValue{},descriptor);

Language: unknown
importrclpyimportrclpy.nodefromrcl_interfaces.msgimportParameterTypefromrcl_interfaces.msgimportSetParametersResultrclpy.init()node=rclpy.node.Node('callback_example')node.declare_parameter('my_param','initial value')defon_parameter_event(parameter_list):forparameterinparameter_list:node.get_logger().info(f'Got{parameter.name}={parameter.value}')returnSetParametersResult(successful=True)node.add_on_set_parameters_callback(on_parameter_event)rclpy.spin(node)

Language: unknown
ros2paramset/callback_examplemy_param"Hello World"

Language: unknown
importrclpyimportrclpy.nodefromrcl_interfaces.msgimportParameterDescriptorrclpy.init()node=rclpy.node.Node('static_param_example')node.declare_parameter('static_param','initial value')node.declare_parameter('dynamic_param','initial value',descriptor=ParameterDescriptor(dynamic_typing=True))rclpy.spin(node)

Language: unknown
$ros2paramset/static_param_exampledynamic_param42Set parameter successful$ros2paramset/static_param_examplestatic_param42Setting parameter failed: Wrong parameter type, expected 'Type.STRING' got 'Type.INTEGER'

Language: unknown
importrclpy.qospublisher_profile=rclpy.qos.qos_profile_sensor_datasubscription_profile=rclpy.qos.qos_profile_parameter_eventsprint(rclpy.qos.qos_check_compatible(publisher_profile,subscription_profile))

Language: unknown
$python3qos_check_compatible_example.py(QoSCompatibility.ERROR, 'ERROR: Best effort publisher and reliable subscription;')

Language: unknown
voidgoal_response_callback(std::shared_future<GoalHandleFibonacci::SharedPtr>future)

Language: unknown
voidgoal_response_callback(GoalHandleFibonacci::SharedPtrgoal_handle)

Language: unknown
rcl_ret_trcl_lifecycle_state_machine_init(rcl_lifecycle_state_machine_t*state_machine,rcl_node_t*node_handle,constrosidl_message_type_support_t*ts_pub_notify,constrosidl_service_type_support_t*ts_srv_change_state,constrosidl_service_type_support_t*ts_srv_get_state,constrosidl_service_type_support_t*ts_srv_get_available_states,constrosidl_service_type_support_t*ts_srv_get_available_transitions,constrosidl_service_type_support_t*ts_srv_get_transition_graph,constrcl_lifecycle_state_machine_options_t*state_machine_options);

Language: unknown
rcl_ret_trcl_lifecycle_state_machine_fini(rcl_lifecycle_state_machine_t*state_machine,rcl_node_t*node_handle);

Language: unknown
explicitLifecycleNode(conststd::string&node_name,constrclcpp::NodeOptions&options=rclcpp::NodeOptions(),boolenable_communication_interface=true);

Language: unknown
ros2topiclist--no-daemon
