Title: Creating a workspace
URL: https://docs.ros.org/en/jazzy/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.html
Section: Installation
--------------------------------------------------------------------------------

Creating a workspaceGoal:Create a workspace and learn how to set up an overlay for development and testing.Tutorial level:BeginnerTime:20 minutesContentsBackgroundPrerequisitesTasks1 Source ROS 2 environment2 Create a new directory3 Clone a sample repo4 Resolve dependencies5 Build the workspace with colcon6 Source the overlay7 Modify the overlaySummaryNext stepsBackgroundA workspace is a directory containing ROS 2 packages.
Before using ROS 2, it’s necessary to source your ROS 2 installation workspace in the terminal you plan to work in.
This makes ROS 2’s packages available for you to use in that terminal.You also have the option of sourcing an “overlay” - a secondary workspace where you can add new packages without interfering with the existing ROS 2 workspace that you’re extending, or “underlay”.
Your underlay must contain the dependencies of all the packages in your overlay.
Packages in your overlay will override packages in the underlay.
It’s also possible to have several layers of underlays and overlays, with each successive overlay using the packages of its parent underlays.PrerequisitesROS 2 installationcolcon installationgit installationturtlesim installationHaverosdep installedUnderstanding of basic terminal commands (here’s a guide for Linux)Text editor of your choiceTasks1 Source ROS 2 environmentYour main ROS 2 installation will be your underlay for this tutorial.
(Keep in mind that an underlay does not necessarily have to be the main ROS 2 installation.)Depending on how you installed ROS 2 (from source or binaries), and which platform you’re on, your exact source command will vary:LinuxmacOSWindowssource /opt/ros/jazzy/setup.bash. ~/ros2_install/ros2-osx/setup.bashRemember to use ax64NativeToolsCommandPromptforVS2019for executing the following commands, as we are going to build a workspace.call C:\dev\ros2\local_setup.batConsult theinstallation guideyou followed if these commands don’t work for you.2 Create a new directoryBest practice is to create a new directory for every new workspace.
The name doesn’t matter, but it is helpful to have it indicate the purpose of the workspace.
Let’s choose the directory nameros2_ws, for “development workspace”:LinuxmacOSWindowsmkdir -p ~/ros2_ws/srccd ~/ros2_ws/srcmkdir -p ~/ros2_ws/srccd ~/ros2_ws/srcmd \ros2_ws\srccd \ros2_ws\srcAnother best practice is to put any packages in your workspace into thesrcdirectory.
The above code creates asrcdirectory insideros2_wsand then navigates into it.3 Clone a sample repoEnsure you’re still in theros2_ws/srcdirectory before you clone.In the rest of the beginner developer tutorials, you will create your own packages, but for now you will practice putting a workspace together using existing packages.If you went through theBeginner: CLI Toolstutorials, you’ll be familiar withturtlesim, one of the packages inros_tutorials.A repo can have multiple branches.
You need to check out the one that targets your installed ROS 2 distro.
When you clone this repo, add the-bargument followed by that branch.In theros2_ws/srcdirectory, run the following command:git clone https://github.com/ros/ros_tutorials.git -b jazzyNowros_tutorialsis cloned in your workspace.  Theros_tutorialsrepository contains theturtlesimpackage, which we’ll use in the rest of this tutorial.  The other packages in this repository are not built because they contain aCOLCON_IGNOREfile.So far you have populated your workspace with a sample package, but it isn’t a fully-functional workspace yet.
You need to resolve the dependencies first and then build the workspace.4 Resolve dependenciesBefore building the workspace, you need to resolve the package dependencies.
You may have all the dependencies already, but best practice is to check for dependencies every time you clone.
You wouldn’t want a build to fail after a long wait only to realize that you have missing dependencies.From the root of your workspace (ros2_ws), run the following command:LinuxmacOSWindows# cd if you're still in the ``src`` directory with the ``ros_tutorials`` clonecd..
rosdepinstall-i--from-pathsrc--rosdistrojazzy-yrosdep only runs on Linux, so you can skip ahead to section “5 Build the workspace with colcon”.rosdep only runs on Linux, so you can skip ahead to section “5 Build the workspace with colcon”.If you installed ROS 2 on Linux from source or the binary archive, you will need to use the rosdep command from their installation instructions.
Here are thefrom-source rosdep sectionand thebinary archive rosdep section.If you already have all your dependencies, the console will return:#AllrequiredrosdepsinstalledsuccessfullyPackages declare their dependencies in the package.xml file (you will learn more about packages in the next tutorial).
This command walks through those declarations and installs the ones that are missing.
You can learn more aboutrosdepin another tutorial (coming soon).5 Build the workspace with colconFrom the root of your workspace (ros2_ws), you can now build your packages using the command:LinuxmacOSWindowscolcon buildcolcon buildcolcon build --merge-installWindows doesn’t allow long paths, somerge-installwill combine all the paths into theinstalldirectory.The console will return the following message:Starting >>> turtlesimFinished <<< turtlesim [5.49s]Summary: 1 package finished [5.58s]NoteOther useful arguments forcolconbuild:--packages-up-tobuilds the package you want, plus all its dependencies, but not the whole workspace (saves time)--symlink-installsaves you from having to rebuild every time you tweak python scripts--event-handlersconsole_direct+shows console output while building (can otherwise be found in thelogdirectory)--executorsequentialprocesses the packages one by one instead of using parallelismOnce the build is finished, enter the command in the workspace root (~/ros2_ws):LinuxmacOSWindowslslsdirAnd you will see that colcon has created new directories:build  install  log  srcTheinstalldirectory is where your workspace’s setup files are, which you can use to source your overlay.6 Source the overlayBefore sourcing the overlay, it is very important that you open a new terminal, separate from the one where you built the workspace.
Sourcing an overlay in the same terminal where you built, or likewise building where an overlay is sourced, may create complex issues.In the new terminal, source your main ROS 2 environment as the “underlay”, so you can build the overlay “on top of” it:LinuxmacOSWindowssource /opt/ros/jazzy/setup.bash. ~/ros2_install/ros2-osx/setup.bashIn this case you can use a normal command prompt, as we are not going to build any workspace in this terminal.call C:\dev\ros2\local_setup.batGo into the root of your workspace:LinuxmacOSWindowscd ~/ros2_wscd ~/ros2_wscd \ros2_wsIn the root, source your overlay:LinuxmacOSWindowssource install/local_setup.bash. install/local_setup.bashcall install\setup.batNoteSourcing thelocal_setupof the overlay will only add the packages available in the overlay to your environment.setupsources the overlay as well as the underlay it was created in, allowing you to utilize both workspaces.So, sourcing your main ROS 2 installation’ssetupand then theros2_wsoverlay’slocal_setup, like you just did,
is the same as just sourcingros2_ws’ssetup, because that includes the environment of its underlay.Now you can run theturtlesimpackage from the overlay:ros2 run turtlesim turtlesim_nodeBut how can you tell that this is the overlay turtlesim running, and not your main installation’s turtlesim?Let’s modify turtlesim in the overlay so you can see the effects:You can modify and rebuild packages in the overlay separately from the underlay.The overlay takes precedence over the underlay.7 Modify the overlayYou can modifyturtlesimin your overlay by editing the title bar on the turtlesim window.
To do this, locate theturtle_frame.cppfile in~/ros2_ws/src/ros_tutorials/turtlesim/src.
Openturtle_frame.cppwith your preferred text editor.Find the functionsetWindowTitle("TurtleSim");, change the value"TurtleSim"to"MyTurtleSim", and save the file.Return to the first terminal where you rancolconbuildearlier and run it again.Return to the second terminal (where the overlay is sourced) and run turtlesim again:ros2 run turtlesim turtlesim_nodeYou will see the title bar on the turtlesim window now says “MyTurtleSim”.Even though your main ROS 2 environment was sourced in this terminal earlier, the overlay of yourros2_wsenvironment takes precedence over the contents of the underlay.To see that your underlay is still intact, open a brand new terminal and source only your ROS 2 installation.
Run turtlesim again:ros2 run turtlesim turtlesim_nodeYou can see that modifications in the overlay did not actually affect anything in the underlay.SummaryIn this tutorial, you sourced your main ROS 2 distro install as your underlay, and created an overlay by cloning and building packages in a new workspace.
The overlay gets prepended to the path, and takes precedence over the underlay, as you saw with your modified turtlesim.Using overlays is recommended for working on a small number of packages, so you don’t have to put everything in the same workspace and rebuild a huge workspace on every iteration.Next stepsNow that you understand the details behind creating, building and sourcing your own workspace, you can learn how tocreate your own packages.

Code Examples:

Language: unknown
source /opt/ros/jazzy/setup.bash

Language: unknown
. ~/ros2_install/ros2-osx/setup.bash

Language: unknown
call C:\dev\ros2\local_setup.bat

Language: unknown
mkdir -p ~/ros2_ws/srccd ~/ros2_ws/src

Language: unknown
mkdir -p ~/ros2_ws/srccd ~/ros2_ws/src

Language: unknown
md \ros2_ws\srccd \ros2_ws\src

Language: unknown
git clone https://github.com/ros/ros_tutorials.git -b jazzy

Language: unknown
# cd if you're still in the ``src`` directory with the ``ros_tutorials`` clonecd..
rosdepinstall-i--from-pathsrc--rosdistrojazzy-y

Language: unknown
#Allrequiredrosdepsinstalledsuccessfully

Language: unknown
colcon build

Language: unknown
colcon build

Language: unknown
colcon build --merge-install

Language: unknown
Starting >>> turtlesimFinished <<< turtlesim [5.49s]Summary: 1 package finished [5.58s]

Language: unknown
ls

Language: unknown
ls

Language: unknown
dir

Language: unknown
build  install  log  src

Language: unknown
source /opt/ros/jazzy/setup.bash

Language: unknown
. ~/ros2_install/ros2-osx/setup.bash

Language: unknown
call C:\dev\ros2\local_setup.bat

Language: unknown
cd ~/ros2_ws

Language: unknown
cd ~/ros2_ws

Language: unknown
cd \ros2_ws

Language: unknown
source install/local_setup.bash

Language: unknown
. install/local_setup.bash

Language: unknown
call install\setup.bat

Language: unknown
ros2 run turtlesim turtlesim_node

Language: unknown
ros2 run turtlesim turtlesim_node

Language: unknown
ros2 run turtlesim turtlesim_node
