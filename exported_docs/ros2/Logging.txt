Title: Logging
URL: https://docs.ros.org/en/jazzy/Tutorials/Demos/Logging-and-logger-configuration.html
Section: Installation
--------------------------------------------------------------------------------

LoggingTable of ContentsUsing log statements in codeBasic loggingLogging only the first timeLogging all but the first timeLogging throttledLogging throttled all but the first timeLogging demoLogging directory configurationLogger level configuration: programmaticallyLogger level configuration: externallyUsing the logger config componentLogger level configuration: command lineConsole output formattingConsole output colorizingDefault stream for console outputLine buffered console outputSetting the log file name prefixSeethe logging pagefor details on available functionality.Using log statements in codeBasic loggingThe following code will output a log message from a ROS 2 node atDEBUGseverity:C++Python// printf styleRCLCPP_DEBUG(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_DEBUG_STREAM(node->get_logger(),"My log message "<<4);node.get_logger().debug('My log message%d'%(4))Note that in both cases, no trailing newline is added, as the logging infrastructure will automatically add one.Logging only the first timeThe following code will output a log message from a ROS 2 node atINFOseverity, but only the first time it is hit:C++Python// printf styleRCLCPP_INFO_ONCE(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_INFO_STREAM_ONCE(node->get_logger(),"My log message "<<4);num=4node.get_logger().info(f'My log message{num}',once=True)Logging all but the first timeThe following code will output a log message from a ROS 2 node atWARNseverity, but not the very first time it is hit:C++Python// printf styleRCLCPP_WARN_SKIPFIRST(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_WARN_STREAM_SKIPFIRST(node->get_logger(),"My log message "<<4);num=4node.get_logger().warning('My log message{0}'.format(num),skip_first=True)Logging throttledThe following code will output a log message from a ROS 2 node atERRORseverity, but no more than once per second.The interval parameter specifying milliseconds between messages should have an integer data type so it can be converted to arcutils_duration_value_t(anint64_t):C++Python// printf styleRCLCPP_ERROR_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message %d",4);// C++ stream styleRCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message "<<4);// For now, use the nanoseconds() method to use an existing rclcpp::Duration value, see https://github.com/ros2/rclcpp/issues/1929RCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(),*node->get_clock(),msg_interval.nanoseconds()/1000000,"My log message "<<4);num=4node.get_logger().error(f'My log message{num}',throttle_duration_sec=1)Logging throttled all but the first timeThe following code will output a log message from a ROS 2 node atDEBUGseverity, no more than once per second, skipping the very first time it is hit:C++Python// printf styleRCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message %d",4);RCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message "<<4);num=4node.get_logger().debug(f'My log message{num}',skip_first=True,throttle_duration_sec=1.0)Logging demoIn thisdemo, different types of log calls are shown and the severity level of different loggers is configured locally and externally.Start the demo with:ros2runlogging_demologging_demo_mainOver time you will see output from various log calls with different properties.
To start with you will only see output from log calls with severityINFOand above (WARN,ERROR,FATAL).
Note that the first message will only be logged once, though the line is reached on each iteration, as that is a property of the log call used for that message.Logging directory configurationThe logging directory can be configured through two environment variables:ROS_LOG_DIRandROS_HOME.
The logic is as follows:Use$ROS_LOG_DIRifROS_LOG_DIRis set and not empty.Otherwise, use$ROS_HOME/log, using~/.rosforROS_HOMEif not set or if empty.For example, to set the logging directory to~/my_logs:LinuxmacOSWindowsexportROS_LOG_DIR=~/my_logs
ros2runlogging_demologging_demo_mainexportROS_LOG_DIR=~/my_logs
ros2runlogging_demologging_demo_mainset"ROS_LOG_DIR=~/my_logs"ros2runlogging_demologging_demo_mainYou will then find the logs under~/my_logs/.Alternatively, you can setROS_HOMEand the logging directory will be relative to it ($ROS_HOME/log).ROS_HOMEis intended to be used by anything that needs a base directory.
Note thatROS_LOG_DIRhas to be either unset or empty.
For example, withROS_HOMEset to~/my_ros_home:LinuxmacOSWindowsexportROS_HOME=~/my_ros_home
ros2runlogging_demologging_demo_mainexportROS_HOME=~/my_ros_home
ros2runlogging_demologging_demo_mainset"ROS_HOME=~/my_ros_home"ros2runlogging_demologging_demo_mainYou will then find the logs under~/my_ros_home/log/.Logger level configuration: programmaticallyAfter 10 iterations the level of the logger will be set toDEBUG, which will cause additional messages to be logged.Some of these debug messages cause additional functions/expressions to be evaluated, which were previously skipped asDEBUGlog calls were not enabled.
Seethe source codeof the demo for further explanation of the calls used, and see the rclcpp logging documentation for a full list of supported logging calls.Logger level configuration: externallyROS 2 nodes have services available to configure the logging level externally at runtime.
These services are disabled by default.
The following code shows how to enable the logger service while creating the node.C++Python// Create a node with logger service enabledautonode=std::make_shared<rclcpp::Node>("NodeWithLoggerService",rclcpp::NodeOptions().enable_logger_service(true))# Create a node with logger service enablednode=Node('NodeWithLoggerService',enable_logger_service=True)If you run one of the nodes as configured above, you will find 2 services when runningros2servicelist:$ros2servicelist
...
/NodeWithLoggerService/get_logger_levels
/NodeWithLoggerService/set_logger_levels
...get_logger_levelsUse this service to get logger levels for specified logger names.Runros2servicecallto get logger levels forNodeWithLoggerServiceandrcl.$ros2servicecall/NodeWithLoggerService/get_logger_levelsrcl_interfaces/srv/GetLoggerLevels'{names: ["NodeWithLoggerService", "rcl"]}'requester:makingrequest:rcl_interfaces.srv.GetLoggerLevels_Request(names=['NodeWithLoggerService','rcl'])response:
rcl_interfaces.srv.GetLoggerLevels_Response(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService',level=0),rcl_interfaces.msg.LoggerLevel(name='rcl',level=0)])set_logger_levelsUse this service to set logger levels for specified logger names.Runros2servicecallto set logger levels forNodeWithLoggerServiceandrcl.$ros2servicecall/NodeWithLoggerService/set_logger_levelsrcl_interfaces/srv/SetLoggerLevels'{levels: [{name: "NodeWithLoggerService", level: 20}, {name: "rcl", level: 10}]}'requester:makingrequest:rcl_interfaces.srv.SetLoggerLevels_Request(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService',level=20),rcl_interfaces.msg.LoggerLevel(name='rcl',level=10)])response:
rcl_interfaces.srv.SetLoggerLevels_Response(results=[rcl_interfaces.msg.SetLoggerLevelsResult(successful=True,reason=''),rcl_interfaces.msg.SetLoggerLevelsResult(successful=True,reason='')])There is also demo code showing how to set or get the logger level via the logger service.rclcpp:demo code$ros2rundemo_nodes_cppuse_logger_servicerclpy:demo code$ros2rundemo_nodes_pyuse_logger_serviceWarningCurrently, there is a limitation thatget_logger_levelsandset_logger_levelsservices are not thread-safe.
This means that you need to ensure that only one thread is calling the services at a time.
Please see the details inhttps://github.com/ros2/rcutils/issues/397Using the logger config componentThe server that responds to the logger configuration requests has been developed as a component so that it may be added to an existing composition-based system.
For example, if you are usinga container to run your nodes, to be able to configure your loggers you only need to request that it additionally load thelogging_demo::LoggerConfigcomponent into the container.As an example, if you want to debug thecomposition::Talkerdemo, you can start the talker as normal with:Shell 1:ros2runrclcpp_componentscomponent_containerShell 2:ros2componentload/ComponentManagercompositioncomposition::TalkerAnd then when you want to enable debug logging, load theLoggerConfigcomponent with:Shell 2ros2componentload/ComponentManagerlogging_demologging_demo::LoggerConfigAnd finally, configure all unset loggers to the debug severity by addressing the empty-named logger.
Note that loggers that have been specifically configured to use a particular severity will not be affected by this call.Shell 2:ros2servicecall/config_loggerlogging_demo/srv/ConfigLogger"{logger_name: '', level: DEBUG}"You should see debug output from any previously unset loggers in the process start to appear, including from the ROS 2 core.Logger level configuration: command lineAs of the Bouncy ROS 2 release, the severity level for loggers that have not had their severity set explicitly can be configured from the command line.
Restart the demo including the following command line argument:ros2runlogging_demologging_demo_main--ros-args--log-leveldebugThis configures the default severity for any unset logger to the debug severity level.
You should see debug output from loggers from the demo itself and from the ROS 2 core.The severity level for individual loggers can be configured from the command-line.
Restart the demo including the following command line arguments:ros2runlogging_demologging_demo_main--ros-args--log-levellogger_usage_demo:=debugConsole output formattingIf you would like more or less verbose formatting, you can use theRCUTILS_CONSOLE_OUTPUT_FORMATenvironment variable.
For example, to additionally get the timestamp and location of the log calls, stop the demo and restart it with the environment variable set:LinuxmacOSWindowsexportRCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_mainexportRCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_mainset"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_mainYou should see the timestamp in seconds and the function name, filename and line number additionally printed with each message.For more information on configuring the console logger formatting, see thelogger console configurationConsole output colorizingBy default, the output is colorized when it’s targeting a terminal.
If you would like to force enabling or disabling it, you can use theRCUTILS_COLORIZED_OUTPUTenvironment variable.
For example:LinuxmacOSWindowsexportRCUTILS_COLORIZED_OUTPUT=0# 1 for forcing itros2runlogging_demologging_demo_mainexportRCUTILS_COLORIZED_OUTPUT=0# 1 for forcing itros2runlogging_demologging_demo_mainset"RCUTILS_COLORIZED_OUTPUT=0"::1forforcingit
ros2runlogging_demologging_demo_mainYou should see that debug, warn, error and fatal logs aren’t colorized now.NoteIn Linux and MacOS forcing colorized output means that if you redirect the output to a file, the ansi escape color codes will appear on it.
In windows the colorization method relies on console APIs.
If it is forced you will get a new warning saying that colorization failed.
The default behavior already checks if the output is a console or not, so forcing colorization is not recommended.Default stream for console outputIn Foxy and later, the output from all debug levels goes to stderr by default.  It is possible to force all output to go to stdout by setting theRCUTILS_LOGGING_USE_STDOUTenvironment variable to1.
For example:LinuxmacOSWindowsexportRCUTILS_LOGGING_USE_STDOUT=1exportRCUTILS_LOGGING_USE_STDOUT=1set"RCUTILS_LOGGING_USE_STDOUT=1"Line buffered console outputBy default, all logging output is unbuffered.
You can force it to be buffered by setting theRCUTILS_LOGGING_BUFFERED_STREAMenvironment variable to 1.
For example:LinuxmacOSWindowsexportRCUTILS_LOGGING_BUFFERED_STREAM=1exportRCUTILS_LOGGING_BUFFERED_STREAM=1set"RCUTILS_LOGGING_BUFFERED_STREAM=1"Then run:ros2runlogging_demologging_demo_mainSetting the log file name prefixBy default, the log file name is based on the executable file name followed by process ID and system timestamp on file creation.
You can change the log file name prefix to one of your choice using the--log-file-namecommand line argument:ros2rundemo_nodes_cpptalker--ros-args--log-file-namefilenameThis configures the log file name prefix tofilename, instead of the executable file name (which istalkerin this case).

Code Examples:

Language: unknown
// printf styleRCLCPP_DEBUG(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_DEBUG_STREAM(node->get_logger(),"My log message "<<4);

Language: unknown
node.get_logger().debug('My log message%d'%(4))

Language: unknown
// printf styleRCLCPP_INFO_ONCE(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_INFO_STREAM_ONCE(node->get_logger(),"My log message "<<4);

Language: unknown
num=4node.get_logger().info(f'My log message{num}',once=True)

Language: unknown
// printf styleRCLCPP_WARN_SKIPFIRST(node->get_logger(),"My log message %d",4);// C++ stream styleRCLCPP_WARN_STREAM_SKIPFIRST(node->get_logger(),"My log message "<<4);

Language: unknown
num=4node.get_logger().warning('My log message{0}'.format(num),skip_first=True)

Language: unknown
// printf styleRCLCPP_ERROR_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message %d",4);// C++ stream styleRCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message "<<4);// For now, use the nanoseconds() method to use an existing rclcpp::Duration value, see https://github.com/ros2/rclcpp/issues/1929RCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(),*node->get_clock(),msg_interval.nanoseconds()/1000000,"My log message "<<4);

Language: unknown
num=4node.get_logger().error(f'My log message{num}',throttle_duration_sec=1)

Language: unknown
// printf styleRCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message %d",4);RCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(),*node->get_clock(),1000,"My log message "<<4);

Language: unknown
num=4node.get_logger().debug(f'My log message{num}',skip_first=True,throttle_duration_sec=1.0)

Language: unknown
ros2runlogging_demologging_demo_main

Language: unknown
exportROS_LOG_DIR=~/my_logs
ros2runlogging_demologging_demo_main

Language: unknown
exportROS_LOG_DIR=~/my_logs
ros2runlogging_demologging_demo_main

Language: unknown
set"ROS_LOG_DIR=~/my_logs"ros2runlogging_demologging_demo_main

Language: unknown
exportROS_HOME=~/my_ros_home
ros2runlogging_demologging_demo_main

Language: unknown
exportROS_HOME=~/my_ros_home
ros2runlogging_demologging_demo_main

Language: unknown
set"ROS_HOME=~/my_ros_home"ros2runlogging_demologging_demo_main

Language: unknown
// Create a node with logger service enabledautonode=std::make_shared<rclcpp::Node>("NodeWithLoggerService",rclcpp::NodeOptions().enable_logger_service(true))

Language: unknown
# Create a node with logger service enablednode=Node('NodeWithLoggerService',enable_logger_service=True)

Language: unknown
$ros2servicelist
...
/NodeWithLoggerService/get_logger_levels
/NodeWithLoggerService/set_logger_levels
...

Language: unknown
$ros2servicecall/NodeWithLoggerService/get_logger_levelsrcl_interfaces/srv/GetLoggerLevels'{names: ["NodeWithLoggerService", "rcl"]}'requester:makingrequest:rcl_interfaces.srv.GetLoggerLevels_Request(names=['NodeWithLoggerService','rcl'])response:
rcl_interfaces.srv.GetLoggerLevels_Response(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService',level=0),rcl_interfaces.msg.LoggerLevel(name='rcl',level=0)])

Language: unknown
$ros2servicecall/NodeWithLoggerService/set_logger_levelsrcl_interfaces/srv/SetLoggerLevels'{levels: [{name: "NodeWithLoggerService", level: 20}, {name: "rcl", level: 10}]}'requester:makingrequest:rcl_interfaces.srv.SetLoggerLevels_Request(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService',level=20),rcl_interfaces.msg.LoggerLevel(name='rcl',level=10)])response:
rcl_interfaces.srv.SetLoggerLevels_Response(results=[rcl_interfaces.msg.SetLoggerLevelsResult(successful=True,reason=''),rcl_interfaces.msg.SetLoggerLevelsResult(successful=True,reason='')])

Language: unknown
$ros2rundemo_nodes_cppuse_logger_service

Language: unknown
$ros2rundemo_nodes_pyuse_logger_service

Language: unknown
ros2runrclcpp_componentscomponent_container

Language: unknown
ros2componentload/ComponentManagercompositioncomposition::Talker

Language: unknown
ros2componentload/ComponentManagerlogging_demologging_demo::LoggerConfig

Language: unknown
ros2servicecall/config_loggerlogging_demo/srv/ConfigLogger"{logger_name: '', level: DEBUG}"

Language: unknown
ros2runlogging_demologging_demo_main--ros-args--log-leveldebug

Language: unknown
ros2runlogging_demologging_demo_main--ros-args--log-levellogger_usage_demo:=debug

Language: unknown
exportRCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_main

Language: unknown
exportRCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_main

Language: unknown
set"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"ros2runlogging_demologging_demo_main

Language: unknown
exportRCUTILS_COLORIZED_OUTPUT=0# 1 for forcing itros2runlogging_demologging_demo_main

Language: unknown
exportRCUTILS_COLORIZED_OUTPUT=0# 1 for forcing itros2runlogging_demologging_demo_main

Language: unknown
set"RCUTILS_COLORIZED_OUTPUT=0"::1forforcingit
ros2runlogging_demologging_demo_main

Language: unknown
exportRCUTILS_LOGGING_USE_STDOUT=1

Language: unknown
exportRCUTILS_LOGGING_USE_STDOUT=1

Language: unknown
set"RCUTILS_LOGGING_USE_STDOUT=1"

Language: unknown
exportRCUTILS_LOGGING_BUFFERED_STREAM=1

Language: unknown
exportRCUTILS_LOGGING_BUFFERED_STREAM=1

Language: unknown
set"RCUTILS_LOGGING_BUFFERED_STREAM=1"

Language: unknown
ros2runlogging_demologging_demo_main

Language: unknown
ros2rundemo_nodes_cpptalker--ros-args--log-file-namefilename
