Title: Themove_groupnode
URL: https://moveit.picknik.ai/main/doc/concepts/move_group.html
Section: index.html
--------------------------------------------------------------------------------


## User Interface
The users can access the actions and services provided bymove_groupin two ways:

## Configuration
move_groupis a ROS node.
It uses the ROS param server to get three kinds of information:

## Robot Interface
move_grouptalks to the robot through ROS topics and actions.
It communicates with the robot to get current state information (positions of the joints, etc.), to get point clouds and other sensor data from the robot sensors and to talk to the controllers on the robot.

## Joint State Information
move_grouplistens on the/joint_statestopic for determining the current state information - i.e. determining where each joint of the robot is.move_groupis capable of listening to multiple publishers on this topic even if they are publishing only partial information about the robot state (e.g. separate publishers may be used for the arm and mobile base of a robot).
Note thatmove_groupwill not set up its own joint state publisher - this is something that has to be implemented on each robot.

## Transform Information
move_groupmonitors transform information using the ROS TF library.
This allows the node to get global information about the pose of the robot (among other things).
For instance, the ROS navigation stack will publish the transform between the map frame and base frame of the robot to TF.move_groupcan use TF to figure out this transform for internal use. Note thatmove_grouponly listens to TF.
To publish TF information from your robot, you will need to have arobot_state_publishernode running on your robot.

## Controller Interface
move_grouptalks to the controllers on the robot using the FollowJointTrajectoryAction interface.
This is a ROS action interface.
A server on the robot needs to service this action - this server is not provided bymove_groupitself.move_groupwill only instantiate a client to talk to this controller action server on your robot.

## Planning Scene
move_groupuses the Planning Scene Monitor to maintain aplanning scene, which is a representation of the world and the current state of the robot.
The robot state can include any objects attached to (carried by) the robot which are considered to be rigidly attached to the robot.
More details on the architecture for maintaining and updating theplanning sceneare outlined in the Planning Scene section below.

## Extensible Capabilities
move_groupis structured to be easily extensible.
Individual capabilities like pick and place, kinematics, motion planning are actually implemented as separate plugins with a common base class.
The plugins are configurable using ROS through a set of ROS yaml parameters and through the use of the ROS pluginlib library.
Most users will not have to configure move_group plugins since they come automatically configured in the launch files generated by the MoveIt Setup Assistant.
