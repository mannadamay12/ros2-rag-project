Title: MoveIt Task Constructor
URL: https://moveit.picknik.ai/main/doc/concepts/moveit_task_constructor/moveit_task_constructor.html
Section: index.html
--------------------------------------------------------------------------------


## What is MoveIt Task Constructor?


## MTC Stages
There are three possible stages relating to the result flow:

## Generator Stage


## Propagating Stage


## Connecting Stage


## Wrapper


## MTC Containers
Currently available containers:

## Serial Container


## Parallel Container
Parallel containers combine a set of stages to allow planning alternate solutions.

## Initializing a MTC Task
The top-level planning problem is specified as a MTC Task and the subproblems which are specified by Stages are added to the MTC task object.

## Adding containers and stages to a MTC Task
Adding a stage to MTC task
Containers derive from Stage and hence containers can be added to MTC task similarly

## Setting planning solvers
Stages that do motion planning need solver information.
Solvers available in MTC
Code Example on how to initialize the solver
These solvers will be passed into stages likeMoveTo,MoveRelative, andConnect.

## Setting Properties


## Cost calculator for Stages
CostTerm is the basic interface to compute costs for solutions for MTC stages.
CostTerm implementations available in MTC
Example code on how to set CostTerm usingLambdaCostTerm
All stages provided by MTC have default cost terms. Stages which produce trajectories as solutions usually use path length to calculate cost.

## Planning and Executing a MTC Task
Planning an MTC task will return aMoveItErrorCode.
Referhereto identity the different error types.
If planning succeeds, you can expect the plan function to returnmoveit_msgs::msg::MoveItErrorCodes::SUCCESS.
After planning, extract the first successful solution and pass it to the execute function. This will create anexecute_task_solutionaction client.
The action server resides in theexecute_task_solution_capabilityplugin provided by MTC.
The plugin extendsMoveGroupCapability. It constructs aMotionPlanRequestfrom the MTC solution and uses MoveIt’sPlanExecutionto actuate the robot.

## Links to Additional Information
Here is atutorialon how to create a Pick and Place pipeline using MTC.
The links listed below contain more information on stages and containers provided by MTC

Code Examples:

Language: unknown
File: GeneratePose
```
auto
node
=
std
::
make_shared
<
rclcpp
::
Node
>
();
auto
task
=
std
::
make_unique
<
moveit
::
task_constructor
::
Task
>
();
task
->
loadRobotModel
(
node
);
// Set controllers used to execute robot motion. If not set, MoveIt has controller discovery logic.
task
->
setProperty
(
"trajectory_execution_info"
,
"joint_trajectory_controller gripper_controller"
);
```

Language: unknown
File: GeneratePose
```
auto
current_state
=
std
::
make_unique
<
moveit
::
task_constructor
::
stages
::
CurrentState
>
(
"current_state"
);
task
->
add
(
std
::
move
(
current_state
));
```

Language: unknown
File: GeneratePose
```
auto
container
=
std
::
make_unique
<
moveit
::
task_constructor
::
SerialContainer
>
(
"Pick Object"
);
// TODO: Add stages to the container before adding the container to MTC task
task
->
add
(
std
::
move
(
container
));
```

Language: unknown
File: CartesianPath
```
const
auto
mtc_pipeline_planner
=
std
::
make_shared
<
moveit
::
task_constructor
::
solvers
::
PipelinePlanner
>
(
node
,
"ompl"
,
"RRTConnectkConfigDefault"
);
const
auto
mtc_joint_interpolation_planner
=
std
::
make_shared
<
moveit
::
task_constructor
::
solvers
::
JointInterpolationPlanner
>
();
const
auto
mtc_cartesian_planner
=
std
::
make_shared
<
moveit
::
task_constructor
::
solvers
::
CartesianPath
>
();
```

Language: unknown
File: Connect
```
void
setProperty
(
const
std
::
string
&
name
,
const
boost
::
any
&
value
);
```

Language: unknown
File: LambdaCostTerm
```
stage
->
setCostTerm
(
moveit
::
task_constructor
::
LambdaCostTerm
(
[](
const
moveit
::
task_constructor
::
SubTrajectory
&
traj
)
{
return
100
*
traj
.
cost
();
}));
```

Language: unknown
File: moveit_msgs::msg::MoveItErrorCodes::SUCCESS
```
auto
error_code
=
task
.
plan
()
```

Language: unknown
File: PlanExecution
```
auto
result
=
task
.
execute
(
*
task
.
solutions
().
front
());
```
