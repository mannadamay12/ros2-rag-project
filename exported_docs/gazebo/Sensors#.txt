Title: Sensors#
URL: https://gazebosim.org/docs/latest/sensors
Section: sensors
--------------------------------------------------------------------------------


Code Examples:

Language: unknown
File: plugin
```
<sdf
version=
'1.9'
>
<world
name=
'demo'
>
<plugin
filename=
"gz-sim-physics-system"
name=
"gz::sim::systems::Physics"
>
</plugin>
<plugin
filename=
"gz-sim-scene-broadcaster-system"
name=
"gz::sim::systems::SceneBroadcaster"
>
</plugin>
<!-- ... -->
```

Language: unknown
File: <world>
```
<plugin
filename=
"gz-sim-imu-system"
name=
"gz::sim::systems::Imu"
>
</plugin>
```

Language: unknown
File: IMU
```
<sensor
name=
"imu_sensor"
type=
"imu"
>
<always_on>
1
</always_on>
<update_rate>
1
</update_rate>
<visualize>
true
</visualize>
<topic>
imu
</topic>
</sensor>
```

Language: unknown
File: contact
```
<model
name=
'wall'
>
<static>
true
</static>
<pose>
5
0
0
0
0
0
</pose>
<!--pose relative to the world-->
<link
name=
'box'
>
<visual
name=
'visual'
>
<geometry>
<box>
<size>
0.5
10.0
2.0
</size>
</box>
</geometry>
<!--let's add color to our link-->
<material>
<ambient>
0.0
0.0
1.0
1
</ambient>
<diffuse>
0.0
0.0
1.0
1
</diffuse>
<specular>
0.0
0.0
1.0
1
</specular>
</material>
</visual>
<collision
name=
'collision'
>
<geometry>
<box>
<size>
0.5
10.0
2.0
</size>
</box>
</geometry>
</collision>
</link>
</model>
```

Language: unknown
File: Contact
```
<plugin
filename=
"gz-sim-contact-system"
name=
"gz::sim::systems::Contact"
>
</plugin>
```

Language: unknown
File: wall
```
<sensor
name=
'sensor_contact'
type=
'contact'
>
<contact>
<collision>
collision
</collision>
</contact>
</sensor>
```

Language: unknown
File: wall
```
<plugin
filename=
"gz-sim-touchplugin-system"
name=
"gz::sim::systems::TouchPlugin"
>
<target>
vehicle_blue
</target>
<namespace>
wall
</namespace>
<time>
0.001
</time>
<enabled>
true
</enabled>
</plugin>
```

Language: unknown
File: TriggeredPublisher
```
<plugin
filename=
"gz-sim-triggered-publisher-system"
name=
"gz::sim::systems::TriggeredPublisher"
>
<input
type=
"gz.msgs.Boolean"
topic=
"/wall/touched"
>
<match>
data:
true
</match>
</input>
<output
type=
"gz.msgs.Twist"
topic=
"/cmd_vel"
>
linear:
{x:
0.0},
angular:
{z:
0.0}

</output>
</plugin>
```

Language: unknown
File: chassis
```
<frame
name=
"lidar_frame"
attached_to=
'chassis'
>
<pose>
0.8
0
0.5
0
0
0
</pose>
</frame>
```

Language: unknown
File: lidar
```
<plugin
filename=
"gz-sim-sensors-system"
name=
"gz::sim::systems::Sensors"
>
<render_engine>
ogre2
</render_engine>
</plugin>
```

Language: unknown
File: lidar
```
<sensor
name=
'gpu_lidar'
type=
'gpu_lidar'
>
"

<pose
relative_to=
'lidar_frame'
>
0
0
0
0
0
0
</pose>
<topic>
lidar
</topic>
<update_rate>
10
</update_rate>
<ray>
<scan>
<horizontal>
<samples>
640
</samples>
<resolution>
1
</resolution>
<min_angle>
-1.396263
</min_angle>
<max_angle>
1.396263
</max_angle>
</horizontal>
<vertical>
<samples>
1
</samples>
<resolution>
0.01
</resolution>
<min_angle>
0
</min_angle>
<max_angle>
0
</max_angle>
</vertical>
</scan>
<range>
<min>
0.08
</min>
<max>
10.0
</max>
<resolution>
0.01
</resolution>
</range>
</ray>
<always_on>
1
</always_on>
<visualize>
true
</visualize>
</sensor>
```

Language: unknown
File: gztopic-e-t/lidar
```
message
LaserScan
{
Header
header
=
1
;
string
frame
=
2
;
Pose
world_pose
=
3
;
double
angle_min
=
4
;
double
angle_max
=
5
;
double
angle_step
=
6
;
double
range_min
=
7
;
double
range_max
=
8
;
uint32
count
=
9
;
double
vertical_angle_min
=
10
;
double
vertical_angle_max
=
11
;
double
vertical_angle_step
=
12
;
uint32
vertical_count
=
13
;
repeated
double
ranges
=
14
;
repeated
double
intensities
=
15
;
}
```

Language: unknown
File: subscriber
```
std
::
string
topic_pub
=
"/cmd_vel"
;
gz
::
transport
::
Node
node
;
auto
pub
=
node
.
Advertise
<
gz
::
msgs
::
Twist
>
(
topic_pub
);
```

Language: unknown
File: cmd_vel
```
void
cb
(
const
gz
::
msgs
::
LaserScan
&
_msg
)
{
gz
::
msgs
::
Twist
data
;
bool
allMore
=
true
;
for
(
int
i
=
0
;
i
<
_msg
.
ranges_size
();
i
++
)
{
if
(
_msg
.
ranges
(
i
)
<
1.0
)
{
allMore
=
false
;
break
;
}
}
if
(
allMore
)
//if all bigger than one
{
data
.
mutable_linear
()
->
set_x
(
0.5
);
data
.
mutable_angular
()
->
set_z
(
0.0
);
}
else
{
data
.
mutable_linear
()
->
set_x
(
0.0
);
data
.
mutable_angular
()
->
set_z
(
0.5
);
}
pub
.
Publish
(
data
);
}
```

Language: unknown
File: 1.0
```
int
main
(
int
argc
,
char
**
argv
)
{
std
::
string
topic_sub
=
"/lidar"
;
// Subscribe to a topic by registering a callback.
if
(
!
node
.
Subscribe
(
topic_sub
,
cb
))
{
std
::
cerr
<<
"Error subscribing to topic ["
<<
topic_sub
<<
"]"
<<
std
::
endl
;
return
-1
;
}
// Zzzzzz.
gz
::
transport
::
waitForShutdown
();
return
0
;
}
```

Language: unknown
File: build/
```
mkdir
build

cd
build

```

Language: unknown
File: build/
```
cmake
..
make
lidar_node

```

Language: unknown
File: build/
```
./build/lidar_node

```

Language: unknown
File: build/
```
gz
sim
sensor_tutorial.sdf

```

Language: unknown
File: lidar_node
```
<?xml version='1.0'?>
<gz
version=
'1.0'
>
<executable
name=
'sensor-world'
>
<command>
gz
sim
sensor_tutorial.sdf
</command>
</executable>
<executable
name=
'lidar_node'
>
<command>
./build/lidar_node
</command>
</executable>
</gz>
```

Language: unknown
File: sensor_launch.gzlaunch
```
gz
launch
sensor_launch.gzlaunch

```
