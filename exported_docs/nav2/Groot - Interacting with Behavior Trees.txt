Title: Groot - Interacting with Behavior Trees
URL: https://docs.nav2.org/tutorials/docs/using_groot.html#adding-a-custom-node
Section: getting_started/index.html
--------------------------------------------------------------------------------


## Overview
Grootis the companion application of theBehaviorTree.CPPlibrary used to create, edit, and visualize behavior trees.
Behavior Trees are deeply integrated into Nav2, used as the main method of orchestrating task server logic across a complex navigation and autonomy stack.
Behavior Trees, in short BTs, consist of many nodes completing different tasks and control the flow of logic, similar to a Hierarchical or Finite State Machine, but organized in a tree structure.
These nodes are of types:Action,Condition,Control, orDecorator, and are described in more detail inNavigation ConceptsandBehaviorTree.CPP.
Writing a New Behavior Tree Pluginoffers a well written example of creating a simpleActionnode if creating new BT nodes is of interest. This tutorial will focus solely on launching Groot, visualizing a Behavior Tree, and modifying that tree for a given customization, assuming a library of BT nodes. Luckily, Nav2 provides a robust number of BT nodes for your use out of the box, enumerated inNavigation Plugins.
A BT configuration file in BehaviorTree.CPP is an XML file. This is used to dynamically load the BT node plugins at run-time from the appropriate libraries mapped to their names. The XML format is definedin detail here. Therefore, Groot needs to have a list of nodes it has access to and important metadata about them like their type and ports (or parameters). We refer to this as the “palette” of nodes later in the tutorial.
In the video above you can see Groot side-by-side with RVIz and a test platform 100% equipped with ROS-enabled hardware from SIEMENS.
Groot not only displays the current Behavior Tree while the robot is operating. Note: Before ROS 2 Humble, live Groot behavior tree monitoring during execution was supported in Nav2. This was removed due to buggy support in BT.CPP / Groot for changing behavior trees on the fly, seeGalactic to Humblefor more details.

## Visualize Behavior Trees
To display a Behavior Tree like that inFigure 3, we will first start the Groot executable.
Out of the box, Groot can only display Behavior Trees and nodes that are from the defaults in BT.CPP, since it does not know anything about Nav2 or your other projects.
Therefore, we must point Groot to our palette, or index, of Nav2 / custom behavior tree nodes:
If you select the default treenavigate_w_replanning_and_recovery.xml, then a Groot editor should look likeFigure 3.

## Edit Behavior Trees
Now that you have a Nav2 BT open in Groot in editor mode, you should be able to trivially modify it using the GUI.
Starting from a screen like that shown inFigure 3, you can pull in new nodes from the side panel to add them to the workspace.
You may then connect the nodes using a “drag and drop” motion between the node’s input and output ports to assemble the new nodes into the tree.
If you select a given node, you can change metadata about it such as its name or values of parameterizable ports. When you’re done modifying, simply save the new configuration file and use that on your robot the next time!

## Adding A Custom Node
Each node in the behavior tree holds a specialized function.
Sometimes, its useful to create new nodes and add them to your palette during the design process - perhaps before the implementations themselves exist.
This helps designers abstract away the implementation specifics of the nodes from the higher level logic of the tree itself and how they’d like to interact with a given node (e.g. type, ports, etc).
Within Groot, you may create new custom nodes to add to your tree and export these new nodes back to your palette.
Implementing the node itself needs to be done separately from Groot, which is described inWriting a New Behavior Tree Plugin.
Creating a new custom node can be started by clicking the orange marked icon inFigure 4, while Groot is in Editor mode.
This should load a new window, similar toFigure 5.
In this new window, it asks you to fill in the metadata about this new node, in order to create it.
It will ask you for standard information such as name (green box), type of node (orange box), and any optional ports for parameterization or access to blackboard variables (blue box).
After completing, selectOKinFigure 5, the new custom node should appear in blue in theTreeNode Paletteas inFigure 6.
Before starting to create a new BT based on the new custom nodes, it is recommend to export the newly created nodes to save in case of Groot crashing.
This can be performed with the icon highlighted in green fromFigure 6.
The resulting XML output from the node created inFigure 5can be seen below.
You can see more examples inNav2’s BT Node Palette XML.

Code Examples:

Language: unknown
File: Action
```
<root>
<TreeNodesModel>
<Action
ID=
"MyAwesomeNewNode"
>
<input_port
name=
"key_name"
default=
"false"
>
coffee
</input_port>
<output_port
name=
"key_name2"
default=
"42"
>
Sense
of
life
</output_port>
<inout_port
name=
"next_target"
default=
"pancakes"
>
rolling
target
</inout_port>
</Action>
</TreeNodesModel>
</root>
```
