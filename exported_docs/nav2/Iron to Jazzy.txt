Title: Iron to Jazzy
URL: https://docs.nav2.org/migration/Iron.html#new-collision-monitor-parameter
Section: getting_started/index.html
--------------------------------------------------------------------------------


## BehaviorTree.CPP upgraded to version 4.5+
Since we migrated from version 3.8 to 4.5, users must upgrade their XML and source code accordingly.
You can refer to [this page](https://www.behaviortree.dev/docs/migration) for more details, but the main changes are:

## Added TwistStamped Option for Commands
A new parameterenable_stamped_cmd_velhas been added to all of the publishers and subscribers ofcmd_veland related topics. This allows you to set the publication and subscription of TwistStamped messages over Twist messages to have frame and timestamp information of the set command. For now, this is default tofalseto not change current behavior, but it is planned to makeTwistStampedthe default behavior alongside Gazebo, ROS 2 Control, and related projects.

## Add VelocityPolygon in Collision Monitor
PR #3708addsVelocityPolgontype in Collision Monitor. This allows the user to setup multiple polygons to cover the range of the robot’s velocity limits. For example, the user can configure different polygons for rotation, moving forward, or moving backward. The Collision Monitor will check the robot’s velocity against each sub polygon to determine the appropriate polygon to be used for collision checking. The tutorial is available in theConfiguring Collision Monitor with VelocityPolygonsection.

## Change polygon points parameter format in Collision Monitor
PR #4020changes the format of the Polygon points parameter fromvector<double>tostring. This makes the polygon description more uniform across the Collision Monitor and Costmap_2D.
Now we can define a polygon’s points in string that has avector<vector<double>>structure like this"[[p1.x,p1.y],[p2.x,p2.y],[p3.x,p3.y],...]"with a minimum of 4 points described. An example of a Square polygon will be written as follows.

## Introduction of Soft-Real Time Action Servers
PR #3914adds soft real-time prioritization to the controller server to better ensure resources to time sensitive portions of the codebase. The Simple Action Server now has arealtimeinput field exposed in the Controller Server via the parameteruse_realtime_prioritywhich will set the controller’s execution thread to a higher priority than the rest of the system to meet scheduling deadlines. To use this feature, you use set the following inside of/etc/security/limits.confto give userspace access to elevated prioritization permissions. This is currently only enabled in the Controller Server, who’s execution thread is sensitive to scheduling priorities, but could be set with other threads in the future if found necessary.
The Collision Monitor and Velocity Smoothers also haduse_realtime_priorityadded as well!

## opennav_coverageProject
A new metapackage exists in:https://github.com/open-navigation/opennav_coveragewhich contains complete coverage navigator plugins, BT nodes, behavior tree demos, and coverage planning server based onFields2Cover. See that project for more information. It is on long-term trajectory for inclusion intoNav2, but there are still yet a few missing features from Fields2Cover before we can integrate that into the main project to be up to snuff in terms of all the major features and capabilities users would expect from a coverage planning system.
If you’d like to see coverage planning in Nav2 directly, please consider contributingto the as-of-yet needed features described here.

## opennav_dockingProject
A new metapackage exists in:https://github.com/open-navigation/opennav_dockingwhich contains complete automatic charging dock framework, BT nodes, plugins, and demos.
This allows for docking of any type of robot with any type of charging dock in a repeatable and generalized way.
It will be integrated into Nav2 directly soon (Update June 2024: within Nav2 stack directlynav2_docking!)
SeeUsing Docking Serverfor a tutorial on using this new capability! Thanks to NVIDIA for sponsoring this package!

## Introduce a new Multi-Robot Bringup Launch
PR #3572introduces a new way of bringup tb3 multi-robot that names ascloned_tb3_simulation_launch.pyfor simulation.cloned_tb3_simulation_launch.pyenables to bring up multiple robots with same parameter that described innav2_multirobot_param_all.yaml. And multiple robots are separated by namespaces which are given as a Launch Arguments.
Existingmulti_tb3_simulation_launch.pywhich was utilized in previous is replaced withunique_tb3_simulation_launch.py, allowing for multiple unique robot instances utilizingnav2_multirobot_params_<N>.yamlconfiguration files.

## New option for the Voxel and Obstacle Layers
PR #3612adds a new MaxWithoutUnknownOverwrite option to combination_method parameter in Voxel and Obstacle Layers. This can be used to make sure that the static map is the dominant source of information, and
easily prevent the robot to go through places that are not present in the static map.

## use_interpolation RPP Parameter Depreciated
After a distribution of testing by many users, we have depreciated the use_interpolation parameter and it is now default on at all times without the ability to disable. It improves velocity smoothness and overall quality of tracking positively in all cases.

## Changes to MPPI Goal Critic
The MPPI Goal critic’s formulation is changed to better keep up with speed on approach to goal instead of preemptively slowing too significantly. It also allows you to better use the weight to adjust the degree at which it slows more naturally. This change involves adjusting thethreshold_to_considerto be the same as your prediction horizon (e.g. samples * dt * max speed) for both the goal critic and path follower critic to have a good hand-off between them without deceleration.

## Changes to MPPI Path Angle Critic
MPPI’s Path Angle critic now has amodesetting to adjust behavior depending on robot’s desired behavioral traits. Previously, it penalized path orientations that deviated far the the robot’s forward orientation to turn the robot towards sharp changes in the path. This is still default (mode:0), but other modes now exist too.
mode:1sets the penalization of path’s relative directions by either forward orientation or the opposite for reversing to allow for true bidirectional motion when one way or another is not preferable for a symmetric robot. This uses only the path’s relative points to the robot to decide which direction to incentivize.
mode:2instead uses the path’s orientations when a feasible path is given from the Smac Planners or the Smoother server’s algorithms. This way, the globally planned orientations are followed rather than the based solely on the path’s relative points. This is useful for non-circular robots in highly confined settings where there may be restricted opportunities to change directions so following the global path’s orientation are required to end in the orientation you require.

## Changes to MPPI Path Handling For Directionality
MPPI’s Path Align Critic and Path Handler object now have options to utilize the path’s orientation information to force the controller to change directions when and only when requested by a feasible planner. Whenenforce_path_inversionistrue, the path handler will prune the path to the first time the directions change to force the controller to plan to the inversion point and then be set the rest of the path, once in tolerance. The Path Align critic also contains a parameteruse_path_orientationswhich can be paired with it to incentivize aligning the path containing orientation information to better attempt to achieve path inversions where requestedandnot do them when not requested.
See MPPI’s configuration guide for complete information.

## Addition of new MPPI Cost Critic
Analog to theObstacleCritic, theCostCriticis another obstacle avoiding critic alternative if theObstacleCriticis not working well for you.
This critic uses the inflated costs in the costmap to score rather than distance to obstacles as theObstaclesCriticdoes.
See the configuration guide for more information.

## MPPI Acceleration
New to Jazzy, MPPI is 45% faster due to a weeks long optimization campaign. Enjoy!

## Move Error Code Enumerations
PR #3693moves the enumeration codes from the goal to the result section.

## Substitution in parameter file
Enabled substitution in parameter file. For example, you can write the following
For more information about substitutions syntax, seehere

## Allow Behavior Server Plugins to Access The Action Result
PR #3704allows behavior servers plugins to access and modify the action result.

## Smac Planner Debug Param Name Change
debug_visualizationsreplacesviz_expansionsparameter in Hybrid-A* to reflect the new inclusion of footprint debug information being published as well.

## Smac Planner On Approach to Goal Shortcutting Solutions
PR #3962 adds new paramsanalytic_expansion_max_costandanalytic_expansion_max_cost_overridein extension ofanalytic_expansion_max_lengthin Humble to further limit potential shortcutting of paths near obstacles in close proximity to the goal.
It uses a maximum cost parameter (default200) to tell if an expansion is closer to an obstacle than a user would like. If the expansion is critically close to the goal, then it may override this constraint ifanalytic_expansion_max_cost_overrideisfalse- allowing the constraint to be overridden to find a successful path solution, as it may be required.
This PR also introduces additional analytic expansion scoring logic and edge case handling to improve path qualities by an analog heuristic function.

## Added GPS Waypoint Follower Server
This PR 2814adds thefollow_gps_waypointsaction server innav2_waypoint_follower. This server accepts a set of GPS goals instead of cartesian goals and provides all the other functionalities available onnav2_waypoint_follower. A new tutorial demonstrating its functionality was also added onPR 70 on navigation2_tutorialsand can be found on the General Tutorials directory on this website.

## Smac Planner Hybrid-A* New Features
New featuresallow_primitive_interpolationwhich allows for more primitives in the search set,use_quadratic_cost_penaltyto impact the cost penalty order in the traversal and heuristic functions, anddownsample_obstacle_heuristicto optionally not downsample the obstacle heuristic’s costmap were added. The default behavior will remain the same. If you would like to use these new features, please check out the Smac Planner Hybrid-A* configuration guide.

## New node in nav2_collision_monitor: Collision Detector
In thisPR #3693A new node was introduced in the nav2_collision_monitor: Collision Detector.
It works similarly to the Collision Monitor, but does not affect the robot’s velocity. It will only inform that data from the configured sources has been detected within the configured polygons via message to thecollision_detector_statetopic that might be used by any external module (e.g. switching LED or sound alarm in case of collision).

## Dynamic enabling/disabling of sources/polygons in Collision Monitor/Detector
In thisPR #3825we added the ability to dynamically enable/disable sources and polygons in the Collision Monitor/Detector.

## Expose action server’s result timeout
In thisPR #3787the timeout for action server’s result was exposed in all nodes having action servers.
This is because in thisPR #1012in rcl a change was introduced which makes action servers discard a goal handle if the result
is not produced within 10 seconds, when the default was set to 15 minutes before. Since some actions in Nav2 may take more than 10 seconds to complete, the user has now the ability
to set this value through theaction_server_result_timeoutparameter, which defaults to 15 minutes in thebt_navigatorsandwaypoint_followerand to 10 seconds in all other nodes.

## RewrittenYaml could add new parameters to YAMLs
NowRewrittenYamlwidely used in Nav2 launch-scripts, could do not only substitutions of ROS-parameters existing in original YAML, but rather additions of new parameters, that did not exist in the YAML. Certainly, these parameters should be declared for target ROS-nodes, otherwise they won’t be processed in run-time. In such functionality, they should be expressed in absolute values, separated by a dot. For example, the rewrite for aprune_distanceparameter of aFollowPathnode will look like'controller_server.ros__parameters.FollowPath.prune_distance':'1.0'in aparam_rewritesdictionary ofRewrittenYaml()argument.
The change was intoroduced in the scope ofPR #3785fix.

## Simple Commander API Allows Multi-Robot Namespacing
The Simple Navigator API now allows multi-robot namespacing by exposing anamespacefield in the constructor to allow you to specify the Nav2 stacks’ namespace for a robot or system. Seethis PR for details.

## Change duration type in wait_action node
In thisPR #3871the type of duration variable in wait_action node is changed from int to double, which allows you to use floating values for wait_action.

## The costmap activation fails when required transforms are not available
In thisPR #3866the parameterinitial_transform_timeoutis added to the costmap. The activation of the costmap now fails,
if the transformation from the robot base frame to the global frame does not become available during this timeout.

## Subtrees Obtain Shared Resources
PR #3911gives all sub-trees in BT.CPP the same shared resources as the main tree (node, shared timeouts, etc).

## Collision Monitor: added watchdog mechanism based onsource_timeoutparameter with default blocking behavior
PR #3880adds a watchdog mechanism that stops the robot if a source data is not published yet, or if no new data is received within thesource_timeout`parameter, or if impossible to transform data to base frame.source_timeoutparameter can now be set per source: ifsource_timeoutis not set for a source, the value of the nodesource_timeoutparameter is used.
Additionally, this watchdog mechanism can be disabled by settingsource_timeout:0.0.

## BtActionServer: use native library haltTree()
PR #3950changes the method used byBehaviorTreeEngine::haltAllActionsto halt the BT nodes to the bt.cpp native methodhaltTree().
Before this change, only the active BT node was halted when finishing the action. After this change, all BT nodes halt() methods are called. This is very convenient to handle cleaning operation (switch off your lights when leaving) in halt().
Also updated nav2_behavior_tree::BtActionServer::haltTree() to use the same. It is used nowhere in nav2 but is useful for external users (like me) that want for instance to halt the tree on preemption.

## Global Frame Removed from 2 BT Nodes
The Global Frame was removed fromRemovePassedGoalsandGoalReachedBT nodes and instead using theframe_idof the goal’s headers for transformation.

## Introduction ofCostmapUpdate.msg
PR #3965introduces a new type of message -CostmapUpdate.msg. It is the update message related to theCostmap.msg. Now instead of sending the whole costmap in every message, such as withCostmap.msg, theCostmapUpdate.msgincludes only the area of the costmap that has changed since the previous update message. TheCostmap.msgis sent only once at the beginning, followed by the messages of theCostmapUpdate.msgtype. The idea is to mimic theOccupancyGrid.msgandOccupancyGridUpdate.msgbehavior.
To activate this feature, the Costmap2D ROS parameteralways_send_full_costmaphas to be set tofalse.
To subscribe toCostmap.msgandCostmapUpdate.msgit is recommended to use theCostmapSubscriberclass.

## Full Stack Uses Node Clocks
The stack no longer contains wall timers or wall rates. It will now use the node clocks. This will be ROS Time for simulation whenuse_sim_timeis true. Else, it uses a steady clock.

## New Graceful Motion Controller
PR #4021introduces a new type of controller for differential robots based on a pose-following kinematic control law that generates a smooth and comfortable trajectory.
SeeGraceful Controllerfor more information.

## Plugin Libraries in BT Navigator Only Includes Custom Nodes
New to Jazzy, theplugin_lib_namesparameter implicitly includes all Nav2 BT nodes automatically. It is only required now to specify additional user-generated BT plugins to load.

## New RViz Plugin for selecting Planners, Controllers, Goal Checkers, Progress Checkers and Smoothers
In PR #4091a new RViz plugin was added to select the planner, controller, goal checker, progress checker, and smoother on the fly.
The primary goal of this plugin is to facilitate the developers and easy integration testing of their configuration before deploying the robot in the intended application.
In order to facilitate the dynamic selection of the specified components, the BT selector nodes for all these components were utilized and were updated to all the relevant BT nodes.
Here we can see the working demo of the plugin:
In the GIF, it can be seen that there are two controller_ids namely,FollowPathandHighSpeedFollowPath. By default, the one defined in the Behavior tree is utilized.
In this case, theFollowPathis the default controller_id. The difference between the two controller_ids is that HighSpeedFollowPath has a higher max velocity compared to the FollowPath. This difference can be well noted in the GIF.

## RPP new optionalinterpolate_curvature_after_goalbehavior and fix conflict betweenuse_rotate_to_headingandallow_reversing
In PR #4140a new optionalinterpolate_curvature_after_goalparameter (defaultfalse) was added that activates the interpolation of a carrot after the goal in order to maintain a constant curvature lookahead distance. This is to avoid instabilities at the end of the path on the generation of the angular speed. The carrot used for the linear speed computation stays the same.
Interpolation is based on the orientation of the vector formed by the last 2 poses of the path. Hence paths of length 1 are rejected wheninterpolate_curvature_after_goalistrue. It can be used only whenuse_fixed_curvature_lookahead:true.
Additionally, the conflict betweenuse_rotate_to_headingandallow_reversingwas fixed souse_rotate_to_headingcan now be used backward.

## Cancel Checker Interface For GlobalPlanner
PR #4148introduces a new interface for theGlobalPlannerto allow for the cancellation of the current planning task.
Before the planners would continue to plan even if the goal was cancelled, now they can check it and stop planning if the goal is cancelled.
New interface forGlobalPlanner::createPlan:
This is implemented for all the planners in the stack, you can check them for the example use ofcancel_checkerfunction (simply checkcancel_checker()).
Smac and Theta* planners have a new parameterterminal_checking_intervalwhich is the frequency of the cancel or timeout checking in terms of number of iterations.

## New BtActionServer/BtNavigator parameter
PR #4209introduces a new boolean parameteralways_reload_bt_xml, which enables the possibility to always reload a requested behavior tree XML description, regardless of the currently active XML. This allows keeping the action server running while changing/developing the XML description.

## New collision monitor parameter
PR #4207introduces a new boolean parameterpolygon_subscribe_transient_local(value is false by default), which set the QoS durability for polygon topic or footprint topic subscription.

## New graceful cancellation API for Controllers
PR #4136introduces a new graceful cancellation API for controllers. Previously when a goal was canceled, the controller would stop the robot immediately. This API allows the controller to stop the robot in a more graceful way. The new API is implemented in theRegulatedPurePursuitControllerby adding a new parametercancel_deceleration. So when the goal is canceled, a constant deceleration will be used while continuing to track the path to stop the robot instead of stopping immediately. This API can be should be added to all controllers that have acceleration limits.

## Standardization of Plugin Naming with Double Colons (::)
`PR #4220`_standardizes plugin naming across the Navigation2 package to use double colons (::), replacing the previous mixed use of slashes (/) and double colons. Affected plugins include:

## Collision monitor: dynamic radius for circle type polygons
PR #4226introduces usage of parameter<polygon_name>.polygon_sub_topicfor circle type polygons. If parameter<polygon_name>.radiusis not set, collision monitor node subscribes to topic<polygon_name>.polygon_sub_topic(subscription type isstd_msgs/msg/Float32), and the current circle polygon radius will be updating accordingly to received messages on topic.

## Static Layer: new parameterfootprint_clearing_enabled
PR #4282introduces usage of parameterfootprint_clearing_enabledfor the static layer. It works similarly to thefootprint_clearing_enabledparameter in the obstacle and voxel layer. If set totrue, the static layer will clear the costmap cells that are within the robot’s footprint. It isfalseby default to keep the previous behavior.

## Lifecycle Node: added bond_heartbeat_period parameter (and allow disabling the bond mechanism)
PR #4342adds the parameterbond_heartbeat_periodto the lifecycle nodes to customize the bond mechanism publishing period (on the/bondtopic). Default value unchanged to 0.1s. Disabled if inferior or equal to 0.0.

## Rotation Shim Controller: new parameterrotate_to_goal_heading
PR #4332introduces usage of parameterrotate_to_goal_headingfor the rotation shim controller. It allows the rotation shim controller to take back control when reaching the XY goal tolerance to perform a clean rotation towards the goal heading. Some controllers will do this internally, but it is a useful option for others.

## MPPI Controller: Addition of acceleration constraints
PR #4352adds new parametersax_max,ax_min,ay_max,az_maxfor the MPPI controller. These parameters will enable the MPPI controller to generate local trajectories within the specified acceleration constraints.

## RegulatedPurePursuit Controller [RPP]: new parameteruse_cancel_deceleration
PR #4441adds a new parameter use_cancel_deceleration for the regulated pure pursuit controllers. This parameter enables the controller to use a constant deceleration to stop the robot gracefully instead of stopping immediately when a goal is canceled.

Code Examples:

Language: unknown
File: "[[p1.x,p1.y],[p2.x,p2.y],[p3.x,p3.y],...]"
```
PolygonFront
:
type
:
"polygon"
points
:
"[[0.3,
0.3],
[0.3,
-0.3],
[0.0,
-0.3],
[0.0,
0.3]]"
action_type
:
"none"
min_points
:
4
visualize
:
True
polygon_pub_topic
:
"polygon_front"
```

Language: unknown
File: /etc/security/limits.conf
```
<username> soft rtprio 99
<username> hard rtprio 99

```

Language: unknown
File: ObstaclesCritic
```
bt_navigator
:
ros__parameters
:
default_nav_to_pose_bt_xml
:
$(find-pkg-share my_package)/behavior_tree/my_nav_to_pose_bt.xml
```

Language: unknown
File: GlobalPlanner::createPlan
```
virtual
nav_msgs
::
msg
::
Path
createPlan
(
const
geometry_msgs
::
msg
::
PoseStamped
&
start
,
const
geometry_msgs
::
msg
::
PoseStamped
&
goal
,
std
::
function
<
bool
()
>
cancel_checker
)
```
