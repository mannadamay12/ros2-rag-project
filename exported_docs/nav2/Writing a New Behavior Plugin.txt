Title: Writing a New Behavior Plugin
URL: https://docs.nav2.org/plugin_tutorials/docs/writing_new_behavior_plugin.html#exporting-the-behavior-plugin
Section: getting_started/index.html
--------------------------------------------------------------------------------


## Overview
This tutorial shows how to create you own Behavior Plugin.
The Behavior Plugins live in the behavior server.
Unlike the planner and controller servers, each behavior will host its own unique action server.
The planners and controllers have the same API as they accomplish the same task.
However, recoveries can be used to do a wide variety of tasks, so each behavior can have its own unique action message definition and server.
This allows for massive flexibility in the behavior server enabling any behavior action imaginable that doesn’t need to have other reuse.

## Requirements


## Tutorial Steps


## 1- Creating a new Behavior Plugin
We will create a simple send sms behavior.
It will use Twilio to send a message via SMS to a remote operations center.
The code in this tutorial can be found innavigation_tutorialsrepository asnav2_sms_behavior.
This package can be a considered as a reference for writing Behavior Plugin.
Our example plugin implements the plugin class ofnav2_core::Behavior.
However, we have a nice wrapper for actions innav2_behaviors, so we use thenav2_behaviors::TimedBehaviorbase class for this application instead.
This wrapper class derives from thenav2_coreclass so it can be used as a plugin, but handles the vast majority of ROS 2 action server boiler plate required.
The base class fromnav2_coreprovides 4 pure virtual methods to implement a Behavior Plugin.
The plugin will be used by the behavior server to host the plugins, but each plugin will provide their own unique action server interface.
Let’s learn more about the methods needed to write a Behavior Pluginif you did not use the ``nav2_behaviors`` wrapper.
For thenav2_behaviorswrapper, which provides the ROS 2 action interface and boilerplate, we have 4 virtual methods to implement.
This tutorial uses this wrapper so these are the main elements we will address.
For this tutorial, we will be using methodsonRun(),onCycleUpdate(), andonConfigure()to create the SMS behavior.onConfigure()will be skipped for brevity, but only declares parameters.
In recoveries,onRun()method must set any initial state and kick off the behavior.
For the case of our call for help behavior, we can trivially compute all of our needs in this method.
We receive an action goal,command, which we want to process.commandcontains a fieldmessagethat contains the message we want to communicate to our mothership.
This is the “call for help” message that we want to send via SMS to our brothers in arms in the operations center.
We use the service Twilio to complete this task.
Pleasecreate an accountand get all the relevant information needed for creating the service (e.g.account_sid,auth_token, and a phone number).
You can set these values as parameters in your configuration files corresponding to theonConfigure()parameter declarations.
We use the_twilioobject to send our message with your account information from the configuration file.
We send the message and log to screen whether or not the message was sent successfully or not.
We return aFAILEDorSUCCEEDEDdepending on this value to be returned to the action client.
onCycleUpdate()is trivially simple as a result of our short-running behavior.
If the behavior was instead longer running like spinning, navigating to a safe area, or getting out of a bad spot and waiting for help, then this function would be checking for timeouts or computing control values.
For our example, we simply return success because we already completed our mission inonRun().
The remaining methods are not used and are not mandatory to override them.

## 2- Exporting the Behavior Plugin
Now that we have created our custom behavior, we need to export our Behavior Plugin so that it would be visible to the behavior server. Plugins are loaded at runtime and if they are not visible, then our behavior server won’t be able to load it. In ROS 2, exporting and loading plugins is handled bypluginlib.
Coming to our tutorial, classnav2_sms_bahavior::SendSmsis loaded dynamically asnav2_core::Behaviorwhich is our base class.
Note that it requires pluginlib to export out plugin’s class. Pluginlib would provide as macroPLUGINLIB_EXPORT_CLASSwhich does all the work of exporting.
It is good practice to place these lines at the end of the file but technically, you can also write at the top.

## 3- Pass the plugin name through params file
To enable the plugin, we need to modify thenav2_params.yamlfile as below to replace following params
with
In the above snippet, you can observe that we add the SMS behavior under thesend_smsROS 2 action server name.
We also tell the behavior server that thesend_smsis of typeSendSmsand give it our parameters for your Twilio account.

## 4- Run Behavior Plugin
Run Turtlebot3 simulation with enabled Nav2. Detailed instruction how to make it are written atGetting Started. Below is shortcut command for that:
In a new terminal run:

Code Examples:

Language: unknown
File: onRun()
```
Status
SendSms::onRun
(
const
std
::
shared_ptr
<
const
Action
::
Goal
>
command
)
{
std
::
string
response
;
bool
message_success
=
_twilio
->
send_message
(
_to_number
,
_from_number
,
command
->
message
,
response
,
""
,
false
);
if
(
!
message_success
)
{
RCLCPP_INFO
(
node_
->
get_logger
(),
"SMS send failed."
);
return
ResultStatus
{
Status
::
FAILED
};
}
RCLCPP_INFO
(
node_
->
get_logger
(),
"SMS sent successfully!"
);
return
ResultStatus
{
Status
::
SUCCEEDED
};
}
```

Language: unknown
File: onRun()
```
Status
SendSms::onCycleUpdate
()
{
return
Status
::
SUCCEEDED
;
}
```

Language: unknown
File: nav2_core::Behavior
```
#include
"pluginlib/class_list_macros.hpp"
PLUGINLIB_EXPORT_CLASS
(
nav2_sms_bahavior
::
SendSms
,
nav2_core
::
Behavior
)
```

Language: unknown
File: description
```
<library
path=
"nav2_sms_behavior_plugin"
>
<class
type=
"nav2_sms_behavior::SendSms"
base_class_type=
"nav2_core::Behavior"
>
<description>
This
is
an
example
plugin
which
produces
an
SMS
text
message
recovery.
</description>
</class>
</library>
```

Language: unknown
File: share
```
pluginlib_export_plugin_description_file(nav2_core behavior_plugin.xml)

```

Language: unknown
File: package.xml
```
<export>
<build_type>
ament_cmake
</build_type>
<nav2_core
plugin=
"${prefix}/behavior_plugin.xml"
/>
</export>
```

Language: unknown
File: nav2_params.yaml
```
behavior_server
:
# Humble and later
recoveries_server
:
# Galactic and earlier
ros__parameters
:
costmap_topic
:
local_costmap/costmap_raw
footprint_topic
:
local_costmap/published_footprint
cycle_frequency
:
10.0
behavior_plugins
:
[
"spin"
,
"backup"
,
"wait"
]
# Humble and later
recovery_plugins
:
[
"spin"
,
"backup"
,
"wait"
]
# Galactic and earlier
spin
:
plugin
:
"nav2_behaviors::Spin"
# In Iron and older versions, "/" was used instead of "::"
backup
:
plugin
:
"nav2_behaviors::BackUp"
# In Iron and older versions, "/" was used instead of "::"
wait
:
plugin
:
"nav2_behaviors::Wait"
# In Iron and older versions, "/" was used instead of "::"
global_frame
:
odom
robot_base_frame
:
base_link
transform_timeout
:
0.1
use_sim_time
:
true
simulate_ahead_time
:
2.0
max_rotational_vel
:
1.0
min_rotational_vel
:
0.4
rotational_acc_lim
:
3.2
```

Language: unknown
File: nav2_params.yaml
```
behavior_server
:
# Humble and newer
recoveries_server
:
# Galactic and earlier
ros__parameters
:
local_costmap_topic
:
local_costmap/costmap_raw
local_footprint_topic
:
local_costmap/published_footprint
global_costmap_topic
:
global_costmap/costmap_raw
global_footprint_topic
:
global_costmap/published_footprint
cycle_frequency
:
10.0
behavior_plugins
:
[
"spin"
,
"backup"
,
"wait"
,
"send_sms"
]
# Humble and newer
recovery_plugins
:
[
"spin"
,
"backup"
,
"wait"
,
"send_sms"
]
# Galactic and earlier
spin
:
plugin
:
"nav2_behaviors::Spin"
# In Iron and older versions, "/" was used instead of "::"
backup
:
plugin
:
"nav2_behaviors::BackUp"
# In Iron and older versions, "/" was used instead of "::"
wait
:
plugin
:
"nav2_behaviors::Wait"
# In Iron and older versions, "/" was used instead of "::"
send_sms
:
plugin
:
"nav2_sms_behavior::SendSms"
# In Iron and older versions, "/" was used instead of "::"
account_sid
:
...
# your sid
auth_token
:
...
# your token
from_number
:
...
# your number
to_number
:
...
# the operations center number
global_frame
:
odom
robot_base_frame
:
base_link
transform_timeout
:
0.1
use_sim_time
:
true
simulate_ahead_time
:
2.0
max_rotational_vel
:
1.0
min_rotational_vel
:
0.4
rotational_acc_lim
:
3.2
```

Language: unknown
File: SendSms
```
$
ros2
launch
nav2_bringup
tb3_simulation_launch.py
params_file:
=
/path/to/your_params_file.yaml

```

Language: unknown
File: SendSms
```
$
ros2
action
send_goal
"send_sms"
nav2_sms_behavior/action/SendSms
"{message : Hello!! Navigation2 World }"
```
