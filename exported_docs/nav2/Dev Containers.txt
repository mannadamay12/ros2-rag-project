Title: Dev Containers
URL: https://docs.nav2.org/development_guides/devcontainer_docs/index.html#prerequisites
Section: getting_started/index.html
--------------------------------------------------------------------------------


## What, Why, How?
Lets briefly explain what dev containers are, why you should use them, and how they work.

## What is a Dev Container?
A dev container is a Docker container that has all the tools and dependencies you need to develop the project. It runs in a self-contained environment and is isolated from other containers and your host machine. This lets you reliably develop for the project anywhere, notably for linux distributions targeted by ROS, regardless of your host machine’s operating system.

## Why use a Dev Container?
A dev container provides a common and consistent development environment. It ensures that everyone on the team is using the same tools and dependencies. It also makes it easy to switch between projects because each project can use a different container. This is especially useful if you work on multiple projects that use different versions of the same tools and dependencies, such as different versions of ROS.

## How do Dev Containers work?
When you open the project in VS Code, VS Code checks for the dev container configuration nested within the.devcontainerfolder under the project’s root directory. If it finds one, it can prompt you to reopen the project in a container. If you choose to do so, it launches the container, connects to it, and mounts your project folder inside the container. You can then use VS Code in the container just as you would locally. While setting up the container, VS Code can also attempt to passthrough useful aspects of your local environment, such as git user configurations, X11 sockets, and more.
This is quite similar to earlier tools used to customize and run docker containers for development:

## Prerequisites
To use dev containers, you’ll need the following:

## Getting started
Getting started using dev containers is as simple as opening the project in VS Code by either: following the notification prompt to reopen the project in a container, or explicitly opening the command palette (Crtl+Shift+P) and selectingRemote-Containers:ReopeninContainer. This will create a new container, install any extensions specified in the project’s default.devcontainer/devcontainer.jsonconfig file, and mount the project’s root directory as the workspace folder. Once the container is created, VS Code will connect to it and you can start developing.
While waiting for the initial setup, feel free to stretch your legs, grab a coffee, or continue to read the following guides to learn more about creating and using dev containers, or how to visualize and leverage graphical user interfaces from a headless development environment.

## Security
A word of caution when using dev containers: they are powerful tools, but can be a security concern, as the capability of arbitrary code execution facilitated by IDE extensions to enable such automation and convenience remains inherently dual use. Before launching a dev container, ensure you trust the workspaces and authors. For example, when reviewing a pull request, verify patches remain benign and do not introduce any malicious code. Although such vigilance is merited whenever compiling and running patched code, using containers with either elevated privileges or filesystem access renders this diligence even more prudent.
