Title: Detailed Behavior Tree Walkthrough
URL: https://docs.nav2.org/behavior_trees/overview/detailed_behavior_tree_walkthrough.html#prerequisites
Section: getting_started/index.html
--------------------------------------------------------------------------------


## Overview
This document serves as a reference guide to the main behavior tree (BT) used in Nav2.
There are many example behavior trees provided innav2_bt_navigator/behavior_trees,
but these sometimes have to be re-configured based on the application of the robot.
The following document will walk through the current main default BTnavigate_to_pose_w_replanning_and_recovery.xmlin great detail.

## Prerequisites


## Navigate To Pose With Replanning and Recovery
The following section will describe in detail the concept of the main and default BT currently used in Nav2,navigate_to_pose_w_replanning_and_recovery.xml.
This behavior tree replans the global path periodically at 1 Hz and it also has recovery actions.
BTs are primarily defined in XML. The tree shown above is represented in XML as follows.
This is likely still a bit overwhelming, but this tree can be broken into two smaller subtrees that we can focus on one at a time.
These smaller subtrees are the children of the top-mostRecoveryNode. From this point forward theNavigateWithReplanningsubtree will be referred to as theNavigationsubtree, and theRecoveryFallbacksubtree will be known as theRecoverysubtree.
This can be represented in the following way:
TheNavigationsubtree mainly involves actual navigation behavior:
TheRecoverysubtree includes behaviors for system level failures or items that were not easily dealt with internally.
The overall BT will (hopefully) spend most of its time in theNavigationsubtree. If either of the two main behaviors in theNavigationsubtree fail
(path calculation or path following), contextual recoveries will be attempted.
If the contextual recoveries were still not enough, theNavigationsubtree will returnFAILURE.
The system will move on to theRecoverysubtree to attempt to clear any system level navigation failures.
This happens until thenumber_of_retriesfor the parentRecoveryNodeis exceeded (which by default is 6).

## Navigation Subtree
Now that we have gone over the control flow between theNavigationsubtree and theRecoverysubtree, let’s focus on the Navigation subtree.
The XML of this subtree is as follows:
This subtree has two primary actionsComputePathToPoseandFollowPath.
If either of these two actions fail, they will attempt to clear the failure contextually.
The crux of the tree can be represented with only one parent and two children nodes like this:
The parentPipelineSequencenode allows theComputePathToPoseto be ticked, and once that succeeds,FollowPathto be ticked.
While theFollowPathsubtree is being ticked, theComputePathToPosesubtree will be ticked as well. This allows for the path to be recomputed as the robot moves around.
Both theComputePathToPoseand theFollowPathfollow the same general structure.
The below is theComputePathToPosesubtree:
The parentRecoveryNodecontrols the flow between the action, and the contextual recovery subtree.
The contextual recoveries for bothComputePathToPoseandFollowPathinvolve checking if the goal has been updated, and involves clearing the relevant costmap.
Consider changing thenumber_of_retriesparameter in the parentRecoveryNodecontrol node if your application can tolerate more attempts at contextual recoveries before moving on to system-level recoveries.
The only differences in the BT subtree ofComputePathToPoseandFollowPathare outlined below:

## Recovery Subtree
TheRecoverysubtree is the second big “half” of the Nav2 defaultnavigate_to_pose_w_replanning_and_recovery.xmltree.
In short, this subtree is triggered when theNavigationsubtree returnsFAILUREand controls the recoveries at the system level (in the case the contextual recoveries in theNavigationsubtree were not sufficient).
And the XML snippet:
The top most parent,ReactiveFallbackcontrols the flow between the rest of the system wide recoveries, and asynchronously checks if a new goal has been received.
If at any point the goal gets updated, this subtree will halt all children and returnSUCCESS. This allows for quick reactions to new goals and preempt currently executing recoveries.
This should look familiar to the contextual recovery portions of theNavigationsubtree. This is a common BT pattern to handle the situation “Unless ‘this condition’ happens, Do action A”.
These condition nodes can be extremely powerful and are typically paired withReactiveFallback. It can be easy to imagine wrapping this wholenavigate_to_pose_w_replanning_and_recoverytree
in aReactiveFallbackwith aisBatteryLowcondition – meaning thenavigate_to_pose_w_replanning_and_recoverytree will executeunlessthe battery becomes low (and then enter a different subtree for docking to recharge).
If the goal is never updated, the behavior tree will go on to theRoundRobinnode. These are the default four system-level recoveries in the BT are:
UponSUCCESSof any of the four children of the parentRoundRobin, the robot will attempt to renavigate in theNavigationsubtree.
If this renavigation was not successful, the next child of theRoundRobinwill be ticked.
For example, let’s say the robot is stuck and theNavigationsubtree returnsFAILURE:
(for the sake of this example, let’s assume that the goal is never updated).
If theBackUpaction was not sufficient enough to allow the robot to become un-stuck, the above logic will go on indefinitely until thenumber_of_retriesin the parent of theNavigatesubtree andRecoverysubtree is exceeded, or if all the system-wide recoveries in theRecoverysubtree returnFAILURE(this is unlikely, and likely points to some other system failure).

Code Examples:

Language: unknown
File: navigate_to_pose_w_replanning_and_recovery.xml
```
<root
main_tree_to_execute=
"MainTree"
>
<BehaviorTree
ID=
"MainTree"
>
<RecoveryNode
number_of_retries=
"6"
name=
"NavigateRecovery"
>
<PipelineSequence
name=
"NavigateWithReplanning"
>
<RateController
hz=
"1.0"
>
<RecoveryNode
number_of_retries=
"1"
name=
"ComputePathToPose"
>
<ComputePathToPose
goal=
"{goal}"
path=
"{path}"
planner_id=
"GridBased"
/>
<ReactiveFallback
name=
"ComputePathToPoseRecoveryFallback"
>
<GoalUpdated/>
<ClearEntireCostmap
name=
"ClearGlobalCostmap-Context"
service_name=
"global_costmap/clear_entirely_global_costmap"
/>
</ReactiveFallback>
</RecoveryNode>
</RateController>
<RecoveryNode
number_of_retries=
"1"
name=
"FollowPath"
>
<FollowPath
path=
"{path}"
controller_id=
"FollowPath"
/>
<ReactiveFallback
name=
"FollowPathRecoveryFallback"
>
<GoalUpdated/>
<ClearEntireCostmap
name=
"ClearLocalCostmap-Context"
service_name=
"local_costmap/clear_entirely_local_costmap"
/>
</ReactiveFallback>
</RecoveryNode>
</PipelineSequence>
<ReactiveFallback
name=
"RecoveryFallback"
>
<GoalUpdated/>
<RoundRobin
name=
"RecoveryActions"
>
<Sequence
name=
"ClearingActions"
>
<ClearEntireCostmap
name=
"ClearLocalCostmap-Subtree"
service_name=
"local_costmap/clear_entirely_local_costmap"
/>
<ClearEntireCostmap
name=
"ClearGlobalCostmap-Subtree"
service_name=
"global_costmap/clear_entirely_global_costmap"
/>
</Sequence>
<Spin
spin_dist=
"1.57"
/>
<Wait
wait_duration=
"5"
/>
<BackUp
backup_dist=
"0.15"
backup_speed=
"0.025"
/>
</RoundRobin>
</ReactiveFallback>
</RecoveryNode>
</BehaviorTree>
</root>
```

Language: unknown
File: RecoveryNode
```
<RecoveryNode
number_of_retries=
"6"
name=
"NavigateRecovery"
>
```

Language: unknown
File: Recovery
```
<PipelineSequence
name=
"NavigateWithReplanning"
>
<RateController
hz=
"1.0"
>
<RecoveryNode
number_of_retries=
"1"
name=
"ComputePathToPose"
>
<ComputePathToPose
goal=
"{goal}"
path=
"{path}"
planner_id=
"GridBased"
/>
<ReactiveFallback
name=
"ComputePathToPoseRecoveryFallback"
>
<GoalUpdated/>
<ClearEntireCostmap
name=
"ClearGlobalCostmap-Context"
service_name=
"global_costmap/clear_entirely_global_costmap"
/>
</ReactiveFallback>
</RecoveryNode>
</RateController>
<RecoveryNode
number_of_retries=
"1"
name=
"FollowPath"
>
<FollowPath
path=
"{path}"
controller_id=
"FollowPath"
/>
<ReactiveFallback
name=
"FollowPathRecoveryFallback"
>
<GoalUpdated/>
<ClearEntireCostmap
name=
"ClearLocalCostmap-Context"
service_name=
"local_costmap/clear_entirely_local_costmap"
/>
</ReactiveFallback>
</RecoveryNode>
</PipelineSequence>
```

Language: unknown
File: Navigation
```
<ReactiveFallback
name=
"RecoveryFallback"
>
<GoalUpdated/>
<RoundRobin
name=
"RecoveryActions"
>
<Sequence
name=
"ClearingActions"
>
<ClearEntireCostmap
name=
"ClearLocalCostmap-Subtree"
service_name=
"local_costmap/clear_entirely_local_costmap"
/>
<ClearEntireCostmap
name=
"ClearGlobalCostmap-Subtree"
service_name=
"global_costmap/clear_entirely_global_costmap"
/>
</Sequence>
<Spin
spin_dist=
"1.57"
/>
<Wait
wait_duration=
"5"
/>
<BackUp
backup_dist=
"0.15"
backup_speed=
"0.025"
/>
</RoundRobin>
</ReactiveFallback>
```
