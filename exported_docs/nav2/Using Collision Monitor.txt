Title: Using Collision Monitor
URL: https://docs.nav2.org/tutorials/docs/using_collision_monitor.html#requirements
Section: getting_started/index.html
--------------------------------------------------------------------------------


## Overview
This tutorial shows how to use a Collision Monitor with Nav2 stack. Based on this tutorial, you can setup it for your environment and needs.

## Requirements
It is assumed ROS2 and Nav2 dependent packages are installed or built locally.
Please make sure that Nav2 project is also built locally as it was made inBuild and Install.

## Configuring Collision Monitor
The Collision Monitor node has its owncollision_monitor_node.launch.pylaunch-file and preset parameters in thecollision_monitor_params.yamlfile for demonstration, though its trivial to add this to Nav2’s main launch file if being used in practice.
For the demonstration, two shapes will be created - an inner stop and a larger slowdown bounding boxes placed in the front of the robot:
If more than 3 points will appear inside a slowdown box, the robot will decrease its speed to30%from its value.
For the cases when obstacles are dangerously close to the robot, inner stop zone will work.
For this setup, the following lines should be added intocollision_monitor_params.yamlparameters file. Stop box is named asPolygonStopand slowdown bounding box - asPolygonSlow:
For the working configuration, at least one data source should be added.
In current demonstration, it is used laser scanner (thoughPointCloud2and Range/Sonar/IR sensors are also possible), which is described by the following lines for Collision Monitor node:
Set topic names, frame ID-s and timeouts to work correctly with a default Nav2 setup.
The wholenav2_collision_monitor/params/collision_monitor_params.yamlfile in this case will look as follows:

## Configuring Collision Monitor with VelocityPolygon
For this part of tutorial, we will set up the Collision Monitor withVelocityPolygontype for astopaction.VelocityPolygonallows the user to setup multiple polygons to cover the range of the robot’s velocity limits. For example, the user can configure different polygons for rotation, moving forward, or moving backward. The Collision Monitor will check the robot’s velocity against each sub polygon to determine the appropriate polygon to be used for collision checking.
In general, here are the steps to configure the Collision Monitor withVelocityPolygontype:
In this example, we will consider anon-holonomicrobot with linear velocity limits of-1.0to1.0m/s and angular velocity limits of-1.0to1.0rad/s. Thelinear_minandlinear_maxparameters of the sub polygons should be set to the robot’s linear velocity limits, while thetheta_minandtheta_maxparameters should be set to the robot’s angular velocity limits.
Below is the example configuration using 4 sub-polygons to cover the full range of the robot’s velocity limits:
For holomic robots:
For holomic robots, theholonomicproperty should be set totrue. In this scenario, thelinear_minandlinear_maxparameters should cover the robot’s resultant velocity limits, while thetheta_minandtheta_maxparameters should cover the robot’s angular velocity limits. Additionally, there will be 2 more parameters,direction_start_angleanddirection_end_angle, to specify the resultant velocity direction. The covered direction will always span fromdirection_start_angletodirection_end_anglein thecounter-clockwisedirection.
Below shows some common configurations for holonomic robots that cover multiple directions of the resultant velocity:

## Preparing Nav2 stack
The Collision Monitor is designed to operate below Nav2 as an independent safety node.
It acts as a filter for thecmd_velmessages from the controller to avoid potential collisions.
If no such zone is triggered, then thecmd_velmessage is used.
Else, it is scaled or set to stop as appropriate.
By default, the Collision Monitor is configured for usage with the Nav2 bringup package, running in parallel with thenavigation_launch.pylaunch file. For correct operation of the Collision Monitor with the Velocity Smoother, it is required to remove the Velocity Smoother’scmd_vel_smoothedremapping in thenavigation_launch.pybringup script as presented below. This will make the output topic of the Velocity Smoother to be untouched, which will be the input to the newly added Collision Monitor:
If you have changed Collision Monitor’s defaultcmd_vel_in_topicandcmd_vel_out_topicconfiguration, make sure Velocity Smoother’s default output topiccmd_vel_smoothedshould match to the input velocitycmd_vel_in_topicparameter value of the Collision Monitor node, and the output velocitycmd_vel_out_topicparameter value should be actualcmd_velto fit the replacement.

## Demo Execution
Once Collision Monitor node has been tuned andcmd_veltopics adjusted, Collision Monitor node is ready to run.
For that, run Nav2 stack as written inGetting Started:
In parallel console, launch Collision Monitor node by using its launch-file:
Since bothPolygonStopandPolygonSlowpolygons will have their own publishers, they could be added to visualization as shown at the picture below:
Set the initial pose and then put Nav2 goal on map.
The robot will start its movement, slowing down while running near the obstacles, and stopping in close proximity to them:

Code Examples:

Language: unknown
File: PolygonSlow
```
polygons
:
[
"PolygonStop"
,
"PolygonSlow"
]
PolygonStop
:
type
:
"polygon"
points
:
"[[0.4,
0.3],
[0.4,
-0.3],
[0.0,
-0.3],
[0.0,
0.3]]"
action_type
:
"stop"
min_points
:
4
# max_points: 3 for Humble
visualize
:
True
polygon_pub_topic
:
"polygon_stop"
PolygonSlow
:
type
:
"polygon"
points
:
"[[0.6,
0.4],
[0.6,
-0.4],
[0.0,
-0.4],
[0.0,
0.4]]"
action_type
:
"slowdown"
min_points
:
4
# max_points: 3 for Humble
slowdown_ratio
:
0.3
visualize
:
True
polygon_pub_topic
:
"polygon_slowdown"
```

Language: unknown
File: PointCloud2
```
observation_sources
:
[
"scan"
]
scan
:
type
:
"scan"
topic
:
"scan"
```

Language: unknown
File: nav2_collision_monitor/params/collision_monitor_params.yaml
```
collision_monitor
:
ros__parameters
:
use_sim_time
:
True
base_frame_id
:
"base_footprint"
odom_frame_id
:
"odom"
cmd_vel_in_topic
:
"cmd_vel_smoothed"
cmd_vel_out_topic
:
"cmd_vel"
transform_tolerance
:
0.5
source_timeout
:
5.0
stop_pub_timeout
:
2.0
enable_stamped_cmd_vel
:
True
# False for Jazzy or older by default
polygons
:
[
"PolygonStop"
,
"PolygonSlow"
]
PolygonStop
:
type
:
"polygon"
points
:
"[[0.4,
0.3],
[0.4,
-0.3],
[0.0,
-0.3],
[0.0,
0.3]]"
action_type
:
"stop"
min_points
:
4
# max_points: 3 for Humble
visualize
:
True
polygon_pub_topic
:
"polygon_stop"
PolygonSlow
:
type
:
"polygon"
points
:
"[[0.6,
0.4],
[0.6,
-0.4],
[0.0,
-0.4],
[0.0,
0.4]]"
action_type
:
"slowdown"
min_points
:
4
# max_points: 3 for Humble
slowdown_ratio
:
0.3
visualize
:
True
polygon_pub_topic
:
"polygon_slowdown"
observation_sources
:
[
"scan"
]
scan
:
type
:
"scan"
topic
:
"scan"
```

Language: unknown
File: theta_max
```
polygons
:
[
"VelocityPolygonStop"
]
VelocityPolygonStop
:
type
:
"velocity_polygon"
action_type
:
"stop"
min_points
:
6
visualize
:
True
enabled
:
True
polygon_pub_topic
:
"velocity_polygon_stop"
velocity_polygons
:
[
"rotation"
,
"translation_forward"
,
"translation_backward"
,
"stopped"
]
holonomic
:
false
rotation
:
points
:
"[[0.3,
0.3],
[0.3,
-0.3],
[-0.3,
-0.3],
[-0.3,
0.3]]"
linear_min
:
0.0
linear_max
:
0.05
theta_min
:
-1.0
theta_max
:
1.0
translation_forward
:
points
:
"[[0.35,
0.3],
[0.35,
-0.3],
[-0.2,
-0.3],
[-0.2,
0.3]]"
linear_min
:
0.0
linear_max
:
1.0
theta_min
:
-1.0
theta_max
:
1.0
translation_backward
:
points
:
"[[0.2,
0.3],
[0.2,
-0.3],
[-0.35,
-0.3],
[-0.35,
0.3]]"
linear_min
:
-1.0
linear_max
:
0.0
theta_min
:
-1.0
theta_max
:
1.0
# This is the last polygon to be checked, it should cover the entire range of robot's velocities
# It is used as the stopped polygon when the robot is not moving and as a fallback if the velocity
# is not covered by any of the other sub-polygons
stopped
:
points
:
"[[0.25,
0.25],
[0.25,
-0.25],
[-0.25,
-0.25],
[-0.25,
0.25]]"
linear_min
:
-1.0
linear_max
:
1.0
theta_min
:
-1.0
theta_max
:
1.0
```

Language: unknown
File: navigation_launch.py
```
Node
(
package
=
'nav2_velocity_smoother'
,
executable
=
'velocity_smoother'
,
name
=
'velocity_smoother'
,
output
=
'screen'
,
respawn
=
use_respawn
,
respawn_delay
=
2.0
,
parameters
=
[
configured_params
],
arguments
=
[
'--ros-args'
,
'--log-level'
,
log_level
],
remappings
=
remappings
+
-
[(
'cmd_vel'
,
'cmd_vel_nav'
),
(
'cmd_vel_smoothed'
,
'cmd_vel'
)]),
+
[(
'cmd_vel'
,
'cmd_vel_nav'
)]),
...
ComposableNode
(
package
=
'nav2_velocity_smoother'
,
plugin
=
'nav2_velocity_smoother::VelocitySmoother'
,
name
=
'velocity_smoother'
,
parameters
=
[
configured_params
],
remappings
=
remappings
+
-
[(
'cmd_vel'
,
'cmd_vel_nav'
),
(
'cmd_vel_smoothed'
,
'cmd_vel'
)]),
+
[(
'cmd_vel'
,
'cmd_vel_nav'
)]),
```

Language: unknown
File: cmd_vel
```
ros2
launch
nav2_bringup
tb3_simulation_launch.py
headless:
=
False

```

Language: unknown
File: cmd_vel
```
ros2
launch
nav2_collision_monitor
collision_monitor_node.launch.py

```
